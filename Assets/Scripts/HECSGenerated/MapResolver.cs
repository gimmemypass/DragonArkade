using Components;using HECSFramework.Core;using MessagePack.Resolvers;using MessagePack;[Union(0, typeof(AnimatorStateComponentResolver))][Union(1, typeof(VisualFXHolderComponentResolver))][Union(2, typeof(PassiveAbilityTagResolver))][Union(3, typeof(TestReactComponentResolver))][Union(4, typeof(SoundVolumeComponentResolver))][Union(5, typeof(PredicatesComponentResolver))][Union(6, typeof(InputOverUIComponentResolver))][Union(7, typeof(AfterLifeTagComponentResolver))][Union(8, typeof(AfterLifeCompleteTagComponentResolver))][Union(9, typeof(UpgradeWindowComponentResolver))][Union(10, typeof(EnemyTagComponentResolver))][Union(11, typeof(SpheresControllerTagComponentResolver))][Union(12, typeof(HealthBarsManagerComponentResolver))][Union(13, typeof(PlayerUpgradeComponentResolver))][Union(14, typeof(InvincibleComponentResolver))][Union(15, typeof(WaitStateComponentResolver))][Union(16, typeof(ViewReferenceComponentResolver))][Union(17, typeof(CountersHolderComponentResolver))][Union(18, typeof(AbilityOwnerComponentResolver))][Union(19, typeof(NeedHpBarComponentResolver))][Union(20, typeof(LevelsHolderComponentResolver))][Union(21, typeof(SlowdownComponentResolver))][Union(22, typeof(HealAbilityComponentResolver))][Union(23, typeof(CollisionsComponentResolver))][Union(24, typeof(VisualInActionTagComponentResolver))][Union(25, typeof(MainCharacterTagComponentResolver))][Union(26, typeof(ChoosingPushDirectionSphereAbilityComponentResolver))][Union(27, typeof(MainCanvasTagComponentResolver))][Union(28, typeof(AdditionalCanvasTagComponentResolver))][Union(29, typeof(CheckTwoComponentResolver))][Union(30, typeof(ActorProviderComponentResolver))][Union(31, typeof(UntilSuccessStrategyNodeComponentResolver))][Union(32, typeof(SpeedUpSphereComponentResolver))][Union(33, typeof(PegasusMovementComponentResolver))][Union(34, typeof(PoolableTagComponentResolver))][Union(35, typeof(CachedEntitiesGlobalHolderComponentResolver))][Union(36, typeof(AbilityPredicateComponentResolver))][Union(37, typeof(TargetPositionComponentResolver))][Union(38, typeof(SphereComponentResolver))][Union(39, typeof(PlayerLevelComponentResolver))][Union(40, typeof(IconComponentResolver))][Union(41, typeof(UITagComponentResolver))][Union(42, typeof(StickTagComponentResolver))][Union(43, typeof(ScenarioAnimationComponentResolver))][Union(44, typeof(SpawnPointComponentResolver))][Union(45, typeof(OverrideAnimatorComponentResolver))][Union(46, typeof(StateInfoComponentResolver))][Union(47, typeof(GameStateComponentResolver))][Union(48, typeof(ViewReferenceGameObjectComponentResolver))][Union(49, typeof(ViewDestructionDelayedComponentResolver))][Union(50, typeof(UIPriorityIndexComponentResolver))][Union(51, typeof(UIGroupTagComponentResolver))][Union(52, typeof(TimeProviderComponentResolver))][Union(53, typeof(TestSerializationComponentResolver))][Union(54, typeof(ActorContainerIDResolver))][Union(55, typeof(TimeScaleComponentResolver))][Union(56, typeof(ScenesHolderComponentResolver))][Union(57, typeof(ExplodeSpheresAbilityComponentResolver))][Union(58, typeof(SetupAfterViewTagComponentResolver))][Union(59, typeof(AbilitiesHolderComponentResolver))][Union(60, typeof(AbilityTagComponentResolver))][Union(61, typeof(AIStrategyComponentResolver))][Union(62, typeof(MainCameraComponentResolver))][Union(63, typeof(RadiusComponentResolver))][Union(64, typeof(AnimationCheckOutsHolderComponentResolver))][Union(65, typeof(IsDeadTagComponentResolver))][Union(66, typeof(CardsGlobalHolderComponentResolver))][Union(67, typeof(SoftCurrencyRewardVisualConfigComponentResolver))][Union(68, typeof(PlayerTagComponentResolver))][Union(69, typeof(TestInitComponentResolver))][Union(70, typeof(UnityTransformComponentResolver))][Union(71, typeof(UnityRectTransformComponentResolver))][Union(72, typeof(UIViewReferenceComponentResolver))][Union(73, typeof(TransformComponentResolver))][Union(74, typeof(PoolableViewsProviderComponentResolver))][Union(75, typeof(OnApplicationQuitTagComponentResolver))][Union(76, typeof(NetworkEntityTagComponentResolver))][Union(77, typeof(ItemTagComponentResolver))][Union(78, typeof(InputListenerTagComponentResolver))][Union(79, typeof(StrategySideExecuteComponentResolver))][Union(80, typeof(AppVersionComponentResolver))][Union(81, typeof(SpeedDependsOnTimeScaleComponentResolver))][Union(82, typeof(CenterTagComponentResolver))][Union(83, typeof(CardTagComponentResolver))][Union(84, typeof(ViewReadyTagComponentResolver))][Union(85, typeof(SphereCastContextResolver))][Union(86, typeof(StateDataComponentResolver))][Union(87, typeof(InitOnAddAbilityTagComponentResolver))][Union(88, typeof(AdditionalAbilityIndexComponentResolver))][Union(89, typeof(NavMeshAgentComponentResolver))][Union(90, typeof(InputActionsComponentResolver))][Union(91, typeof(IgnoreReferenceContainerTagComponentResolver))][Union(92, typeof(GameLogicTagComponentResolver))][Union(93, typeof(CacheCounterValuesComponentResolver))][Union(94, typeof(LevelModifierHolderComponentResolver))][Union(95, typeof(ShowHpBarTagComponentResolver))][Union(96, typeof(CustomHpBarComponentResolver))][Union(97, typeof(CharactersHolderComponentResolver))][Union(98, typeof(UIBusyTagComponentResolver))][Union(99, typeof(OverlapSphereCastContextResolver))][Union(100, typeof(StateContextComponentResolver))][Union(101, typeof(SavePositionComponentResolver))][Union(102, typeof(PushDirectionComponentResolver))][Union(103, typeof(ActionsHolderComponentResolver))][Union(104, typeof(SoftCurrencyCounterMonoComponentProviderComponentResolver))][Union(105, typeof(RigidbodyProviderComponentResolver))][Union(106, typeof(ActionsWithPredicateHolderComponentResolver))][Union(107, typeof(SoftValueCounterComponentResolver))][Union(108, typeof(EnergyRegenerationComponentResolver))][Union(109, typeof(HealthComponentResolver))][Union(110, typeof(CooldownComponentResolver))][Union(111, typeof(SpeedComponentResolver))][Union(112, typeof(EnergyComponentResolver))][Union(113, typeof(TestComponentResolver))][Union(114, typeof(TestWorldSingleComponentResolver))][Union(115, typeof(DamageComponentResolver))]public partial interface IData { }namespace HECSFramework.Core{	public partial class ResolversMap	{		public ResolversMap()		{			GetComponentContainerFunc = GetContainerForComponentFuncProvider;			ProcessResolverContainer = ProcessResolverContainerRealisation;			GetComponentFromContainer = GetComponentFromContainerFuncRealisation;			InitPartialCommandResolvers();			InitCustomResolvers();			JSONModuleInit();		}		partial void JSONModuleInit();		partial void InitCustomResolvers();		partial void LoadDataFromContainerSwitch(ResolverDataContainer dataContainerForResolving, int worldIndex)		{			switch (dataContainerForResolving.Type)			{				case 0:					ProcessComponents(ref dataContainerForResolving, worldIndex);					break;			}		}		private ResolverDataContainer GetContainerForComponentFuncProvider<T>(T component) where T: IComponent		{			switch (component.GetTypeHashCode)			{				case -950198728:					var animatorstatecomponentresolver = component as AnimatorStateComponent;					var AnimatorStateComponentData = new AnimatorStateComponentResolver().In(ref animatorstatecomponentresolver);					return PackComponentToContainer(component, AnimatorStateComponentData);				case -1874747970:					var visualfxholdercomponentresolver = component as VisualFXHolderComponent;					var VisualFXHolderComponentData = new VisualFXHolderComponentResolver().In(ref visualfxholdercomponentresolver);					return PackComponentToContainer(component, VisualFXHolderComponentData);				case -1856633313:					var passiveabilitytagresolver = component as PassiveAbilityTag;					var PassiveAbilityTagData = new PassiveAbilityTagResolver().In(ref passiveabilitytagresolver);					return PackComponentToContainer(component, PassiveAbilityTagData);				case 815927063:					var testreactcomponentresolver = component as TestReactComponent;					var TestReactComponentData = new TestReactComponentResolver().In(ref testreactcomponentresolver);					return PackComponentToContainer(component, TestReactComponentData);				case 1587816967:					var soundvolumecomponentresolver = component as SoundVolumeComponent;					var SoundVolumeComponentData = new SoundVolumeComponentResolver().In(ref soundvolumecomponentresolver);					return PackComponentToContainer(component, SoundVolumeComponentData);				case -1064941338:					var predicatescomponentresolver = component as PredicatesComponent;					var PredicatesComponentData = new PredicatesComponentResolver().In(ref predicatescomponentresolver);					return PackComponentToContainer(component, PredicatesComponentData);				case 1204197613:					var inputoveruicomponentresolver = component as InputOverUIComponent;					var InputOverUIComponentData = new InputOverUIComponentResolver().In(ref inputoveruicomponentresolver);					return PackComponentToContainer(component, InputOverUIComponentData);				case -88497250:					var afterlifetagcomponentresolver = component as AfterLifeTagComponent;					var AfterLifeTagComponentData = new AfterLifeTagComponentResolver().In(ref afterlifetagcomponentresolver);					return PackComponentToContainer(component, AfterLifeTagComponentData);				case 53484848:					var afterlifecompletetagcomponentresolver = component as AfterLifeCompleteTagComponent;					var AfterLifeCompleteTagComponentData = new AfterLifeCompleteTagComponentResolver().In(ref afterlifecompletetagcomponentresolver);					return PackComponentToContainer(component, AfterLifeCompleteTagComponentData);				case -803643700:					var upgradewindowcomponentresolver = component as UpgradeWindowComponent;					var UpgradeWindowComponentData = new UpgradeWindowComponentResolver().In(ref upgradewindowcomponentresolver);					return PackComponentToContainer(component, UpgradeWindowComponentData);				case -1416715012:					var enemytagcomponentresolver = component as EnemyTagComponent;					var EnemyTagComponentData = new EnemyTagComponentResolver().In(ref enemytagcomponentresolver);					return PackComponentToContainer(component, EnemyTagComponentData);				case 407906688:					var spherescontrollertagcomponentresolver = component as SpheresControllerTagComponent;					var SpheresControllerTagComponentData = new SpheresControllerTagComponentResolver().In(ref spherescontrollertagcomponentresolver);					return PackComponentToContainer(component, SpheresControllerTagComponentData);				case 1922359605:					var healthbarsmanagercomponentresolver = component as HealthBarsManagerComponent;					var HealthBarsManagerComponentData = new HealthBarsManagerComponentResolver().In(ref healthbarsmanagercomponentresolver);					return PackComponentToContainer(component, HealthBarsManagerComponentData);				case -1002177873:					var playerupgradecomponentresolver = component as PlayerUpgradeComponent;					var PlayerUpgradeComponentData = new PlayerUpgradeComponentResolver().In(ref playerupgradecomponentresolver);					return PackComponentToContainer(component, PlayerUpgradeComponentData);				case -1176016825:					var invinciblecomponentresolver = component as InvincibleComponent;					var InvincibleComponentData = new InvincibleComponentResolver().In(ref invinciblecomponentresolver);					return PackComponentToContainer(component, InvincibleComponentData);				case 867896372:					var waitstatecomponentresolver = component as WaitStateComponent;					var WaitStateComponentData = new WaitStateComponentResolver().In(ref waitstatecomponentresolver);					return PackComponentToContainer(component, WaitStateComponentData);				case -1029564515:					var viewreferencecomponentresolver = component as ViewReferenceComponent;					var ViewReferenceComponentData = new ViewReferenceComponentResolver().In(ref viewreferencecomponentresolver);					return PackComponentToContainer(component, ViewReferenceComponentData);				case -1627736277:					var countersholdercomponentresolver = component as CountersHolderComponent;					var CountersHolderComponentData = new CountersHolderComponentResolver().In(ref countersholdercomponentresolver);					return PackComponentToContainer(component, CountersHolderComponentData);				case 313621202:					var abilityownercomponentresolver = component as AbilityOwnerComponent;					var AbilityOwnerComponentData = new AbilityOwnerComponentResolver().In(ref abilityownercomponentresolver);					return PackComponentToContainer(component, AbilityOwnerComponentData);				case 671481967:					var needhpbarcomponentresolver = component as NeedHpBarComponent;					var NeedHpBarComponentData = new NeedHpBarComponentResolver().In(ref needhpbarcomponentresolver);					return PackComponentToContainer(component, NeedHpBarComponentData);				case 203333459:					var levelsholdercomponentresolver = component as LevelsHolderComponent;					var LevelsHolderComponentData = new LevelsHolderComponentResolver().In(ref levelsholdercomponentresolver);					return PackComponentToContainer(component, LevelsHolderComponentData);				case -1258897312:					var slowdowncomponentresolver = component as SlowdownComponent;					var SlowdownComponentData = new SlowdownComponentResolver().In(ref slowdowncomponentresolver);					return PackComponentToContainer(component, SlowdownComponentData);				case 1640309440:					var healabilitycomponentresolver = component as HealAbilityComponent;					var HealAbilityComponentData = new HealAbilityComponentResolver().In(ref healabilitycomponentresolver);					return PackComponentToContainer(component, HealAbilityComponentData);				case -982956555:					var collisionscomponentresolver = component as CollisionsComponent;					var CollisionsComponentData = new CollisionsComponentResolver().In(ref collisionscomponentresolver);					return PackComponentToContainer(component, CollisionsComponentData);				case 1718416741:					var visualinactiontagcomponentresolver = component as VisualInActionTagComponent;					var VisualInActionTagComponentData = new VisualInActionTagComponentResolver().In(ref visualinactiontagcomponentresolver);					return PackComponentToContainer(component, VisualInActionTagComponentData);				case 1672267938:					var maincharactertagcomponentresolver = component as MainCharacterTagComponent;					var MainCharacterTagComponentData = new MainCharacterTagComponentResolver().In(ref maincharactertagcomponentresolver);					return PackComponentToContainer(component, MainCharacterTagComponentData);				case -1740624067:					var choosingpushdirectionsphereabilitycomponentresolver = component as ChoosingPushDirectionSphereAbilityComponent;					var ChoosingPushDirectionSphereAbilityComponentData = new ChoosingPushDirectionSphereAbilityComponentResolver().In(ref choosingpushdirectionsphereabilitycomponentresolver);					return PackComponentToContainer(component, ChoosingPushDirectionSphereAbilityComponentData);				case -1144719428:					var maincanvastagcomponentresolver = component as MainCanvasTagComponent;					var MainCanvasTagComponentData = new MainCanvasTagComponentResolver().In(ref maincanvastagcomponentresolver);					return PackComponentToContainer(component, MainCanvasTagComponentData);				case -1191206187:					var additionalcanvastagcomponentresolver = component as AdditionalCanvasTagComponent;					var AdditionalCanvasTagComponentData = new AdditionalCanvasTagComponentResolver().In(ref additionalcanvastagcomponentresolver);					return PackComponentToContainer(component, AdditionalCanvasTagComponentData);				case -1325613894:					var checktwocomponentresolver = component as CheckTwoComponent;					var CheckTwoComponentData = new CheckTwoComponentResolver().In(ref checktwocomponentresolver);					return PackComponentToContainer(component, CheckTwoComponentData);				case -803245354:					var actorprovidercomponentresolver = component as ActorProviderComponent;					var ActorProviderComponentData = new ActorProviderComponentResolver().In(ref actorprovidercomponentresolver);					return PackComponentToContainer(component, ActorProviderComponentData);				case 1143262242:					var untilsuccessstrategynodecomponentresolver = component as UntilSuccessStrategyNodeComponent;					var UntilSuccessStrategyNodeComponentData = new UntilSuccessStrategyNodeComponentResolver().In(ref untilsuccessstrategynodecomponentresolver);					return PackComponentToContainer(component, UntilSuccessStrategyNodeComponentData);				case -1006438290:					var speedupspherecomponentresolver = component as SpeedUpSphereComponent;					var SpeedUpSphereComponentData = new SpeedUpSphereComponentResolver().In(ref speedupspherecomponentresolver);					return PackComponentToContainer(component, SpeedUpSphereComponentData);				case -1981611680:					var pegasusmovementcomponentresolver = component as PegasusMovementComponent;					var PegasusMovementComponentData = new PegasusMovementComponentResolver().In(ref pegasusmovementcomponentresolver);					return PackComponentToContainer(component, PegasusMovementComponentData);				case 1354058828:					var poolabletagcomponentresolver = component as PoolableTagComponent;					var PoolableTagComponentData = new PoolableTagComponentResolver().In(ref poolabletagcomponentresolver);					return PackComponentToContainer(component, PoolableTagComponentData);				case -668621305:					var cachedentitiesglobalholdercomponentresolver = component as CachedEntitiesGlobalHolderComponent;					var CachedEntitiesGlobalHolderComponentData = new CachedEntitiesGlobalHolderComponentResolver().In(ref cachedentitiesglobalholdercomponentresolver);					return PackComponentToContainer(component, CachedEntitiesGlobalHolderComponentData);				case 1878456296:					var abilitypredicatecomponentresolver = component as AbilityPredicateComponent;					var AbilityPredicateComponentData = new AbilityPredicateComponentResolver().In(ref abilitypredicatecomponentresolver);					return PackComponentToContainer(component, AbilityPredicateComponentData);				case -1431715806:					var targetpositioncomponentresolver = component as TargetPositionComponent;					var TargetPositionComponentData = new TargetPositionComponentResolver().In(ref targetpositioncomponentresolver);					return PackComponentToContainer(component, TargetPositionComponentData);				case -619720211:					var spherecomponentresolver = component as SphereComponent;					var SphereComponentData = new SphereComponentResolver().In(ref spherecomponentresolver);					return PackComponentToContainer(component, SphereComponentData);				case 1534411424:					var playerlevelcomponentresolver = component as PlayerLevelComponent;					var PlayerLevelComponentData = new PlayerLevelComponentResolver().In(ref playerlevelcomponentresolver);					return PackComponentToContainer(component, PlayerLevelComponentData);				case 929129980:					var iconcomponentresolver = component as IconComponent;					var IconComponentData = new IconComponentResolver().In(ref iconcomponentresolver);					return PackComponentToContainer(component, IconComponentData);				case -2124047058:					var uitagcomponentresolver = component as UITagComponent;					var UITagComponentData = new UITagComponentResolver().In(ref uitagcomponentresolver);					return PackComponentToContainer(component, UITagComponentData);				case -1422875746:					var sticktagcomponentresolver = component as StickTagComponent;					var StickTagComponentData = new StickTagComponentResolver().In(ref sticktagcomponentresolver);					return PackComponentToContainer(component, StickTagComponentData);				case -1965185654:					var scenarioanimationcomponentresolver = component as ScenarioAnimationComponent;					var ScenarioAnimationComponentData = new ScenarioAnimationComponentResolver().In(ref scenarioanimationcomponentresolver);					return PackComponentToContainer(component, ScenarioAnimationComponentData);				case -1056876887:					var spawnpointcomponentresolver = component as SpawnPointComponent;					var SpawnPointComponentData = new SpawnPointComponentResolver().In(ref spawnpointcomponentresolver);					return PackComponentToContainer(component, SpawnPointComponentData);				case -2117687604:					var overrideanimatorcomponentresolver = component as OverrideAnimatorComponent;					var OverrideAnimatorComponentData = new OverrideAnimatorComponentResolver().In(ref overrideanimatorcomponentresolver);					return PackComponentToContainer(component, OverrideAnimatorComponentData);				case 819793506:					var stateinfocomponentresolver = component as StateInfoComponent;					var StateInfoComponentData = new StateInfoComponentResolver().In(ref stateinfocomponentresolver);					return PackComponentToContainer(component, StateInfoComponentData);				case 838666118:					var gamestatecomponentresolver = component as GameStateComponent;					var GameStateComponentData = new GameStateComponentResolver().In(ref gamestatecomponentresolver);					return PackComponentToContainer(component, GameStateComponentData);				case 1656499746:					var viewreferencegameobjectcomponentresolver = component as ViewReferenceGameObjectComponent;					var ViewReferenceGameObjectComponentData = new ViewReferenceGameObjectComponentResolver().In(ref viewreferencegameobjectcomponentresolver);					return PackComponentToContainer(component, ViewReferenceGameObjectComponentData);				case 42315994:					var viewdestructiondelayedcomponentresolver = component as ViewDestructionDelayedComponent;					var ViewDestructionDelayedComponentData = new ViewDestructionDelayedComponentResolver().In(ref viewdestructiondelayedcomponentresolver);					return PackComponentToContainer(component, ViewDestructionDelayedComponentData);				case -2094772963:					var uipriorityindexcomponentresolver = component as UIPriorityIndexComponent;					var UIPriorityIndexComponentData = new UIPriorityIndexComponentResolver().In(ref uipriorityindexcomponentresolver);					return PackComponentToContainer(component, UIPriorityIndexComponentData);				case -1162002111:					var uigrouptagcomponentresolver = component as UIGroupTagComponent;					var UIGroupTagComponentData = new UIGroupTagComponentResolver().In(ref uigrouptagcomponentresolver);					return PackComponentToContainer(component, UIGroupTagComponentData);				case 265593849:					var timeprovidercomponentresolver = component as TimeProviderComponent;					var TimeProviderComponentData = new TimeProviderComponentResolver().In(ref timeprovidercomponentresolver);					return PackComponentToContainer(component, TimeProviderComponentData);				case -1713719609:					var testserializationcomponentresolver = component as TestSerializationComponent;					var TestSerializationComponentData = new TestSerializationComponentResolver().In(ref testserializationcomponentresolver);					return PackComponentToContainer(component, TestSerializationComponentData);				case -142928435:					var actorcontaineridresolver = component as ActorContainerID;					var ActorContainerIDData = new ActorContainerIDResolver().In(ref actorcontaineridresolver);					return PackComponentToContainer(component, ActorContainerIDData);				case 745147359:					var timescalecomponentresolver = component as TimeScaleComponent;					var TimeScaleComponentData = new TimeScaleComponentResolver().In(ref timescalecomponentresolver);					return PackComponentToContainer(component, TimeScaleComponentData);				case 208510666:					var scenesholdercomponentresolver = component as ScenesHolderComponent;					var ScenesHolderComponentData = new ScenesHolderComponentResolver().In(ref scenesholdercomponentresolver);					return PackComponentToContainer(component, ScenesHolderComponentData);				case -1675925374:					var explodespheresabilitycomponentresolver = component as ExplodeSpheresAbilityComponent;					var ExplodeSpheresAbilityComponentData = new ExplodeSpheresAbilityComponentResolver().In(ref explodespheresabilitycomponentresolver);					return PackComponentToContainer(component, ExplodeSpheresAbilityComponentData);				case 1782176358:					var setupafterviewtagcomponentresolver = component as SetupAfterViewTagComponent;					var SetupAfterViewTagComponentData = new SetupAfterViewTagComponentResolver().In(ref setupafterviewtagcomponentresolver);					return PackComponentToContainer(component, SetupAfterViewTagComponentData);				case 2041590961:					var abilitiesholdercomponentresolver = component as AbilitiesHolderComponent;					var AbilitiesHolderComponentData = new AbilitiesHolderComponentResolver().In(ref abilitiesholdercomponentresolver);					return PackComponentToContainer(component, AbilitiesHolderComponentData);				case -1150856501:					var abilitytagcomponentresolver = component as AbilityTagComponent;					var AbilityTagComponentData = new AbilityTagComponentResolver().In(ref abilitytagcomponentresolver);					return PackComponentToContainer(component, AbilityTagComponentData);				case -952149029:					var aistrategycomponentresolver = component as AIStrategyComponent;					var AIStrategyComponentData = new AIStrategyComponentResolver().In(ref aistrategycomponentresolver);					return PackComponentToContainer(component, AIStrategyComponentData);				case -1167233499:					var maincameracomponentresolver = component as MainCameraComponent;					var MainCameraComponentData = new MainCameraComponentResolver().In(ref maincameracomponentresolver);					return PackComponentToContainer(component, MainCameraComponentData);				case -575221824:					var radiuscomponentresolver = component as RadiusComponent;					var RadiusComponentData = new RadiusComponentResolver().In(ref radiuscomponentresolver);					return PackComponentToContainer(component, RadiusComponentData);				case 1046176786:					var animationcheckoutsholdercomponentresolver = component as AnimationCheckOutsHolderComponent;					var AnimationCheckOutsHolderComponentData = new AnimationCheckOutsHolderComponentResolver().In(ref animationcheckoutsholdercomponentresolver);					return PackComponentToContainer(component, AnimationCheckOutsHolderComponentData);				case 680066094:					var isdeadtagcomponentresolver = component as IsDeadTagComponent;					var IsDeadTagComponentData = new IsDeadTagComponentResolver().In(ref isdeadtagcomponentresolver);					return PackComponentToContainer(component, IsDeadTagComponentData);				case 1960044224:					var cardsglobalholdercomponentresolver = component as CardsGlobalHolderComponent;					var CardsGlobalHolderComponentData = new CardsGlobalHolderComponentResolver().In(ref cardsglobalholdercomponentresolver);					return PackComponentToContainer(component, CardsGlobalHolderComponentData);				case -1548506885:					var softcurrencyrewardvisualconfigcomponentresolver = component as SoftCurrencyRewardVisualConfigComponent;					var SoftCurrencyRewardVisualConfigComponentData = new SoftCurrencyRewardVisualConfigComponentResolver().In(ref softcurrencyrewardvisualconfigcomponentresolver);					return PackComponentToContainer(component, SoftCurrencyRewardVisualConfigComponentData);				case 760610747:					var playertagcomponentresolver = component as PlayerTagComponent;					var PlayerTagComponentData = new PlayerTagComponentResolver().In(ref playertagcomponentresolver);					return PackComponentToContainer(component, PlayerTagComponentData);				case -1330009829:					var testinitcomponentresolver = component as TestInitComponent;					var TestInitComponentData = new TestInitComponentResolver().In(ref testinitcomponentresolver);					return PackComponentToContainer(component, TestInitComponentData);				case -1425063609:					var unitytransformcomponentresolver = component as UnityTransformComponent;					var UnityTransformComponentData = new UnityTransformComponentResolver().In(ref unitytransformcomponentresolver);					return PackComponentToContainer(component, UnityTransformComponentData);				case -1206519595:					var unityrecttransformcomponentresolver = component as UnityRectTransformComponent;					var UnityRectTransformComponentData = new UnityRectTransformComponentResolver().In(ref unityrecttransformcomponentresolver);					return PackComponentToContainer(component, UnityRectTransformComponentData);				case 1908410989:					var uiviewreferencecomponentresolver = component as UIViewReferenceComponent;					var UIViewReferenceComponentData = new UIViewReferenceComponentResolver().In(ref uiviewreferencecomponentresolver);					return PackComponentToContainer(component, UIViewReferenceComponentData);				case 888932549:					var transformcomponentresolver = component as TransformComponent;					var TransformComponentData = new TransformComponentResolver().In(ref transformcomponentresolver);					return PackComponentToContainer(component, TransformComponentData);				case -1535532641:					var poolableviewsprovidercomponentresolver = component as PoolableViewsProviderComponent;					var PoolableViewsProviderComponentData = new PoolableViewsProviderComponentResolver().In(ref poolableviewsprovidercomponentresolver);					return PackComponentToContainer(component, PoolableViewsProviderComponentData);				case 290577522:					var onapplicationquittagcomponentresolver = component as OnApplicationQuitTagComponent;					var OnApplicationQuitTagComponentData = new OnApplicationQuitTagComponentResolver().In(ref onapplicationquittagcomponentresolver);					return PackComponentToContainer(component, OnApplicationQuitTagComponentData);				case 1908646573:					var networkentitytagcomponentresolver = component as NetworkEntityTagComponent;					var NetworkEntityTagComponentData = new NetworkEntityTagComponentResolver().In(ref networkentitytagcomponentresolver);					return PackComponentToContainer(component, NetworkEntityTagComponentData);				case 1004631539:					var itemtagcomponentresolver = component as ItemTagComponent;					var ItemTagComponentData = new ItemTagComponentResolver().In(ref itemtagcomponentresolver);					return PackComponentToContainer(component, ItemTagComponentData);				case 1776997060:					var inputlistenertagcomponentresolver = component as InputListenerTagComponent;					var InputListenerTagComponentData = new InputListenerTagComponentResolver().In(ref inputlistenertagcomponentresolver);					return PackComponentToContainer(component, InputListenerTagComponentData);				case -669669709:					var strategysideexecutecomponentresolver = component as StrategySideExecuteComponent;					var StrategySideExecuteComponentData = new StrategySideExecuteComponentResolver().In(ref strategysideexecutecomponentresolver);					return PackComponentToContainer(component, StrategySideExecuteComponentData);				case -988064901:					var appversioncomponentresolver = component as AppVersionComponent;					var AppVersionComponentData = new AppVersionComponentResolver().In(ref appversioncomponentresolver);					return PackComponentToContainer(component, AppVersionComponentData);				case 1487202547:					var speeddependsontimescalecomponentresolver = component as SpeedDependsOnTimeScaleComponent;					var SpeedDependsOnTimeScaleComponentData = new SpeedDependsOnTimeScaleComponentResolver().In(ref speeddependsontimescalecomponentresolver);					return PackComponentToContainer(component, SpeedDependsOnTimeScaleComponentData);				case 755826610:					var centertagcomponentresolver = component as CenterTagComponent;					var CenterTagComponentData = new CenterTagComponentResolver().In(ref centertagcomponentresolver);					return PackComponentToContainer(component, CenterTagComponentData);				case 1005024681:					var cardtagcomponentresolver = component as CardTagComponent;					var CardTagComponentData = new CardTagComponentResolver().In(ref cardtagcomponentresolver);					return PackComponentToContainer(component, CardTagComponentData);				case 7120005:					var viewreadytagcomponentresolver = component as ViewReadyTagComponent;					var ViewReadyTagComponentData = new ViewReadyTagComponentResolver().In(ref viewreadytagcomponentresolver);					return PackComponentToContainer(component, ViewReadyTagComponentData);				case -1299131970:					var spherecastcontextresolver = component as SphereCastContext;					var SphereCastContextData = new SphereCastContextResolver().In(ref spherecastcontextresolver);					return PackComponentToContainer(component, SphereCastContextData);				case 760681168:					var statedatacomponentresolver = component as StateDataComponent;					var StateDataComponentData = new StateDataComponentResolver().In(ref statedatacomponentresolver);					return PackComponentToContainer(component, StateDataComponentData);				case -1167076999:					var initonaddabilitytagcomponentresolver = component as InitOnAddAbilityTagComponent;					var InitOnAddAbilityTagComponentData = new InitOnAddAbilityTagComponentResolver().In(ref initonaddabilitytagcomponentresolver);					return PackComponentToContainer(component, InitOnAddAbilityTagComponentData);				case 274782965:					var additionalabilityindexcomponentresolver = component as AdditionalAbilityIndexComponent;					var AdditionalAbilityIndexComponentData = new AdditionalAbilityIndexComponentResolver().In(ref additionalabilityindexcomponentresolver);					return PackComponentToContainer(component, AdditionalAbilityIndexComponentData);				case 117603503:					var navmeshagentcomponentresolver = component as NavMeshAgentComponent;					var NavMeshAgentComponentData = new NavMeshAgentComponentResolver().In(ref navmeshagentcomponentresolver);					return PackComponentToContainer(component, NavMeshAgentComponentData);				case 369850288:					var inputactionscomponentresolver = component as InputActionsComponent;					var InputActionsComponentData = new InputActionsComponentResolver().In(ref inputactionscomponentresolver);					return PackComponentToContainer(component, InputActionsComponentData);				case -996906941:					var ignorereferencecontainertagcomponentresolver = component as IgnoreReferenceContainerTagComponent;					var IgnoreReferenceContainerTagComponentData = new IgnoreReferenceContainerTagComponentResolver().In(ref ignorereferencecontainertagcomponentresolver);					return PackComponentToContainer(component, IgnoreReferenceContainerTagComponentData);				case -100950956:					var gamelogictagcomponentresolver = component as GameLogicTagComponent;					var GameLogicTagComponentData = new GameLogicTagComponentResolver().In(ref gamelogictagcomponentresolver);					return PackComponentToContainer(component, GameLogicTagComponentData);				case -1378915465:					var cachecountervaluescomponentresolver = component as CacheCounterValuesComponent;					var CacheCounterValuesComponentData = new CacheCounterValuesComponentResolver().In(ref cachecountervaluescomponentresolver);					return PackComponentToContainer(component, CacheCounterValuesComponentData);				case -822435144:					var levelmodifierholdercomponentresolver = component as LevelModifierHolderComponent;					var LevelModifierHolderComponentData = new LevelModifierHolderComponentResolver().In(ref levelmodifierholdercomponentresolver);					return PackComponentToContainer(component, LevelModifierHolderComponentData);				case -146694774:					var showhpbartagcomponentresolver = component as ShowHpBarTagComponent;					var ShowHpBarTagComponentData = new ShowHpBarTagComponentResolver().In(ref showhpbartagcomponentresolver);					return PackComponentToContainer(component, ShowHpBarTagComponentData);				case 1310216023:					var customhpbarcomponentresolver = component as CustomHpBarComponent;					var CustomHpBarComponentData = new CustomHpBarComponentResolver().In(ref customhpbarcomponentresolver);					return PackComponentToContainer(component, CustomHpBarComponentData);				case 2044779682:					var charactersholdercomponentresolver = component as CharactersHolderComponent;					var CharactersHolderComponentData = new CharactersHolderComponentResolver().In(ref charactersholdercomponentresolver);					return PackComponentToContainer(component, CharactersHolderComponentData);				case 766574714:					var uibusytagcomponentresolver = component as UIBusyTagComponent;					var UIBusyTagComponentData = new UIBusyTagComponentResolver().In(ref uibusytagcomponentresolver);					return PackComponentToContainer(component, UIBusyTagComponentData);				case 1989536467:					var overlapspherecastcontextresolver = component as OverlapSphereCastContext;					var OverlapSphereCastContextData = new OverlapSphereCastContextResolver().In(ref overlapspherecastcontextresolver);					return PackComponentToContainer(component, OverlapSphereCastContextData);				case 387690372:					var statecontextcomponentresolver = component as StateContextComponent;					var StateContextComponentData = new StateContextComponentResolver().In(ref statecontextcomponentresolver);					return PackComponentToContainer(component, StateContextComponentData);				case 369067176:					var savepositioncomponentresolver = component as SavePositionComponent;					var SavePositionComponentData = new SavePositionComponentResolver().In(ref savepositioncomponentresolver);					return PackComponentToContainer(component, SavePositionComponentData);				case -791405757:					var pushdirectioncomponentresolver = component as PushDirectionComponent;					var PushDirectionComponentData = new PushDirectionComponentResolver().In(ref pushdirectioncomponentresolver);					return PackComponentToContainer(component, PushDirectionComponentData);				case -942979946:					var actionsholdercomponentresolver = component as ActionsHolderComponent;					var ActionsHolderComponentData = new ActionsHolderComponentResolver().In(ref actionsholdercomponentresolver);					return PackComponentToContainer(component, ActionsHolderComponentData);				case 2058998768:					var softcurrencycountermonocomponentprovidercomponentresolver = component as SoftCurrencyCounterMonoComponentProviderComponent;					var SoftCurrencyCounterMonoComponentProviderComponentData = new SoftCurrencyCounterMonoComponentProviderComponentResolver().In(ref softcurrencycountermonocomponentprovidercomponentresolver);					return PackComponentToContainer(component, SoftCurrencyCounterMonoComponentProviderComponentData);				case -1908323267:					var rigidbodyprovidercomponentresolver = component as RigidbodyProviderComponent;					var RigidbodyProviderComponentData = new RigidbodyProviderComponentResolver().In(ref rigidbodyprovidercomponentresolver);					return PackComponentToContainer(component, RigidbodyProviderComponentData);				case -575427163:					var actionswithpredicateholdercomponentresolver = component as ActionsWithPredicateHolderComponent;					var ActionsWithPredicateHolderComponentData = new ActionsWithPredicateHolderComponentResolver().In(ref actionswithpredicateholdercomponentresolver);					return PackComponentToContainer(component, ActionsWithPredicateHolderComponentData);				case -2019244546:					var softvaluecountercomponentresolver = component as SoftValueCounterComponent;					var SoftValueCounterComponentData = new SoftValueCounterComponentResolver().In(ref softvaluecountercomponentresolver);					return PackComponentToContainer(component, SoftValueCounterComponentData);				case -1252231869:					var energyregenerationcomponentresolver = component as EnergyRegenerationComponent;					var EnergyRegenerationComponentData = new EnergyRegenerationComponentResolver().In(ref energyregenerationcomponentresolver);					return PackComponentToContainer(component, EnergyRegenerationComponentData);				case -589508998:					var healthcomponentresolver = component as HealthComponent;					var HealthComponentData = new HealthComponentResolver().In(ref healthcomponentresolver);					return PackComponentToContainer(component, HealthComponentData);				case -1284981806:					var cooldowncomponentresolver = component as CooldownComponent;					var CooldownComponentData = new CooldownComponentResolver().In(ref cooldowncomponentresolver);					return PackComponentToContainer(component, CooldownComponentData);				case -2145542698:					var speedcomponentresolver = component as SpeedComponent;					var SpeedComponentData = new SpeedComponentResolver().In(ref speedcomponentresolver);					return PackComponentToContainer(component, SpeedComponentData);				case -571092005:					var energycomponentresolver = component as EnergyComponent;					var EnergyComponentData = new EnergyComponentResolver().In(ref energycomponentresolver);					return PackComponentToContainer(component, EnergyComponentData);				case 956328563:					var testcomponentresolver = component as TestComponent;					var TestComponentData = new TestComponentResolver().In(ref testcomponentresolver);					return PackComponentToContainer(component, TestComponentData);				case 2004170910:					var testworldsinglecomponentresolver = component as TestWorldSingleComponent;					var TestWorldSingleComponentData = new TestWorldSingleComponentResolver().In(ref testworldsinglecomponentresolver);					return PackComponentToContainer(component, TestWorldSingleComponentData);				case -623718192:					var damagecomponentresolver = component as DamageComponent;					var DamageComponentData = new DamageComponentResolver().In(ref damagecomponentresolver);					return PackComponentToContainer(component, DamageComponentData);			}			return default;		}		private void ProcessComponents(ref ResolverDataContainer dataContainerForResolving, int worldIndex)		{			switch (dataContainerForResolving.TypeHashCode)			{				case -950198728:					var AnimatorStateComponentresolver = MessagePackSerializer.Deserialize<AnimatorStateComponentResolver>(dataContainerForResolving.Data);					if (EntityManager.TryGetEntityByID(dataContainerForResolving.EntityGuid, out var entityOfAnimatorStateComponent))					{						var AnimatorStateComponentcomponent = entityOfAnimatorStateComponent.GetOrAddComponent<AnimatorStateComponent>();						AnimatorStateComponentresolver.Out(ref AnimatorStateComponentcomponent);					}					break;				case -1874747970:					var VisualFXHolderComponentresolver = MessagePackSerializer.Deserialize<VisualFXHolderComponentResolver>(dataContainerForResolving.Data);					if (EntityManager.TryGetEntityByID(dataContainerForResolving.EntityGuid, out var entityOfVisualFXHolderComponent))					{						var VisualFXHolderComponentcomponent = entityOfVisualFXHolderComponent.GetOrAddComponent<VisualFXHolderComponent>();						VisualFXHolderComponentresolver.Out(ref VisualFXHolderComponentcomponent);					}					break;				case -1856633313:					var PassiveAbilityTagresolver = MessagePackSerializer.Deserialize<PassiveAbilityTagResolver>(dataContainerForResolving.Data);					if (EntityManager.TryGetEntityByID(dataContainerForResolving.EntityGuid, out var entityOfPassiveAbilityTag))					{						var PassiveAbilityTagcomponent = entityOfPassiveAbilityTag.GetOrAddComponent<PassiveAbilityTag>();						PassiveAbilityTagresolver.Out(ref PassiveAbilityTagcomponent);					}					break;				case 815927063:					var TestReactComponentresolver = MessagePackSerializer.Deserialize<TestReactComponentResolver>(dataContainerForResolving.Data);					if (EntityManager.TryGetEntityByID(dataContainerForResolving.EntityGuid, out var entityOfTestReactComponent))					{						var TestReactComponentcomponent = entityOfTestReactComponent.GetOrAddComponent<TestReactComponent>();						TestReactComponentresolver.Out(ref TestReactComponentcomponent);					}					break;				case 1587816967:					var SoundVolumeComponentresolver = MessagePackSerializer.Deserialize<SoundVolumeComponentResolver>(dataContainerForResolving.Data);					if (EntityManager.TryGetEntityByID(dataContainerForResolving.EntityGuid, out var entityOfSoundVolumeComponent))					{						var SoundVolumeComponentcomponent = entityOfSoundVolumeComponent.GetOrAddComponent<SoundVolumeComponent>();						SoundVolumeComponentresolver.Out(ref SoundVolumeComponentcomponent);					}					break;				case -1064941338:					var PredicatesComponentresolver = MessagePackSerializer.Deserialize<PredicatesComponentResolver>(dataContainerForResolving.Data);					if (EntityManager.TryGetEntityByID(dataContainerForResolving.EntityGuid, out var entityOfPredicatesComponent))					{						var PredicatesComponentcomponent = entityOfPredicatesComponent.GetOrAddComponent<PredicatesComponent>();						PredicatesComponentresolver.Out(ref PredicatesComponentcomponent);					}					break;				case 1204197613:					var InputOverUIComponentresolver = MessagePackSerializer.Deserialize<InputOverUIComponentResolver>(dataContainerForResolving.Data);					if (EntityManager.TryGetEntityByID(dataContainerForResolving.EntityGuid, out var entityOfInputOverUIComponent))					{						var InputOverUIComponentcomponent = entityOfInputOverUIComponent.GetOrAddComponent<InputOverUIComponent>();						InputOverUIComponentresolver.Out(ref InputOverUIComponentcomponent);					}					break;				case -88497250:					var AfterLifeTagComponentresolver = MessagePackSerializer.Deserialize<AfterLifeTagComponentResolver>(dataContainerForResolving.Data);					if (EntityManager.TryGetEntityByID(dataContainerForResolving.EntityGuid, out var entityOfAfterLifeTagComponent))					{						var AfterLifeTagComponentcomponent = entityOfAfterLifeTagComponent.GetOrAddComponent<AfterLifeTagComponent>();						AfterLifeTagComponentresolver.Out(ref AfterLifeTagComponentcomponent);					}					break;				case 53484848:					var AfterLifeCompleteTagComponentresolver = MessagePackSerializer.Deserialize<AfterLifeCompleteTagComponentResolver>(dataContainerForResolving.Data);					if (EntityManager.TryGetEntityByID(dataContainerForResolving.EntityGuid, out var entityOfAfterLifeCompleteTagComponent))					{						var AfterLifeCompleteTagComponentcomponent = entityOfAfterLifeCompleteTagComponent.GetOrAddComponent<AfterLifeCompleteTagComponent>();						AfterLifeCompleteTagComponentresolver.Out(ref AfterLifeCompleteTagComponentcomponent);					}					break;				case -803643700:					var UpgradeWindowComponentresolver = MessagePackSerializer.Deserialize<UpgradeWindowComponentResolver>(dataContainerForResolving.Data);					if (EntityManager.TryGetEntityByID(dataContainerForResolving.EntityGuid, out var entityOfUpgradeWindowComponent))					{						var UpgradeWindowComponentcomponent = entityOfUpgradeWindowComponent.GetOrAddComponent<UpgradeWindowComponent>();						UpgradeWindowComponentresolver.Out(ref UpgradeWindowComponentcomponent);					}					break;				case -1416715012:					var EnemyTagComponentresolver = MessagePackSerializer.Deserialize<EnemyTagComponentResolver>(dataContainerForResolving.Data);					if (EntityManager.TryGetEntityByID(dataContainerForResolving.EntityGuid, out var entityOfEnemyTagComponent))					{						var EnemyTagComponentcomponent = entityOfEnemyTagComponent.GetOrAddComponent<EnemyTagComponent>();						EnemyTagComponentresolver.Out(ref EnemyTagComponentcomponent);					}					break;				case 407906688:					var SpheresControllerTagComponentresolver = MessagePackSerializer.Deserialize<SpheresControllerTagComponentResolver>(dataContainerForResolving.Data);					if (EntityManager.TryGetEntityByID(dataContainerForResolving.EntityGuid, out var entityOfSpheresControllerTagComponent))					{						var SpheresControllerTagComponentcomponent = entityOfSpheresControllerTagComponent.GetOrAddComponent<SpheresControllerTagComponent>();						SpheresControllerTagComponentresolver.Out(ref SpheresControllerTagComponentcomponent);					}					break;				case 1922359605:					var HealthBarsManagerComponentresolver = MessagePackSerializer.Deserialize<HealthBarsManagerComponentResolver>(dataContainerForResolving.Data);					if (EntityManager.TryGetEntityByID(dataContainerForResolving.EntityGuid, out var entityOfHealthBarsManagerComponent))					{						var HealthBarsManagerComponentcomponent = entityOfHealthBarsManagerComponent.GetOrAddComponent<HealthBarsManagerComponent>();						HealthBarsManagerComponentresolver.Out(ref HealthBarsManagerComponentcomponent);					}					break;				case -1002177873:					var PlayerUpgradeComponentresolver = MessagePackSerializer.Deserialize<PlayerUpgradeComponentResolver>(dataContainerForResolving.Data);					if (EntityManager.TryGetEntityByID(dataContainerForResolving.EntityGuid, out var entityOfPlayerUpgradeComponent))					{						var PlayerUpgradeComponentcomponent = entityOfPlayerUpgradeComponent.GetOrAddComponent<PlayerUpgradeComponent>();						PlayerUpgradeComponentresolver.Out(ref PlayerUpgradeComponentcomponent);					}					break;				case -1176016825:					var InvincibleComponentresolver = MessagePackSerializer.Deserialize<InvincibleComponentResolver>(dataContainerForResolving.Data);					if (EntityManager.TryGetEntityByID(dataContainerForResolving.EntityGuid, out var entityOfInvincibleComponent))					{						var InvincibleComponentcomponent = entityOfInvincibleComponent.GetOrAddComponent<InvincibleComponent>();						InvincibleComponentresolver.Out(ref InvincibleComponentcomponent);					}					break;				case 867896372:					var WaitStateComponentresolver = MessagePackSerializer.Deserialize<WaitStateComponentResolver>(dataContainerForResolving.Data);					if (EntityManager.TryGetEntityByID(dataContainerForResolving.EntityGuid, out var entityOfWaitStateComponent))					{						var WaitStateComponentcomponent = entityOfWaitStateComponent.GetOrAddComponent<WaitStateComponent>();						WaitStateComponentresolver.Out(ref WaitStateComponentcomponent);					}					break;				case -1029564515:					var ViewReferenceComponentresolver = MessagePackSerializer.Deserialize<ViewReferenceComponentResolver>(dataContainerForResolving.Data);					if (EntityManager.TryGetEntityByID(dataContainerForResolving.EntityGuid, out var entityOfViewReferenceComponent))					{						var ViewReferenceComponentcomponent = entityOfViewReferenceComponent.GetOrAddComponent<ViewReferenceComponent>();						ViewReferenceComponentresolver.Out(ref ViewReferenceComponentcomponent);					}					break;				case -1627736277:					var CountersHolderComponentresolver = MessagePackSerializer.Deserialize<CountersHolderComponentResolver>(dataContainerForResolving.Data);					if (EntityManager.TryGetEntityByID(dataContainerForResolving.EntityGuid, out var entityOfCountersHolderComponent))					{						var CountersHolderComponentcomponent = entityOfCountersHolderComponent.GetOrAddComponent<CountersHolderComponent>();						CountersHolderComponentresolver.Out(ref CountersHolderComponentcomponent);					}					break;				case 313621202:					var AbilityOwnerComponentresolver = MessagePackSerializer.Deserialize<AbilityOwnerComponentResolver>(dataContainerForResolving.Data);					if (EntityManager.TryGetEntityByID(dataContainerForResolving.EntityGuid, out var entityOfAbilityOwnerComponent))					{						var AbilityOwnerComponentcomponent = entityOfAbilityOwnerComponent.GetOrAddComponent<AbilityOwnerComponent>();						AbilityOwnerComponentresolver.Out(ref AbilityOwnerComponentcomponent);					}					break;				case 671481967:					var NeedHpBarComponentresolver = MessagePackSerializer.Deserialize<NeedHpBarComponentResolver>(dataContainerForResolving.Data);					if (EntityManager.TryGetEntityByID(dataContainerForResolving.EntityGuid, out var entityOfNeedHpBarComponent))					{						var NeedHpBarComponentcomponent = entityOfNeedHpBarComponent.GetOrAddComponent<NeedHpBarComponent>();						NeedHpBarComponentresolver.Out(ref NeedHpBarComponentcomponent);					}					break;				case 203333459:					var LevelsHolderComponentresolver = MessagePackSerializer.Deserialize<LevelsHolderComponentResolver>(dataContainerForResolving.Data);					if (EntityManager.TryGetEntityByID(dataContainerForResolving.EntityGuid, out var entityOfLevelsHolderComponent))					{						var LevelsHolderComponentcomponent = entityOfLevelsHolderComponent.GetOrAddComponent<LevelsHolderComponent>();						LevelsHolderComponentresolver.Out(ref LevelsHolderComponentcomponent);					}					break;				case -1258897312:					var SlowdownComponentresolver = MessagePackSerializer.Deserialize<SlowdownComponentResolver>(dataContainerForResolving.Data);					if (EntityManager.TryGetEntityByID(dataContainerForResolving.EntityGuid, out var entityOfSlowdownComponent))					{						var SlowdownComponentcomponent = entityOfSlowdownComponent.GetOrAddComponent<SlowdownComponent>();						SlowdownComponentresolver.Out(ref SlowdownComponentcomponent);					}					break;				case 1640309440:					var HealAbilityComponentresolver = MessagePackSerializer.Deserialize<HealAbilityComponentResolver>(dataContainerForResolving.Data);					if (EntityManager.TryGetEntityByID(dataContainerForResolving.EntityGuid, out var entityOfHealAbilityComponent))					{						var HealAbilityComponentcomponent = entityOfHealAbilityComponent.GetOrAddComponent<HealAbilityComponent>();						HealAbilityComponentresolver.Out(ref HealAbilityComponentcomponent);					}					break;				case -982956555:					var CollisionsComponentresolver = MessagePackSerializer.Deserialize<CollisionsComponentResolver>(dataContainerForResolving.Data);					if (EntityManager.TryGetEntityByID(dataContainerForResolving.EntityGuid, out var entityOfCollisionsComponent))					{						var CollisionsComponentcomponent = entityOfCollisionsComponent.GetOrAddComponent<CollisionsComponent>();						CollisionsComponentresolver.Out(ref CollisionsComponentcomponent);					}					break;				case 1718416741:					var VisualInActionTagComponentresolver = MessagePackSerializer.Deserialize<VisualInActionTagComponentResolver>(dataContainerForResolving.Data);					if (EntityManager.TryGetEntityByID(dataContainerForResolving.EntityGuid, out var entityOfVisualInActionTagComponent))					{						var VisualInActionTagComponentcomponent = entityOfVisualInActionTagComponent.GetOrAddComponent<VisualInActionTagComponent>();						VisualInActionTagComponentresolver.Out(ref VisualInActionTagComponentcomponent);					}					break;				case 1672267938:					var MainCharacterTagComponentresolver = MessagePackSerializer.Deserialize<MainCharacterTagComponentResolver>(dataContainerForResolving.Data);					if (EntityManager.TryGetEntityByID(dataContainerForResolving.EntityGuid, out var entityOfMainCharacterTagComponent))					{						var MainCharacterTagComponentcomponent = entityOfMainCharacterTagComponent.GetOrAddComponent<MainCharacterTagComponent>();						MainCharacterTagComponentresolver.Out(ref MainCharacterTagComponentcomponent);					}					break;				case -1740624067:					var ChoosingPushDirectionSphereAbilityComponentresolver = MessagePackSerializer.Deserialize<ChoosingPushDirectionSphereAbilityComponentResolver>(dataContainerForResolving.Data);					if (EntityManager.TryGetEntityByID(dataContainerForResolving.EntityGuid, out var entityOfChoosingPushDirectionSphereAbilityComponent))					{						var ChoosingPushDirectionSphereAbilityComponentcomponent = entityOfChoosingPushDirectionSphereAbilityComponent.GetOrAddComponent<ChoosingPushDirectionSphereAbilityComponent>();						ChoosingPushDirectionSphereAbilityComponentresolver.Out(ref ChoosingPushDirectionSphereAbilityComponentcomponent);					}					break;				case -1144719428:					var MainCanvasTagComponentresolver = MessagePackSerializer.Deserialize<MainCanvasTagComponentResolver>(dataContainerForResolving.Data);					if (EntityManager.TryGetEntityByID(dataContainerForResolving.EntityGuid, out var entityOfMainCanvasTagComponent))					{						var MainCanvasTagComponentcomponent = entityOfMainCanvasTagComponent.GetOrAddComponent<MainCanvasTagComponent>();						MainCanvasTagComponentresolver.Out(ref MainCanvasTagComponentcomponent);					}					break;				case -1191206187:					var AdditionalCanvasTagComponentresolver = MessagePackSerializer.Deserialize<AdditionalCanvasTagComponentResolver>(dataContainerForResolving.Data);					if (EntityManager.TryGetEntityByID(dataContainerForResolving.EntityGuid, out var entityOfAdditionalCanvasTagComponent))					{						var AdditionalCanvasTagComponentcomponent = entityOfAdditionalCanvasTagComponent.GetOrAddComponent<AdditionalCanvasTagComponent>();						AdditionalCanvasTagComponentresolver.Out(ref AdditionalCanvasTagComponentcomponent);					}					break;				case -1325613894:					var CheckTwoComponentresolver = MessagePackSerializer.Deserialize<CheckTwoComponentResolver>(dataContainerForResolving.Data);					if (EntityManager.TryGetEntityByID(dataContainerForResolving.EntityGuid, out var entityOfCheckTwoComponent))					{						var CheckTwoComponentcomponent = entityOfCheckTwoComponent.GetOrAddComponent<CheckTwoComponent>();						CheckTwoComponentresolver.Out(ref CheckTwoComponentcomponent);					}					break;				case -803245354:					var ActorProviderComponentresolver = MessagePackSerializer.Deserialize<ActorProviderComponentResolver>(dataContainerForResolving.Data);					if (EntityManager.TryGetEntityByID(dataContainerForResolving.EntityGuid, out var entityOfActorProviderComponent))					{						var ActorProviderComponentcomponent = entityOfActorProviderComponent.GetOrAddComponent<ActorProviderComponent>();						ActorProviderComponentresolver.Out(ref ActorProviderComponentcomponent);					}					break;				case 1143262242:					var UntilSuccessStrategyNodeComponentresolver = MessagePackSerializer.Deserialize<UntilSuccessStrategyNodeComponentResolver>(dataContainerForResolving.Data);					if (EntityManager.TryGetEntityByID(dataContainerForResolving.EntityGuid, out var entityOfUntilSuccessStrategyNodeComponent))					{						var UntilSuccessStrategyNodeComponentcomponent = entityOfUntilSuccessStrategyNodeComponent.GetOrAddComponent<UntilSuccessStrategyNodeComponent>();						UntilSuccessStrategyNodeComponentresolver.Out(ref UntilSuccessStrategyNodeComponentcomponent);					}					break;				case -1006438290:					var SpeedUpSphereComponentresolver = MessagePackSerializer.Deserialize<SpeedUpSphereComponentResolver>(dataContainerForResolving.Data);					if (EntityManager.TryGetEntityByID(dataContainerForResolving.EntityGuid, out var entityOfSpeedUpSphereComponent))					{						var SpeedUpSphereComponentcomponent = entityOfSpeedUpSphereComponent.GetOrAddComponent<SpeedUpSphereComponent>();						SpeedUpSphereComponentresolver.Out(ref SpeedUpSphereComponentcomponent);					}					break;				case -1981611680:					var PegasusMovementComponentresolver = MessagePackSerializer.Deserialize<PegasusMovementComponentResolver>(dataContainerForResolving.Data);					if (EntityManager.TryGetEntityByID(dataContainerForResolving.EntityGuid, out var entityOfPegasusMovementComponent))					{						var PegasusMovementComponentcomponent = entityOfPegasusMovementComponent.GetOrAddComponent<PegasusMovementComponent>();						PegasusMovementComponentresolver.Out(ref PegasusMovementComponentcomponent);					}					break;				case 1354058828:					var PoolableTagComponentresolver = MessagePackSerializer.Deserialize<PoolableTagComponentResolver>(dataContainerForResolving.Data);					if (EntityManager.TryGetEntityByID(dataContainerForResolving.EntityGuid, out var entityOfPoolableTagComponent))					{						var PoolableTagComponentcomponent = entityOfPoolableTagComponent.GetOrAddComponent<PoolableTagComponent>();						PoolableTagComponentresolver.Out(ref PoolableTagComponentcomponent);					}					break;				case -668621305:					var CachedEntitiesGlobalHolderComponentresolver = MessagePackSerializer.Deserialize<CachedEntitiesGlobalHolderComponentResolver>(dataContainerForResolving.Data);					if (EntityManager.TryGetEntityByID(dataContainerForResolving.EntityGuid, out var entityOfCachedEntitiesGlobalHolderComponent))					{						var CachedEntitiesGlobalHolderComponentcomponent = entityOfCachedEntitiesGlobalHolderComponent.GetOrAddComponent<CachedEntitiesGlobalHolderComponent>();						CachedEntitiesGlobalHolderComponentresolver.Out(ref CachedEntitiesGlobalHolderComponentcomponent);					}					break;				case 1878456296:					var AbilityPredicateComponentresolver = MessagePackSerializer.Deserialize<AbilityPredicateComponentResolver>(dataContainerForResolving.Data);					if (EntityManager.TryGetEntityByID(dataContainerForResolving.EntityGuid, out var entityOfAbilityPredicateComponent))					{						var AbilityPredicateComponentcomponent = entityOfAbilityPredicateComponent.GetOrAddComponent<AbilityPredicateComponent>();						AbilityPredicateComponentresolver.Out(ref AbilityPredicateComponentcomponent);					}					break;				case -1431715806:					var TargetPositionComponentresolver = MessagePackSerializer.Deserialize<TargetPositionComponentResolver>(dataContainerForResolving.Data);					if (EntityManager.TryGetEntityByID(dataContainerForResolving.EntityGuid, out var entityOfTargetPositionComponent))					{						var TargetPositionComponentcomponent = entityOfTargetPositionComponent.GetOrAddComponent<TargetPositionComponent>();						TargetPositionComponentresolver.Out(ref TargetPositionComponentcomponent);					}					break;				case -619720211:					var SphereComponentresolver = MessagePackSerializer.Deserialize<SphereComponentResolver>(dataContainerForResolving.Data);					if (EntityManager.TryGetEntityByID(dataContainerForResolving.EntityGuid, out var entityOfSphereComponent))					{						var SphereComponentcomponent = entityOfSphereComponent.GetOrAddComponent<SphereComponent>();						SphereComponentresolver.Out(ref SphereComponentcomponent);					}					break;				case 1534411424:					var PlayerLevelComponentresolver = MessagePackSerializer.Deserialize<PlayerLevelComponentResolver>(dataContainerForResolving.Data);					if (EntityManager.TryGetEntityByID(dataContainerForResolving.EntityGuid, out var entityOfPlayerLevelComponent))					{						var PlayerLevelComponentcomponent = entityOfPlayerLevelComponent.GetOrAddComponent<PlayerLevelComponent>();						PlayerLevelComponentresolver.Out(ref PlayerLevelComponentcomponent);					}					break;				case 929129980:					var IconComponentresolver = MessagePackSerializer.Deserialize<IconComponentResolver>(dataContainerForResolving.Data);					if (EntityManager.TryGetEntityByID(dataContainerForResolving.EntityGuid, out var entityOfIconComponent))					{						var IconComponentcomponent = entityOfIconComponent.GetOrAddComponent<IconComponent>();						IconComponentresolver.Out(ref IconComponentcomponent);					}					break;				case -2124047058:					var UITagComponentresolver = MessagePackSerializer.Deserialize<UITagComponentResolver>(dataContainerForResolving.Data);					if (EntityManager.TryGetEntityByID(dataContainerForResolving.EntityGuid, out var entityOfUITagComponent))					{						var UITagComponentcomponent = entityOfUITagComponent.GetOrAddComponent<UITagComponent>();						UITagComponentresolver.Out(ref UITagComponentcomponent);					}					break;				case -1422875746:					var StickTagComponentresolver = MessagePackSerializer.Deserialize<StickTagComponentResolver>(dataContainerForResolving.Data);					if (EntityManager.TryGetEntityByID(dataContainerForResolving.EntityGuid, out var entityOfStickTagComponent))					{						var StickTagComponentcomponent = entityOfStickTagComponent.GetOrAddComponent<StickTagComponent>();						StickTagComponentresolver.Out(ref StickTagComponentcomponent);					}					break;				case -1965185654:					var ScenarioAnimationComponentresolver = MessagePackSerializer.Deserialize<ScenarioAnimationComponentResolver>(dataContainerForResolving.Data);					if (EntityManager.TryGetEntityByID(dataContainerForResolving.EntityGuid, out var entityOfScenarioAnimationComponent))					{						var ScenarioAnimationComponentcomponent = entityOfScenarioAnimationComponent.GetOrAddComponent<ScenarioAnimationComponent>();						ScenarioAnimationComponentresolver.Out(ref ScenarioAnimationComponentcomponent);					}					break;				case -1056876887:					var SpawnPointComponentresolver = MessagePackSerializer.Deserialize<SpawnPointComponentResolver>(dataContainerForResolving.Data);					if (EntityManager.TryGetEntityByID(dataContainerForResolving.EntityGuid, out var entityOfSpawnPointComponent))					{						var SpawnPointComponentcomponent = entityOfSpawnPointComponent.GetOrAddComponent<SpawnPointComponent>();						SpawnPointComponentresolver.Out(ref SpawnPointComponentcomponent);					}					break;				case -2117687604:					var OverrideAnimatorComponentresolver = MessagePackSerializer.Deserialize<OverrideAnimatorComponentResolver>(dataContainerForResolving.Data);					if (EntityManager.TryGetEntityByID(dataContainerForResolving.EntityGuid, out var entityOfOverrideAnimatorComponent))					{						var OverrideAnimatorComponentcomponent = entityOfOverrideAnimatorComponent.GetOrAddComponent<OverrideAnimatorComponent>();						OverrideAnimatorComponentresolver.Out(ref OverrideAnimatorComponentcomponent);					}					break;				case 819793506:					var StateInfoComponentresolver = MessagePackSerializer.Deserialize<StateInfoComponentResolver>(dataContainerForResolving.Data);					if (EntityManager.TryGetEntityByID(dataContainerForResolving.EntityGuid, out var entityOfStateInfoComponent))					{						var StateInfoComponentcomponent = entityOfStateInfoComponent.GetOrAddComponent<StateInfoComponent>();						StateInfoComponentresolver.Out(ref StateInfoComponentcomponent);					}					break;				case 838666118:					var GameStateComponentresolver = MessagePackSerializer.Deserialize<GameStateComponentResolver>(dataContainerForResolving.Data);					if (EntityManager.TryGetEntityByID(dataContainerForResolving.EntityGuid, out var entityOfGameStateComponent))					{						var GameStateComponentcomponent = entityOfGameStateComponent.GetOrAddComponent<GameStateComponent>();						GameStateComponentresolver.Out(ref GameStateComponentcomponent);					}					break;				case 1656499746:					var ViewReferenceGameObjectComponentresolver = MessagePackSerializer.Deserialize<ViewReferenceGameObjectComponentResolver>(dataContainerForResolving.Data);					if (EntityManager.TryGetEntityByID(dataContainerForResolving.EntityGuid, out var entityOfViewReferenceGameObjectComponent))					{						var ViewReferenceGameObjectComponentcomponent = entityOfViewReferenceGameObjectComponent.GetOrAddComponent<ViewReferenceGameObjectComponent>();						ViewReferenceGameObjectComponentresolver.Out(ref ViewReferenceGameObjectComponentcomponent);					}					break;				case 42315994:					var ViewDestructionDelayedComponentresolver = MessagePackSerializer.Deserialize<ViewDestructionDelayedComponentResolver>(dataContainerForResolving.Data);					if (EntityManager.TryGetEntityByID(dataContainerForResolving.EntityGuid, out var entityOfViewDestructionDelayedComponent))					{						var ViewDestructionDelayedComponentcomponent = entityOfViewDestructionDelayedComponent.GetOrAddComponent<ViewDestructionDelayedComponent>();						ViewDestructionDelayedComponentresolver.Out(ref ViewDestructionDelayedComponentcomponent);					}					break;				case -2094772963:					var UIPriorityIndexComponentresolver = MessagePackSerializer.Deserialize<UIPriorityIndexComponentResolver>(dataContainerForResolving.Data);					if (EntityManager.TryGetEntityByID(dataContainerForResolving.EntityGuid, out var entityOfUIPriorityIndexComponent))					{						var UIPriorityIndexComponentcomponent = entityOfUIPriorityIndexComponent.GetOrAddComponent<UIPriorityIndexComponent>();						UIPriorityIndexComponentresolver.Out(ref UIPriorityIndexComponentcomponent);					}					break;				case -1162002111:					var UIGroupTagComponentresolver = MessagePackSerializer.Deserialize<UIGroupTagComponentResolver>(dataContainerForResolving.Data);					if (EntityManager.TryGetEntityByID(dataContainerForResolving.EntityGuid, out var entityOfUIGroupTagComponent))					{						var UIGroupTagComponentcomponent = entityOfUIGroupTagComponent.GetOrAddComponent<UIGroupTagComponent>();						UIGroupTagComponentresolver.Out(ref UIGroupTagComponentcomponent);					}					break;				case 265593849:					var TimeProviderComponentresolver = MessagePackSerializer.Deserialize<TimeProviderComponentResolver>(dataContainerForResolving.Data);					if (EntityManager.TryGetEntityByID(dataContainerForResolving.EntityGuid, out var entityOfTimeProviderComponent))					{						var TimeProviderComponentcomponent = entityOfTimeProviderComponent.GetOrAddComponent<TimeProviderComponent>();						TimeProviderComponentresolver.Out(ref TimeProviderComponentcomponent);					}					break;				case -1713719609:					var TestSerializationComponentresolver = MessagePackSerializer.Deserialize<TestSerializationComponentResolver>(dataContainerForResolving.Data);					if (EntityManager.TryGetEntityByID(dataContainerForResolving.EntityGuid, out var entityOfTestSerializationComponent))					{						var TestSerializationComponentcomponent = entityOfTestSerializationComponent.GetOrAddComponent<TestSerializationComponent>();						TestSerializationComponentresolver.Out(ref TestSerializationComponentcomponent);					}					break;				case -142928435:					var ActorContainerIDresolver = MessagePackSerializer.Deserialize<ActorContainerIDResolver>(dataContainerForResolving.Data);					if (EntityManager.TryGetEntityByID(dataContainerForResolving.EntityGuid, out var entityOfActorContainerID))					{						var ActorContainerIDcomponent = entityOfActorContainerID.GetOrAddComponent<ActorContainerID>();						ActorContainerIDresolver.Out(ref ActorContainerIDcomponent);					}					break;				case 745147359:					var TimeScaleComponentresolver = MessagePackSerializer.Deserialize<TimeScaleComponentResolver>(dataContainerForResolving.Data);					if (EntityManager.TryGetEntityByID(dataContainerForResolving.EntityGuid, out var entityOfTimeScaleComponent))					{						var TimeScaleComponentcomponent = entityOfTimeScaleComponent.GetOrAddComponent<TimeScaleComponent>();						TimeScaleComponentresolver.Out(ref TimeScaleComponentcomponent);					}					break;				case 208510666:					var ScenesHolderComponentresolver = MessagePackSerializer.Deserialize<ScenesHolderComponentResolver>(dataContainerForResolving.Data);					if (EntityManager.TryGetEntityByID(dataContainerForResolving.EntityGuid, out var entityOfScenesHolderComponent))					{						var ScenesHolderComponentcomponent = entityOfScenesHolderComponent.GetOrAddComponent<ScenesHolderComponent>();						ScenesHolderComponentresolver.Out(ref ScenesHolderComponentcomponent);					}					break;				case -1675925374:					var ExplodeSpheresAbilityComponentresolver = MessagePackSerializer.Deserialize<ExplodeSpheresAbilityComponentResolver>(dataContainerForResolving.Data);					if (EntityManager.TryGetEntityByID(dataContainerForResolving.EntityGuid, out var entityOfExplodeSpheresAbilityComponent))					{						var ExplodeSpheresAbilityComponentcomponent = entityOfExplodeSpheresAbilityComponent.GetOrAddComponent<ExplodeSpheresAbilityComponent>();						ExplodeSpheresAbilityComponentresolver.Out(ref ExplodeSpheresAbilityComponentcomponent);					}					break;				case 1782176358:					var SetupAfterViewTagComponentresolver = MessagePackSerializer.Deserialize<SetupAfterViewTagComponentResolver>(dataContainerForResolving.Data);					if (EntityManager.TryGetEntityByID(dataContainerForResolving.EntityGuid, out var entityOfSetupAfterViewTagComponent))					{						var SetupAfterViewTagComponentcomponent = entityOfSetupAfterViewTagComponent.GetOrAddComponent<SetupAfterViewTagComponent>();						SetupAfterViewTagComponentresolver.Out(ref SetupAfterViewTagComponentcomponent);					}					break;				case 2041590961:					var AbilitiesHolderComponentresolver = MessagePackSerializer.Deserialize<AbilitiesHolderComponentResolver>(dataContainerForResolving.Data);					if (EntityManager.TryGetEntityByID(dataContainerForResolving.EntityGuid, out var entityOfAbilitiesHolderComponent))					{						var AbilitiesHolderComponentcomponent = entityOfAbilitiesHolderComponent.GetOrAddComponent<AbilitiesHolderComponent>();						AbilitiesHolderComponentresolver.Out(ref AbilitiesHolderComponentcomponent);					}					break;				case -1150856501:					var AbilityTagComponentresolver = MessagePackSerializer.Deserialize<AbilityTagComponentResolver>(dataContainerForResolving.Data);					if (EntityManager.TryGetEntityByID(dataContainerForResolving.EntityGuid, out var entityOfAbilityTagComponent))					{						var AbilityTagComponentcomponent = entityOfAbilityTagComponent.GetOrAddComponent<AbilityTagComponent>();						AbilityTagComponentresolver.Out(ref AbilityTagComponentcomponent);					}					break;				case -952149029:					var AIStrategyComponentresolver = MessagePackSerializer.Deserialize<AIStrategyComponentResolver>(dataContainerForResolving.Data);					if (EntityManager.TryGetEntityByID(dataContainerForResolving.EntityGuid, out var entityOfAIStrategyComponent))					{						var AIStrategyComponentcomponent = entityOfAIStrategyComponent.GetOrAddComponent<AIStrategyComponent>();						AIStrategyComponentresolver.Out(ref AIStrategyComponentcomponent);					}					break;				case -1167233499:					var MainCameraComponentresolver = MessagePackSerializer.Deserialize<MainCameraComponentResolver>(dataContainerForResolving.Data);					if (EntityManager.TryGetEntityByID(dataContainerForResolving.EntityGuid, out var entityOfMainCameraComponent))					{						var MainCameraComponentcomponent = entityOfMainCameraComponent.GetOrAddComponent<MainCameraComponent>();						MainCameraComponentresolver.Out(ref MainCameraComponentcomponent);					}					break;				case -575221824:					var RadiusComponentresolver = MessagePackSerializer.Deserialize<RadiusComponentResolver>(dataContainerForResolving.Data);					if (EntityManager.TryGetEntityByID(dataContainerForResolving.EntityGuid, out var entityOfRadiusComponent))					{						var RadiusComponentcomponent = entityOfRadiusComponent.GetOrAddComponent<RadiusComponent>();						RadiusComponentresolver.Out(ref RadiusComponentcomponent);					}					break;				case 1046176786:					var AnimationCheckOutsHolderComponentresolver = MessagePackSerializer.Deserialize<AnimationCheckOutsHolderComponentResolver>(dataContainerForResolving.Data);					if (EntityManager.TryGetEntityByID(dataContainerForResolving.EntityGuid, out var entityOfAnimationCheckOutsHolderComponent))					{						var AnimationCheckOutsHolderComponentcomponent = entityOfAnimationCheckOutsHolderComponent.GetOrAddComponent<AnimationCheckOutsHolderComponent>();						AnimationCheckOutsHolderComponentresolver.Out(ref AnimationCheckOutsHolderComponentcomponent);					}					break;				case 680066094:					var IsDeadTagComponentresolver = MessagePackSerializer.Deserialize<IsDeadTagComponentResolver>(dataContainerForResolving.Data);					if (EntityManager.TryGetEntityByID(dataContainerForResolving.EntityGuid, out var entityOfIsDeadTagComponent))					{						var IsDeadTagComponentcomponent = entityOfIsDeadTagComponent.GetOrAddComponent<IsDeadTagComponent>();						IsDeadTagComponentresolver.Out(ref IsDeadTagComponentcomponent);					}					break;				case 1960044224:					var CardsGlobalHolderComponentresolver = MessagePackSerializer.Deserialize<CardsGlobalHolderComponentResolver>(dataContainerForResolving.Data);					if (EntityManager.TryGetEntityByID(dataContainerForResolving.EntityGuid, out var entityOfCardsGlobalHolderComponent))					{						var CardsGlobalHolderComponentcomponent = entityOfCardsGlobalHolderComponent.GetOrAddComponent<CardsGlobalHolderComponent>();						CardsGlobalHolderComponentresolver.Out(ref CardsGlobalHolderComponentcomponent);					}					break;				case -1548506885:					var SoftCurrencyRewardVisualConfigComponentresolver = MessagePackSerializer.Deserialize<SoftCurrencyRewardVisualConfigComponentResolver>(dataContainerForResolving.Data);					if (EntityManager.TryGetEntityByID(dataContainerForResolving.EntityGuid, out var entityOfSoftCurrencyRewardVisualConfigComponent))					{						var SoftCurrencyRewardVisualConfigComponentcomponent = entityOfSoftCurrencyRewardVisualConfigComponent.GetOrAddComponent<SoftCurrencyRewardVisualConfigComponent>();						SoftCurrencyRewardVisualConfigComponentresolver.Out(ref SoftCurrencyRewardVisualConfigComponentcomponent);					}					break;				case 760610747:					var PlayerTagComponentresolver = MessagePackSerializer.Deserialize<PlayerTagComponentResolver>(dataContainerForResolving.Data);					if (EntityManager.TryGetEntityByID(dataContainerForResolving.EntityGuid, out var entityOfPlayerTagComponent))					{						var PlayerTagComponentcomponent = entityOfPlayerTagComponent.GetOrAddComponent<PlayerTagComponent>();						PlayerTagComponentresolver.Out(ref PlayerTagComponentcomponent);					}					break;				case -1330009829:					var TestInitComponentresolver = MessagePackSerializer.Deserialize<TestInitComponentResolver>(dataContainerForResolving.Data);					if (EntityManager.TryGetEntityByID(dataContainerForResolving.EntityGuid, out var entityOfTestInitComponent))					{						var TestInitComponentcomponent = entityOfTestInitComponent.GetOrAddComponent<TestInitComponent>();						TestInitComponentresolver.Out(ref TestInitComponentcomponent);					}					break;				case -1425063609:					var UnityTransformComponentresolver = MessagePackSerializer.Deserialize<UnityTransformComponentResolver>(dataContainerForResolving.Data);					if (EntityManager.TryGetEntityByID(dataContainerForResolving.EntityGuid, out var entityOfUnityTransformComponent))					{						var UnityTransformComponentcomponent = entityOfUnityTransformComponent.GetOrAddComponent<UnityTransformComponent>();						UnityTransformComponentresolver.Out(ref UnityTransformComponentcomponent);					}					break;				case -1206519595:					var UnityRectTransformComponentresolver = MessagePackSerializer.Deserialize<UnityRectTransformComponentResolver>(dataContainerForResolving.Data);					if (EntityManager.TryGetEntityByID(dataContainerForResolving.EntityGuid, out var entityOfUnityRectTransformComponent))					{						var UnityRectTransformComponentcomponent = entityOfUnityRectTransformComponent.GetOrAddComponent<UnityRectTransformComponent>();						UnityRectTransformComponentresolver.Out(ref UnityRectTransformComponentcomponent);					}					break;				case 1908410989:					var UIViewReferenceComponentresolver = MessagePackSerializer.Deserialize<UIViewReferenceComponentResolver>(dataContainerForResolving.Data);					if (EntityManager.TryGetEntityByID(dataContainerForResolving.EntityGuid, out var entityOfUIViewReferenceComponent))					{						var UIViewReferenceComponentcomponent = entityOfUIViewReferenceComponent.GetOrAddComponent<UIViewReferenceComponent>();						UIViewReferenceComponentresolver.Out(ref UIViewReferenceComponentcomponent);					}					break;				case 888932549:					var TransformComponentresolver = MessagePackSerializer.Deserialize<TransformComponentResolver>(dataContainerForResolving.Data);					if (EntityManager.TryGetEntityByID(dataContainerForResolving.EntityGuid, out var entityOfTransformComponent))					{						var TransformComponentcomponent = entityOfTransformComponent.GetOrAddComponent<TransformComponent>();						TransformComponentresolver.Out(ref TransformComponentcomponent);					}					break;				case -1535532641:					var PoolableViewsProviderComponentresolver = MessagePackSerializer.Deserialize<PoolableViewsProviderComponentResolver>(dataContainerForResolving.Data);					if (EntityManager.TryGetEntityByID(dataContainerForResolving.EntityGuid, out var entityOfPoolableViewsProviderComponent))					{						var PoolableViewsProviderComponentcomponent = entityOfPoolableViewsProviderComponent.GetOrAddComponent<PoolableViewsProviderComponent>();						PoolableViewsProviderComponentresolver.Out(ref PoolableViewsProviderComponentcomponent);					}					break;				case 290577522:					var OnApplicationQuitTagComponentresolver = MessagePackSerializer.Deserialize<OnApplicationQuitTagComponentResolver>(dataContainerForResolving.Data);					if (EntityManager.TryGetEntityByID(dataContainerForResolving.EntityGuid, out var entityOfOnApplicationQuitTagComponent))					{						var OnApplicationQuitTagComponentcomponent = entityOfOnApplicationQuitTagComponent.GetOrAddComponent<OnApplicationQuitTagComponent>();						OnApplicationQuitTagComponentresolver.Out(ref OnApplicationQuitTagComponentcomponent);					}					break;				case 1908646573:					var NetworkEntityTagComponentresolver = MessagePackSerializer.Deserialize<NetworkEntityTagComponentResolver>(dataContainerForResolving.Data);					if (EntityManager.TryGetEntityByID(dataContainerForResolving.EntityGuid, out var entityOfNetworkEntityTagComponent))					{						var NetworkEntityTagComponentcomponent = entityOfNetworkEntityTagComponent.GetOrAddComponent<NetworkEntityTagComponent>();						NetworkEntityTagComponentresolver.Out(ref NetworkEntityTagComponentcomponent);					}					break;				case 1004631539:					var ItemTagComponentresolver = MessagePackSerializer.Deserialize<ItemTagComponentResolver>(dataContainerForResolving.Data);					if (EntityManager.TryGetEntityByID(dataContainerForResolving.EntityGuid, out var entityOfItemTagComponent))					{						var ItemTagComponentcomponent = entityOfItemTagComponent.GetOrAddComponent<ItemTagComponent>();						ItemTagComponentresolver.Out(ref ItemTagComponentcomponent);					}					break;				case 1776997060:					var InputListenerTagComponentresolver = MessagePackSerializer.Deserialize<InputListenerTagComponentResolver>(dataContainerForResolving.Data);					if (EntityManager.TryGetEntityByID(dataContainerForResolving.EntityGuid, out var entityOfInputListenerTagComponent))					{						var InputListenerTagComponentcomponent = entityOfInputListenerTagComponent.GetOrAddComponent<InputListenerTagComponent>();						InputListenerTagComponentresolver.Out(ref InputListenerTagComponentcomponent);					}					break;				case -669669709:					var StrategySideExecuteComponentresolver = MessagePackSerializer.Deserialize<StrategySideExecuteComponentResolver>(dataContainerForResolving.Data);					if (EntityManager.TryGetEntityByID(dataContainerForResolving.EntityGuid, out var entityOfStrategySideExecuteComponent))					{						var StrategySideExecuteComponentcomponent = entityOfStrategySideExecuteComponent.GetOrAddComponent<StrategySideExecuteComponent>();						StrategySideExecuteComponentresolver.Out(ref StrategySideExecuteComponentcomponent);					}					break;				case -988064901:					var AppVersionComponentresolver = MessagePackSerializer.Deserialize<AppVersionComponentResolver>(dataContainerForResolving.Data);					if (EntityManager.TryGetEntityByID(dataContainerForResolving.EntityGuid, out var entityOfAppVersionComponent))					{						var AppVersionComponentcomponent = entityOfAppVersionComponent.GetOrAddComponent<AppVersionComponent>();						AppVersionComponentresolver.Out(ref AppVersionComponentcomponent);					}					break;				case 1487202547:					var SpeedDependsOnTimeScaleComponentresolver = MessagePackSerializer.Deserialize<SpeedDependsOnTimeScaleComponentResolver>(dataContainerForResolving.Data);					if (EntityManager.TryGetEntityByID(dataContainerForResolving.EntityGuid, out var entityOfSpeedDependsOnTimeScaleComponent))					{						var SpeedDependsOnTimeScaleComponentcomponent = entityOfSpeedDependsOnTimeScaleComponent.GetOrAddComponent<SpeedDependsOnTimeScaleComponent>();						SpeedDependsOnTimeScaleComponentresolver.Out(ref SpeedDependsOnTimeScaleComponentcomponent);					}					break;				case 755826610:					var CenterTagComponentresolver = MessagePackSerializer.Deserialize<CenterTagComponentResolver>(dataContainerForResolving.Data);					if (EntityManager.TryGetEntityByID(dataContainerForResolving.EntityGuid, out var entityOfCenterTagComponent))					{						var CenterTagComponentcomponent = entityOfCenterTagComponent.GetOrAddComponent<CenterTagComponent>();						CenterTagComponentresolver.Out(ref CenterTagComponentcomponent);					}					break;				case 1005024681:					var CardTagComponentresolver = MessagePackSerializer.Deserialize<CardTagComponentResolver>(dataContainerForResolving.Data);					if (EntityManager.TryGetEntityByID(dataContainerForResolving.EntityGuid, out var entityOfCardTagComponent))					{						var CardTagComponentcomponent = entityOfCardTagComponent.GetOrAddComponent<CardTagComponent>();						CardTagComponentresolver.Out(ref CardTagComponentcomponent);					}					break;				case 7120005:					var ViewReadyTagComponentresolver = MessagePackSerializer.Deserialize<ViewReadyTagComponentResolver>(dataContainerForResolving.Data);					if (EntityManager.TryGetEntityByID(dataContainerForResolving.EntityGuid, out var entityOfViewReadyTagComponent))					{						var ViewReadyTagComponentcomponent = entityOfViewReadyTagComponent.GetOrAddComponent<ViewReadyTagComponent>();						ViewReadyTagComponentresolver.Out(ref ViewReadyTagComponentcomponent);					}					break;				case -1299131970:					var SphereCastContextresolver = MessagePackSerializer.Deserialize<SphereCastContextResolver>(dataContainerForResolving.Data);					if (EntityManager.TryGetEntityByID(dataContainerForResolving.EntityGuid, out var entityOfSphereCastContext))					{						var SphereCastContextcomponent = entityOfSphereCastContext.GetOrAddComponent<SphereCastContext>();						SphereCastContextresolver.Out(ref SphereCastContextcomponent);					}					break;				case 760681168:					var StateDataComponentresolver = MessagePackSerializer.Deserialize<StateDataComponentResolver>(dataContainerForResolving.Data);					if (EntityManager.TryGetEntityByID(dataContainerForResolving.EntityGuid, out var entityOfStateDataComponent))					{						var StateDataComponentcomponent = entityOfStateDataComponent.GetOrAddComponent<StateDataComponent>();						StateDataComponentresolver.Out(ref StateDataComponentcomponent);					}					break;				case -1167076999:					var InitOnAddAbilityTagComponentresolver = MessagePackSerializer.Deserialize<InitOnAddAbilityTagComponentResolver>(dataContainerForResolving.Data);					if (EntityManager.TryGetEntityByID(dataContainerForResolving.EntityGuid, out var entityOfInitOnAddAbilityTagComponent))					{						var InitOnAddAbilityTagComponentcomponent = entityOfInitOnAddAbilityTagComponent.GetOrAddComponent<InitOnAddAbilityTagComponent>();						InitOnAddAbilityTagComponentresolver.Out(ref InitOnAddAbilityTagComponentcomponent);					}					break;				case 274782965:					var AdditionalAbilityIndexComponentresolver = MessagePackSerializer.Deserialize<AdditionalAbilityIndexComponentResolver>(dataContainerForResolving.Data);					if (EntityManager.TryGetEntityByID(dataContainerForResolving.EntityGuid, out var entityOfAdditionalAbilityIndexComponent))					{						var AdditionalAbilityIndexComponentcomponent = entityOfAdditionalAbilityIndexComponent.GetOrAddComponent<AdditionalAbilityIndexComponent>();						AdditionalAbilityIndexComponentresolver.Out(ref AdditionalAbilityIndexComponentcomponent);					}					break;				case 117603503:					var NavMeshAgentComponentresolver = MessagePackSerializer.Deserialize<NavMeshAgentComponentResolver>(dataContainerForResolving.Data);					if (EntityManager.TryGetEntityByID(dataContainerForResolving.EntityGuid, out var entityOfNavMeshAgentComponent))					{						var NavMeshAgentComponentcomponent = entityOfNavMeshAgentComponent.GetOrAddComponent<NavMeshAgentComponent>();						NavMeshAgentComponentresolver.Out(ref NavMeshAgentComponentcomponent);					}					break;				case 369850288:					var InputActionsComponentresolver = MessagePackSerializer.Deserialize<InputActionsComponentResolver>(dataContainerForResolving.Data);					if (EntityManager.TryGetEntityByID(dataContainerForResolving.EntityGuid, out var entityOfInputActionsComponent))					{						var InputActionsComponentcomponent = entityOfInputActionsComponent.GetOrAddComponent<InputActionsComponent>();						InputActionsComponentresolver.Out(ref InputActionsComponentcomponent);					}					break;				case -996906941:					var IgnoreReferenceContainerTagComponentresolver = MessagePackSerializer.Deserialize<IgnoreReferenceContainerTagComponentResolver>(dataContainerForResolving.Data);					if (EntityManager.TryGetEntityByID(dataContainerForResolving.EntityGuid, out var entityOfIgnoreReferenceContainerTagComponent))					{						var IgnoreReferenceContainerTagComponentcomponent = entityOfIgnoreReferenceContainerTagComponent.GetOrAddComponent<IgnoreReferenceContainerTagComponent>();						IgnoreReferenceContainerTagComponentresolver.Out(ref IgnoreReferenceContainerTagComponentcomponent);					}					break;				case -100950956:					var GameLogicTagComponentresolver = MessagePackSerializer.Deserialize<GameLogicTagComponentResolver>(dataContainerForResolving.Data);					if (EntityManager.TryGetEntityByID(dataContainerForResolving.EntityGuid, out var entityOfGameLogicTagComponent))					{						var GameLogicTagComponentcomponent = entityOfGameLogicTagComponent.GetOrAddComponent<GameLogicTagComponent>();						GameLogicTagComponentresolver.Out(ref GameLogicTagComponentcomponent);					}					break;				case -1378915465:					var CacheCounterValuesComponentresolver = MessagePackSerializer.Deserialize<CacheCounterValuesComponentResolver>(dataContainerForResolving.Data);					if (EntityManager.TryGetEntityByID(dataContainerForResolving.EntityGuid, out var entityOfCacheCounterValuesComponent))					{						var CacheCounterValuesComponentcomponent = entityOfCacheCounterValuesComponent.GetOrAddComponent<CacheCounterValuesComponent>();						CacheCounterValuesComponentresolver.Out(ref CacheCounterValuesComponentcomponent);					}					break;				case -822435144:					var LevelModifierHolderComponentresolver = MessagePackSerializer.Deserialize<LevelModifierHolderComponentResolver>(dataContainerForResolving.Data);					if (EntityManager.TryGetEntityByID(dataContainerForResolving.EntityGuid, out var entityOfLevelModifierHolderComponent))					{						var LevelModifierHolderComponentcomponent = entityOfLevelModifierHolderComponent.GetOrAddComponent<LevelModifierHolderComponent>();						LevelModifierHolderComponentresolver.Out(ref LevelModifierHolderComponentcomponent);					}					break;				case -146694774:					var ShowHpBarTagComponentresolver = MessagePackSerializer.Deserialize<ShowHpBarTagComponentResolver>(dataContainerForResolving.Data);					if (EntityManager.TryGetEntityByID(dataContainerForResolving.EntityGuid, out var entityOfShowHpBarTagComponent))					{						var ShowHpBarTagComponentcomponent = entityOfShowHpBarTagComponent.GetOrAddComponent<ShowHpBarTagComponent>();						ShowHpBarTagComponentresolver.Out(ref ShowHpBarTagComponentcomponent);					}					break;				case 1310216023:					var CustomHpBarComponentresolver = MessagePackSerializer.Deserialize<CustomHpBarComponentResolver>(dataContainerForResolving.Data);					if (EntityManager.TryGetEntityByID(dataContainerForResolving.EntityGuid, out var entityOfCustomHpBarComponent))					{						var CustomHpBarComponentcomponent = entityOfCustomHpBarComponent.GetOrAddComponent<CustomHpBarComponent>();						CustomHpBarComponentresolver.Out(ref CustomHpBarComponentcomponent);					}					break;				case 2044779682:					var CharactersHolderComponentresolver = MessagePackSerializer.Deserialize<CharactersHolderComponentResolver>(dataContainerForResolving.Data);					if (EntityManager.TryGetEntityByID(dataContainerForResolving.EntityGuid, out var entityOfCharactersHolderComponent))					{						var CharactersHolderComponentcomponent = entityOfCharactersHolderComponent.GetOrAddComponent<CharactersHolderComponent>();						CharactersHolderComponentresolver.Out(ref CharactersHolderComponentcomponent);					}					break;				case 766574714:					var UIBusyTagComponentresolver = MessagePackSerializer.Deserialize<UIBusyTagComponentResolver>(dataContainerForResolving.Data);					if (EntityManager.TryGetEntityByID(dataContainerForResolving.EntityGuid, out var entityOfUIBusyTagComponent))					{						var UIBusyTagComponentcomponent = entityOfUIBusyTagComponent.GetOrAddComponent<UIBusyTagComponent>();						UIBusyTagComponentresolver.Out(ref UIBusyTagComponentcomponent);					}					break;				case 1989536467:					var OverlapSphereCastContextresolver = MessagePackSerializer.Deserialize<OverlapSphereCastContextResolver>(dataContainerForResolving.Data);					if (EntityManager.TryGetEntityByID(dataContainerForResolving.EntityGuid, out var entityOfOverlapSphereCastContext))					{						var OverlapSphereCastContextcomponent = entityOfOverlapSphereCastContext.GetOrAddComponent<OverlapSphereCastContext>();						OverlapSphereCastContextresolver.Out(ref OverlapSphereCastContextcomponent);					}					break;				case 387690372:					var StateContextComponentresolver = MessagePackSerializer.Deserialize<StateContextComponentResolver>(dataContainerForResolving.Data);					if (EntityManager.TryGetEntityByID(dataContainerForResolving.EntityGuid, out var entityOfStateContextComponent))					{						var StateContextComponentcomponent = entityOfStateContextComponent.GetOrAddComponent<StateContextComponent>();						StateContextComponentresolver.Out(ref StateContextComponentcomponent);					}					break;				case 369067176:					var SavePositionComponentresolver = MessagePackSerializer.Deserialize<SavePositionComponentResolver>(dataContainerForResolving.Data);					if (EntityManager.TryGetEntityByID(dataContainerForResolving.EntityGuid, out var entityOfSavePositionComponent))					{						var SavePositionComponentcomponent = entityOfSavePositionComponent.GetOrAddComponent<SavePositionComponent>();						SavePositionComponentresolver.Out(ref SavePositionComponentcomponent);					}					break;				case -791405757:					var PushDirectionComponentresolver = MessagePackSerializer.Deserialize<PushDirectionComponentResolver>(dataContainerForResolving.Data);					if (EntityManager.TryGetEntityByID(dataContainerForResolving.EntityGuid, out var entityOfPushDirectionComponent))					{						var PushDirectionComponentcomponent = entityOfPushDirectionComponent.GetOrAddComponent<PushDirectionComponent>();						PushDirectionComponentresolver.Out(ref PushDirectionComponentcomponent);					}					break;				case -942979946:					var ActionsHolderComponentresolver = MessagePackSerializer.Deserialize<ActionsHolderComponentResolver>(dataContainerForResolving.Data);					if (EntityManager.TryGetEntityByID(dataContainerForResolving.EntityGuid, out var entityOfActionsHolderComponent))					{						var ActionsHolderComponentcomponent = entityOfActionsHolderComponent.GetOrAddComponent<ActionsHolderComponent>();						ActionsHolderComponentresolver.Out(ref ActionsHolderComponentcomponent);					}					break;				case 2058998768:					var SoftCurrencyCounterMonoComponentProviderComponentresolver = MessagePackSerializer.Deserialize<SoftCurrencyCounterMonoComponentProviderComponentResolver>(dataContainerForResolving.Data);					if (EntityManager.TryGetEntityByID(dataContainerForResolving.EntityGuid, out var entityOfSoftCurrencyCounterMonoComponentProviderComponent))					{						var SoftCurrencyCounterMonoComponentProviderComponentcomponent = entityOfSoftCurrencyCounterMonoComponentProviderComponent.GetOrAddComponent<SoftCurrencyCounterMonoComponentProviderComponent>();						SoftCurrencyCounterMonoComponentProviderComponentresolver.Out(ref SoftCurrencyCounterMonoComponentProviderComponentcomponent);					}					break;				case -1908323267:					var RigidbodyProviderComponentresolver = MessagePackSerializer.Deserialize<RigidbodyProviderComponentResolver>(dataContainerForResolving.Data);					if (EntityManager.TryGetEntityByID(dataContainerForResolving.EntityGuid, out var entityOfRigidbodyProviderComponent))					{						var RigidbodyProviderComponentcomponent = entityOfRigidbodyProviderComponent.GetOrAddComponent<RigidbodyProviderComponent>();						RigidbodyProviderComponentresolver.Out(ref RigidbodyProviderComponentcomponent);					}					break;				case -575427163:					var ActionsWithPredicateHolderComponentresolver = MessagePackSerializer.Deserialize<ActionsWithPredicateHolderComponentResolver>(dataContainerForResolving.Data);					if (EntityManager.TryGetEntityByID(dataContainerForResolving.EntityGuid, out var entityOfActionsWithPredicateHolderComponent))					{						var ActionsWithPredicateHolderComponentcomponent = entityOfActionsWithPredicateHolderComponent.GetOrAddComponent<ActionsWithPredicateHolderComponent>();						ActionsWithPredicateHolderComponentresolver.Out(ref ActionsWithPredicateHolderComponentcomponent);					}					break;				case -2019244546:					var SoftValueCounterComponentresolver = MessagePackSerializer.Deserialize<SoftValueCounterComponentResolver>(dataContainerForResolving.Data);					if (EntityManager.TryGetEntityByID(dataContainerForResolving.EntityGuid, out var entityOfSoftValueCounterComponent))					{						var SoftValueCounterComponentcomponent = entityOfSoftValueCounterComponent.GetOrAddComponent<SoftValueCounterComponent>();						SoftValueCounterComponentresolver.Out(ref SoftValueCounterComponentcomponent);					}					break;				case -1252231869:					var EnergyRegenerationComponentresolver = MessagePackSerializer.Deserialize<EnergyRegenerationComponentResolver>(dataContainerForResolving.Data);					if (EntityManager.TryGetEntityByID(dataContainerForResolving.EntityGuid, out var entityOfEnergyRegenerationComponent))					{						var EnergyRegenerationComponentcomponent = entityOfEnergyRegenerationComponent.GetOrAddComponent<EnergyRegenerationComponent>();						EnergyRegenerationComponentresolver.Out(ref EnergyRegenerationComponentcomponent);					}					break;				case -589508998:					var HealthComponentresolver = MessagePackSerializer.Deserialize<HealthComponentResolver>(dataContainerForResolving.Data);					if (EntityManager.TryGetEntityByID(dataContainerForResolving.EntityGuid, out var entityOfHealthComponent))					{						var HealthComponentcomponent = entityOfHealthComponent.GetOrAddComponent<HealthComponent>();						HealthComponentresolver.Out(ref HealthComponentcomponent);					}					break;				case -1284981806:					var CooldownComponentresolver = MessagePackSerializer.Deserialize<CooldownComponentResolver>(dataContainerForResolving.Data);					if (EntityManager.TryGetEntityByID(dataContainerForResolving.EntityGuid, out var entityOfCooldownComponent))					{						var CooldownComponentcomponent = entityOfCooldownComponent.GetOrAddComponent<CooldownComponent>();						CooldownComponentresolver.Out(ref CooldownComponentcomponent);					}					break;				case -2145542698:					var SpeedComponentresolver = MessagePackSerializer.Deserialize<SpeedComponentResolver>(dataContainerForResolving.Data);					if (EntityManager.TryGetEntityByID(dataContainerForResolving.EntityGuid, out var entityOfSpeedComponent))					{						var SpeedComponentcomponent = entityOfSpeedComponent.GetOrAddComponent<SpeedComponent>();						SpeedComponentresolver.Out(ref SpeedComponentcomponent);					}					break;				case -571092005:					var EnergyComponentresolver = MessagePackSerializer.Deserialize<EnergyComponentResolver>(dataContainerForResolving.Data);					if (EntityManager.TryGetEntityByID(dataContainerForResolving.EntityGuid, out var entityOfEnergyComponent))					{						var EnergyComponentcomponent = entityOfEnergyComponent.GetOrAddComponent<EnergyComponent>();						EnergyComponentresolver.Out(ref EnergyComponentcomponent);					}					break;				case 956328563:					var TestComponentresolver = MessagePackSerializer.Deserialize<TestComponentResolver>(dataContainerForResolving.Data);					if (EntityManager.TryGetEntityByID(dataContainerForResolving.EntityGuid, out var entityOfTestComponent))					{						var TestComponentcomponent = entityOfTestComponent.GetOrAddComponent<TestComponent>();						TestComponentresolver.Out(ref TestComponentcomponent);					}					break;				case 2004170910:					var TestWorldSingleComponentresolver = MessagePackSerializer.Deserialize<TestWorldSingleComponentResolver>(dataContainerForResolving.Data);					if (EntityManager.TryGetEntityByID(dataContainerForResolving.EntityGuid, out var entityOfTestWorldSingleComponent))					{						var TestWorldSingleComponentcomponent = entityOfTestWorldSingleComponent.GetOrAddComponent<TestWorldSingleComponent>();						TestWorldSingleComponentresolver.Out(ref TestWorldSingleComponentcomponent);					}					break;				case -623718192:					var DamageComponentresolver = MessagePackSerializer.Deserialize<DamageComponentResolver>(dataContainerForResolving.Data);					if (EntityManager.TryGetEntityByID(dataContainerForResolving.EntityGuid, out var entityOfDamageComponent))					{						var DamageComponentcomponent = entityOfDamageComponent.GetOrAddComponent<DamageComponent>();						DamageComponentresolver.Out(ref DamageComponentcomponent);					}					break;			}		}		private IComponent GetComponentFromContainerFuncRealisation(ResolverDataContainer resolverDataContainer)		{			switch (resolverDataContainer.TypeHashCode)			{				case -950198728:					var AnimatorStateComponentnew = new AnimatorStateComponent();					var AnimatorStateComponentdata = MessagePackSerializer.Deserialize<AnimatorStateComponentResolver>(resolverDataContainer.Data);					AnimatorStateComponentdata.Out(ref AnimatorStateComponentnew);					return AnimatorStateComponentnew;				case -1874747970:					var VisualFXHolderComponentnew = new VisualFXHolderComponent();					var VisualFXHolderComponentdata = MessagePackSerializer.Deserialize<VisualFXHolderComponentResolver>(resolverDataContainer.Data);					VisualFXHolderComponentdata.Out(ref VisualFXHolderComponentnew);					return VisualFXHolderComponentnew;				case -1856633313:					var PassiveAbilityTagnew = new PassiveAbilityTag();					var PassiveAbilityTagdata = MessagePackSerializer.Deserialize<PassiveAbilityTagResolver>(resolverDataContainer.Data);					PassiveAbilityTagdata.Out(ref PassiveAbilityTagnew);					return PassiveAbilityTagnew;				case 815927063:					var TestReactComponentnew = new TestReactComponent();					var TestReactComponentdata = MessagePackSerializer.Deserialize<TestReactComponentResolver>(resolverDataContainer.Data);					TestReactComponentdata.Out(ref TestReactComponentnew);					return TestReactComponentnew;				case 1587816967:					var SoundVolumeComponentnew = new SoundVolumeComponent();					var SoundVolumeComponentdata = MessagePackSerializer.Deserialize<SoundVolumeComponentResolver>(resolverDataContainer.Data);					SoundVolumeComponentdata.Out(ref SoundVolumeComponentnew);					return SoundVolumeComponentnew;				case -1064941338:					var PredicatesComponentnew = new PredicatesComponent();					var PredicatesComponentdata = MessagePackSerializer.Deserialize<PredicatesComponentResolver>(resolverDataContainer.Data);					PredicatesComponentdata.Out(ref PredicatesComponentnew);					return PredicatesComponentnew;				case 1204197613:					var InputOverUIComponentnew = new InputOverUIComponent();					var InputOverUIComponentdata = MessagePackSerializer.Deserialize<InputOverUIComponentResolver>(resolverDataContainer.Data);					InputOverUIComponentdata.Out(ref InputOverUIComponentnew);					return InputOverUIComponentnew;				case -88497250:					var AfterLifeTagComponentnew = new AfterLifeTagComponent();					var AfterLifeTagComponentdata = MessagePackSerializer.Deserialize<AfterLifeTagComponentResolver>(resolverDataContainer.Data);					AfterLifeTagComponentdata.Out(ref AfterLifeTagComponentnew);					return AfterLifeTagComponentnew;				case 53484848:					var AfterLifeCompleteTagComponentnew = new AfterLifeCompleteTagComponent();					var AfterLifeCompleteTagComponentdata = MessagePackSerializer.Deserialize<AfterLifeCompleteTagComponentResolver>(resolverDataContainer.Data);					AfterLifeCompleteTagComponentdata.Out(ref AfterLifeCompleteTagComponentnew);					return AfterLifeCompleteTagComponentnew;				case -803643700:					var UpgradeWindowComponentnew = new UpgradeWindowComponent();					var UpgradeWindowComponentdata = MessagePackSerializer.Deserialize<UpgradeWindowComponentResolver>(resolverDataContainer.Data);					UpgradeWindowComponentdata.Out(ref UpgradeWindowComponentnew);					return UpgradeWindowComponentnew;				case -1416715012:					var EnemyTagComponentnew = new EnemyTagComponent();					var EnemyTagComponentdata = MessagePackSerializer.Deserialize<EnemyTagComponentResolver>(resolverDataContainer.Data);					EnemyTagComponentdata.Out(ref EnemyTagComponentnew);					return EnemyTagComponentnew;				case 407906688:					var SpheresControllerTagComponentnew = new SpheresControllerTagComponent();					var SpheresControllerTagComponentdata = MessagePackSerializer.Deserialize<SpheresControllerTagComponentResolver>(resolverDataContainer.Data);					SpheresControllerTagComponentdata.Out(ref SpheresControllerTagComponentnew);					return SpheresControllerTagComponentnew;				case 1922359605:					var HealthBarsManagerComponentnew = new HealthBarsManagerComponent();					var HealthBarsManagerComponentdata = MessagePackSerializer.Deserialize<HealthBarsManagerComponentResolver>(resolverDataContainer.Data);					HealthBarsManagerComponentdata.Out(ref HealthBarsManagerComponentnew);					return HealthBarsManagerComponentnew;				case -1002177873:					var PlayerUpgradeComponentnew = new PlayerUpgradeComponent();					var PlayerUpgradeComponentdata = MessagePackSerializer.Deserialize<PlayerUpgradeComponentResolver>(resolverDataContainer.Data);					PlayerUpgradeComponentdata.Out(ref PlayerUpgradeComponentnew);					return PlayerUpgradeComponentnew;				case -1176016825:					var InvincibleComponentnew = new InvincibleComponent();					var InvincibleComponentdata = MessagePackSerializer.Deserialize<InvincibleComponentResolver>(resolverDataContainer.Data);					InvincibleComponentdata.Out(ref InvincibleComponentnew);					return InvincibleComponentnew;				case 867896372:					var WaitStateComponentnew = new WaitStateComponent();					var WaitStateComponentdata = MessagePackSerializer.Deserialize<WaitStateComponentResolver>(resolverDataContainer.Data);					WaitStateComponentdata.Out(ref WaitStateComponentnew);					return WaitStateComponentnew;				case -1029564515:					var ViewReferenceComponentnew = new ViewReferenceComponent();					var ViewReferenceComponentdata = MessagePackSerializer.Deserialize<ViewReferenceComponentResolver>(resolverDataContainer.Data);					ViewReferenceComponentdata.Out(ref ViewReferenceComponentnew);					return ViewReferenceComponentnew;				case -1627736277:					var CountersHolderComponentnew = new CountersHolderComponent();					var CountersHolderComponentdata = MessagePackSerializer.Deserialize<CountersHolderComponentResolver>(resolverDataContainer.Data);					CountersHolderComponentdata.Out(ref CountersHolderComponentnew);					return CountersHolderComponentnew;				case 313621202:					var AbilityOwnerComponentnew = new AbilityOwnerComponent();					var AbilityOwnerComponentdata = MessagePackSerializer.Deserialize<AbilityOwnerComponentResolver>(resolverDataContainer.Data);					AbilityOwnerComponentdata.Out(ref AbilityOwnerComponentnew);					return AbilityOwnerComponentnew;				case 671481967:					var NeedHpBarComponentnew = new NeedHpBarComponent();					var NeedHpBarComponentdata = MessagePackSerializer.Deserialize<NeedHpBarComponentResolver>(resolverDataContainer.Data);					NeedHpBarComponentdata.Out(ref NeedHpBarComponentnew);					return NeedHpBarComponentnew;				case 203333459:					var LevelsHolderComponentnew = new LevelsHolderComponent();					var LevelsHolderComponentdata = MessagePackSerializer.Deserialize<LevelsHolderComponentResolver>(resolverDataContainer.Data);					LevelsHolderComponentdata.Out(ref LevelsHolderComponentnew);					return LevelsHolderComponentnew;				case -1258897312:					var SlowdownComponentnew = new SlowdownComponent();					var SlowdownComponentdata = MessagePackSerializer.Deserialize<SlowdownComponentResolver>(resolverDataContainer.Data);					SlowdownComponentdata.Out(ref SlowdownComponentnew);					return SlowdownComponentnew;				case 1640309440:					var HealAbilityComponentnew = new HealAbilityComponent();					var HealAbilityComponentdata = MessagePackSerializer.Deserialize<HealAbilityComponentResolver>(resolverDataContainer.Data);					HealAbilityComponentdata.Out(ref HealAbilityComponentnew);					return HealAbilityComponentnew;				case -982956555:					var CollisionsComponentnew = new CollisionsComponent();					var CollisionsComponentdata = MessagePackSerializer.Deserialize<CollisionsComponentResolver>(resolverDataContainer.Data);					CollisionsComponentdata.Out(ref CollisionsComponentnew);					return CollisionsComponentnew;				case 1718416741:					var VisualInActionTagComponentnew = new VisualInActionTagComponent();					var VisualInActionTagComponentdata = MessagePackSerializer.Deserialize<VisualInActionTagComponentResolver>(resolverDataContainer.Data);					VisualInActionTagComponentdata.Out(ref VisualInActionTagComponentnew);					return VisualInActionTagComponentnew;				case 1672267938:					var MainCharacterTagComponentnew = new MainCharacterTagComponent();					var MainCharacterTagComponentdata = MessagePackSerializer.Deserialize<MainCharacterTagComponentResolver>(resolverDataContainer.Data);					MainCharacterTagComponentdata.Out(ref MainCharacterTagComponentnew);					return MainCharacterTagComponentnew;				case -1740624067:					var ChoosingPushDirectionSphereAbilityComponentnew = new ChoosingPushDirectionSphereAbilityComponent();					var ChoosingPushDirectionSphereAbilityComponentdata = MessagePackSerializer.Deserialize<ChoosingPushDirectionSphereAbilityComponentResolver>(resolverDataContainer.Data);					ChoosingPushDirectionSphereAbilityComponentdata.Out(ref ChoosingPushDirectionSphereAbilityComponentnew);					return ChoosingPushDirectionSphereAbilityComponentnew;				case -1144719428:					var MainCanvasTagComponentnew = new MainCanvasTagComponent();					var MainCanvasTagComponentdata = MessagePackSerializer.Deserialize<MainCanvasTagComponentResolver>(resolverDataContainer.Data);					MainCanvasTagComponentdata.Out(ref MainCanvasTagComponentnew);					return MainCanvasTagComponentnew;				case -1191206187:					var AdditionalCanvasTagComponentnew = new AdditionalCanvasTagComponent();					var AdditionalCanvasTagComponentdata = MessagePackSerializer.Deserialize<AdditionalCanvasTagComponentResolver>(resolverDataContainer.Data);					AdditionalCanvasTagComponentdata.Out(ref AdditionalCanvasTagComponentnew);					return AdditionalCanvasTagComponentnew;				case -1325613894:					var CheckTwoComponentnew = new CheckTwoComponent();					var CheckTwoComponentdata = MessagePackSerializer.Deserialize<CheckTwoComponentResolver>(resolverDataContainer.Data);					CheckTwoComponentdata.Out(ref CheckTwoComponentnew);					return CheckTwoComponentnew;				case -803245354:					var ActorProviderComponentnew = new ActorProviderComponent();					var ActorProviderComponentdata = MessagePackSerializer.Deserialize<ActorProviderComponentResolver>(resolverDataContainer.Data);					ActorProviderComponentdata.Out(ref ActorProviderComponentnew);					return ActorProviderComponentnew;				case 1143262242:					var UntilSuccessStrategyNodeComponentnew = new UntilSuccessStrategyNodeComponent();					var UntilSuccessStrategyNodeComponentdata = MessagePackSerializer.Deserialize<UntilSuccessStrategyNodeComponentResolver>(resolverDataContainer.Data);					UntilSuccessStrategyNodeComponentdata.Out(ref UntilSuccessStrategyNodeComponentnew);					return UntilSuccessStrategyNodeComponentnew;				case -1006438290:					var SpeedUpSphereComponentnew = new SpeedUpSphereComponent();					var SpeedUpSphereComponentdata = MessagePackSerializer.Deserialize<SpeedUpSphereComponentResolver>(resolverDataContainer.Data);					SpeedUpSphereComponentdata.Out(ref SpeedUpSphereComponentnew);					return SpeedUpSphereComponentnew;				case -1981611680:					var PegasusMovementComponentnew = new PegasusMovementComponent();					var PegasusMovementComponentdata = MessagePackSerializer.Deserialize<PegasusMovementComponentResolver>(resolverDataContainer.Data);					PegasusMovementComponentdata.Out(ref PegasusMovementComponentnew);					return PegasusMovementComponentnew;				case 1354058828:					var PoolableTagComponentnew = new PoolableTagComponent();					var PoolableTagComponentdata = MessagePackSerializer.Deserialize<PoolableTagComponentResolver>(resolverDataContainer.Data);					PoolableTagComponentdata.Out(ref PoolableTagComponentnew);					return PoolableTagComponentnew;				case -668621305:					var CachedEntitiesGlobalHolderComponentnew = new CachedEntitiesGlobalHolderComponent();					var CachedEntitiesGlobalHolderComponentdata = MessagePackSerializer.Deserialize<CachedEntitiesGlobalHolderComponentResolver>(resolverDataContainer.Data);					CachedEntitiesGlobalHolderComponentdata.Out(ref CachedEntitiesGlobalHolderComponentnew);					return CachedEntitiesGlobalHolderComponentnew;				case 1878456296:					var AbilityPredicateComponentnew = new AbilityPredicateComponent();					var AbilityPredicateComponentdata = MessagePackSerializer.Deserialize<AbilityPredicateComponentResolver>(resolverDataContainer.Data);					AbilityPredicateComponentdata.Out(ref AbilityPredicateComponentnew);					return AbilityPredicateComponentnew;				case -1431715806:					var TargetPositionComponentnew = new TargetPositionComponent();					var TargetPositionComponentdata = MessagePackSerializer.Deserialize<TargetPositionComponentResolver>(resolverDataContainer.Data);					TargetPositionComponentdata.Out(ref TargetPositionComponentnew);					return TargetPositionComponentnew;				case -619720211:					var SphereComponentnew = new SphereComponent();					var SphereComponentdata = MessagePackSerializer.Deserialize<SphereComponentResolver>(resolverDataContainer.Data);					SphereComponentdata.Out(ref SphereComponentnew);					return SphereComponentnew;				case 1534411424:					var PlayerLevelComponentnew = new PlayerLevelComponent();					var PlayerLevelComponentdata = MessagePackSerializer.Deserialize<PlayerLevelComponentResolver>(resolverDataContainer.Data);					PlayerLevelComponentdata.Out(ref PlayerLevelComponentnew);					return PlayerLevelComponentnew;				case 929129980:					var IconComponentnew = new IconComponent();					var IconComponentdata = MessagePackSerializer.Deserialize<IconComponentResolver>(resolverDataContainer.Data);					IconComponentdata.Out(ref IconComponentnew);					return IconComponentnew;				case -2124047058:					var UITagComponentnew = new UITagComponent();					var UITagComponentdata = MessagePackSerializer.Deserialize<UITagComponentResolver>(resolverDataContainer.Data);					UITagComponentdata.Out(ref UITagComponentnew);					return UITagComponentnew;				case -1422875746:					var StickTagComponentnew = new StickTagComponent();					var StickTagComponentdata = MessagePackSerializer.Deserialize<StickTagComponentResolver>(resolverDataContainer.Data);					StickTagComponentdata.Out(ref StickTagComponentnew);					return StickTagComponentnew;				case -1965185654:					var ScenarioAnimationComponentnew = new ScenarioAnimationComponent();					var ScenarioAnimationComponentdata = MessagePackSerializer.Deserialize<ScenarioAnimationComponentResolver>(resolverDataContainer.Data);					ScenarioAnimationComponentdata.Out(ref ScenarioAnimationComponentnew);					return ScenarioAnimationComponentnew;				case -1056876887:					var SpawnPointComponentnew = new SpawnPointComponent();					var SpawnPointComponentdata = MessagePackSerializer.Deserialize<SpawnPointComponentResolver>(resolverDataContainer.Data);					SpawnPointComponentdata.Out(ref SpawnPointComponentnew);					return SpawnPointComponentnew;				case -2117687604:					var OverrideAnimatorComponentnew = new OverrideAnimatorComponent();					var OverrideAnimatorComponentdata = MessagePackSerializer.Deserialize<OverrideAnimatorComponentResolver>(resolverDataContainer.Data);					OverrideAnimatorComponentdata.Out(ref OverrideAnimatorComponentnew);					return OverrideAnimatorComponentnew;				case 819793506:					var StateInfoComponentnew = new StateInfoComponent();					var StateInfoComponentdata = MessagePackSerializer.Deserialize<StateInfoComponentResolver>(resolverDataContainer.Data);					StateInfoComponentdata.Out(ref StateInfoComponentnew);					return StateInfoComponentnew;				case 838666118:					var GameStateComponentnew = new GameStateComponent();					var GameStateComponentdata = MessagePackSerializer.Deserialize<GameStateComponentResolver>(resolverDataContainer.Data);					GameStateComponentdata.Out(ref GameStateComponentnew);					return GameStateComponentnew;				case 1656499746:					var ViewReferenceGameObjectComponentnew = new ViewReferenceGameObjectComponent();					var ViewReferenceGameObjectComponentdata = MessagePackSerializer.Deserialize<ViewReferenceGameObjectComponentResolver>(resolverDataContainer.Data);					ViewReferenceGameObjectComponentdata.Out(ref ViewReferenceGameObjectComponentnew);					return ViewReferenceGameObjectComponentnew;				case 42315994:					var ViewDestructionDelayedComponentnew = new ViewDestructionDelayedComponent();					var ViewDestructionDelayedComponentdata = MessagePackSerializer.Deserialize<ViewDestructionDelayedComponentResolver>(resolverDataContainer.Data);					ViewDestructionDelayedComponentdata.Out(ref ViewDestructionDelayedComponentnew);					return ViewDestructionDelayedComponentnew;				case -2094772963:					var UIPriorityIndexComponentnew = new UIPriorityIndexComponent();					var UIPriorityIndexComponentdata = MessagePackSerializer.Deserialize<UIPriorityIndexComponentResolver>(resolverDataContainer.Data);					UIPriorityIndexComponentdata.Out(ref UIPriorityIndexComponentnew);					return UIPriorityIndexComponentnew;				case -1162002111:					var UIGroupTagComponentnew = new UIGroupTagComponent();					var UIGroupTagComponentdata = MessagePackSerializer.Deserialize<UIGroupTagComponentResolver>(resolverDataContainer.Data);					UIGroupTagComponentdata.Out(ref UIGroupTagComponentnew);					return UIGroupTagComponentnew;				case 265593849:					var TimeProviderComponentnew = new TimeProviderComponent();					var TimeProviderComponentdata = MessagePackSerializer.Deserialize<TimeProviderComponentResolver>(resolverDataContainer.Data);					TimeProviderComponentdata.Out(ref TimeProviderComponentnew);					return TimeProviderComponentnew;				case -1713719609:					var TestSerializationComponentnew = new TestSerializationComponent();					var TestSerializationComponentdata = MessagePackSerializer.Deserialize<TestSerializationComponentResolver>(resolverDataContainer.Data);					TestSerializationComponentdata.Out(ref TestSerializationComponentnew);					return TestSerializationComponentnew;				case -142928435:					var ActorContainerIDnew = new ActorContainerID();					var ActorContainerIDdata = MessagePackSerializer.Deserialize<ActorContainerIDResolver>(resolverDataContainer.Data);					ActorContainerIDdata.Out(ref ActorContainerIDnew);					return ActorContainerIDnew;				case 745147359:					var TimeScaleComponentnew = new TimeScaleComponent();					var TimeScaleComponentdata = MessagePackSerializer.Deserialize<TimeScaleComponentResolver>(resolverDataContainer.Data);					TimeScaleComponentdata.Out(ref TimeScaleComponentnew);					return TimeScaleComponentnew;				case 208510666:					var ScenesHolderComponentnew = new ScenesHolderComponent();					var ScenesHolderComponentdata = MessagePackSerializer.Deserialize<ScenesHolderComponentResolver>(resolverDataContainer.Data);					ScenesHolderComponentdata.Out(ref ScenesHolderComponentnew);					return ScenesHolderComponentnew;				case -1675925374:					var ExplodeSpheresAbilityComponentnew = new ExplodeSpheresAbilityComponent();					var ExplodeSpheresAbilityComponentdata = MessagePackSerializer.Deserialize<ExplodeSpheresAbilityComponentResolver>(resolverDataContainer.Data);					ExplodeSpheresAbilityComponentdata.Out(ref ExplodeSpheresAbilityComponentnew);					return ExplodeSpheresAbilityComponentnew;				case 1782176358:					var SetupAfterViewTagComponentnew = new SetupAfterViewTagComponent();					var SetupAfterViewTagComponentdata = MessagePackSerializer.Deserialize<SetupAfterViewTagComponentResolver>(resolverDataContainer.Data);					SetupAfterViewTagComponentdata.Out(ref SetupAfterViewTagComponentnew);					return SetupAfterViewTagComponentnew;				case 2041590961:					var AbilitiesHolderComponentnew = new AbilitiesHolderComponent();					var AbilitiesHolderComponentdata = MessagePackSerializer.Deserialize<AbilitiesHolderComponentResolver>(resolverDataContainer.Data);					AbilitiesHolderComponentdata.Out(ref AbilitiesHolderComponentnew);					return AbilitiesHolderComponentnew;				case -1150856501:					var AbilityTagComponentnew = new AbilityTagComponent();					var AbilityTagComponentdata = MessagePackSerializer.Deserialize<AbilityTagComponentResolver>(resolverDataContainer.Data);					AbilityTagComponentdata.Out(ref AbilityTagComponentnew);					return AbilityTagComponentnew;				case -952149029:					var AIStrategyComponentnew = new AIStrategyComponent();					var AIStrategyComponentdata = MessagePackSerializer.Deserialize<AIStrategyComponentResolver>(resolverDataContainer.Data);					AIStrategyComponentdata.Out(ref AIStrategyComponentnew);					return AIStrategyComponentnew;				case -1167233499:					var MainCameraComponentnew = new MainCameraComponent();					var MainCameraComponentdata = MessagePackSerializer.Deserialize<MainCameraComponentResolver>(resolverDataContainer.Data);					MainCameraComponentdata.Out(ref MainCameraComponentnew);					return MainCameraComponentnew;				case -575221824:					var RadiusComponentnew = new RadiusComponent();					var RadiusComponentdata = MessagePackSerializer.Deserialize<RadiusComponentResolver>(resolverDataContainer.Data);					RadiusComponentdata.Out(ref RadiusComponentnew);					return RadiusComponentnew;				case 1046176786:					var AnimationCheckOutsHolderComponentnew = new AnimationCheckOutsHolderComponent();					var AnimationCheckOutsHolderComponentdata = MessagePackSerializer.Deserialize<AnimationCheckOutsHolderComponentResolver>(resolverDataContainer.Data);					AnimationCheckOutsHolderComponentdata.Out(ref AnimationCheckOutsHolderComponentnew);					return AnimationCheckOutsHolderComponentnew;				case 680066094:					var IsDeadTagComponentnew = new IsDeadTagComponent();					var IsDeadTagComponentdata = MessagePackSerializer.Deserialize<IsDeadTagComponentResolver>(resolverDataContainer.Data);					IsDeadTagComponentdata.Out(ref IsDeadTagComponentnew);					return IsDeadTagComponentnew;				case 1960044224:					var CardsGlobalHolderComponentnew = new CardsGlobalHolderComponent();					var CardsGlobalHolderComponentdata = MessagePackSerializer.Deserialize<CardsGlobalHolderComponentResolver>(resolverDataContainer.Data);					CardsGlobalHolderComponentdata.Out(ref CardsGlobalHolderComponentnew);					return CardsGlobalHolderComponentnew;				case -1548506885:					var SoftCurrencyRewardVisualConfigComponentnew = new SoftCurrencyRewardVisualConfigComponent();					var SoftCurrencyRewardVisualConfigComponentdata = MessagePackSerializer.Deserialize<SoftCurrencyRewardVisualConfigComponentResolver>(resolverDataContainer.Data);					SoftCurrencyRewardVisualConfigComponentdata.Out(ref SoftCurrencyRewardVisualConfigComponentnew);					return SoftCurrencyRewardVisualConfigComponentnew;				case 760610747:					var PlayerTagComponentnew = new PlayerTagComponent();					var PlayerTagComponentdata = MessagePackSerializer.Deserialize<PlayerTagComponentResolver>(resolverDataContainer.Data);					PlayerTagComponentdata.Out(ref PlayerTagComponentnew);					return PlayerTagComponentnew;				case -1330009829:					var TestInitComponentnew = new TestInitComponent();					var TestInitComponentdata = MessagePackSerializer.Deserialize<TestInitComponentResolver>(resolverDataContainer.Data);					TestInitComponentdata.Out(ref TestInitComponentnew);					return TestInitComponentnew;				case -1425063609:					var UnityTransformComponentnew = new UnityTransformComponent();					var UnityTransformComponentdata = MessagePackSerializer.Deserialize<UnityTransformComponentResolver>(resolverDataContainer.Data);					UnityTransformComponentdata.Out(ref UnityTransformComponentnew);					return UnityTransformComponentnew;				case -1206519595:					var UnityRectTransformComponentnew = new UnityRectTransformComponent();					var UnityRectTransformComponentdata = MessagePackSerializer.Deserialize<UnityRectTransformComponentResolver>(resolverDataContainer.Data);					UnityRectTransformComponentdata.Out(ref UnityRectTransformComponentnew);					return UnityRectTransformComponentnew;				case 1908410989:					var UIViewReferenceComponentnew = new UIViewReferenceComponent();					var UIViewReferenceComponentdata = MessagePackSerializer.Deserialize<UIViewReferenceComponentResolver>(resolverDataContainer.Data);					UIViewReferenceComponentdata.Out(ref UIViewReferenceComponentnew);					return UIViewReferenceComponentnew;				case 888932549:					var TransformComponentnew = new TransformComponent();					var TransformComponentdata = MessagePackSerializer.Deserialize<TransformComponentResolver>(resolverDataContainer.Data);					TransformComponentdata.Out(ref TransformComponentnew);					return TransformComponentnew;				case -1535532641:					var PoolableViewsProviderComponentnew = new PoolableViewsProviderComponent();					var PoolableViewsProviderComponentdata = MessagePackSerializer.Deserialize<PoolableViewsProviderComponentResolver>(resolverDataContainer.Data);					PoolableViewsProviderComponentdata.Out(ref PoolableViewsProviderComponentnew);					return PoolableViewsProviderComponentnew;				case 290577522:					var OnApplicationQuitTagComponentnew = new OnApplicationQuitTagComponent();					var OnApplicationQuitTagComponentdata = MessagePackSerializer.Deserialize<OnApplicationQuitTagComponentResolver>(resolverDataContainer.Data);					OnApplicationQuitTagComponentdata.Out(ref OnApplicationQuitTagComponentnew);					return OnApplicationQuitTagComponentnew;				case 1908646573:					var NetworkEntityTagComponentnew = new NetworkEntityTagComponent();					var NetworkEntityTagComponentdata = MessagePackSerializer.Deserialize<NetworkEntityTagComponentResolver>(resolverDataContainer.Data);					NetworkEntityTagComponentdata.Out(ref NetworkEntityTagComponentnew);					return NetworkEntityTagComponentnew;				case 1004631539:					var ItemTagComponentnew = new ItemTagComponent();					var ItemTagComponentdata = MessagePackSerializer.Deserialize<ItemTagComponentResolver>(resolverDataContainer.Data);					ItemTagComponentdata.Out(ref ItemTagComponentnew);					return ItemTagComponentnew;				case 1776997060:					var InputListenerTagComponentnew = new InputListenerTagComponent();					var InputListenerTagComponentdata = MessagePackSerializer.Deserialize<InputListenerTagComponentResolver>(resolverDataContainer.Data);					InputListenerTagComponentdata.Out(ref InputListenerTagComponentnew);					return InputListenerTagComponentnew;				case -669669709:					var StrategySideExecuteComponentnew = new StrategySideExecuteComponent();					var StrategySideExecuteComponentdata = MessagePackSerializer.Deserialize<StrategySideExecuteComponentResolver>(resolverDataContainer.Data);					StrategySideExecuteComponentdata.Out(ref StrategySideExecuteComponentnew);					return StrategySideExecuteComponentnew;				case -988064901:					var AppVersionComponentnew = new AppVersionComponent();					var AppVersionComponentdata = MessagePackSerializer.Deserialize<AppVersionComponentResolver>(resolverDataContainer.Data);					AppVersionComponentdata.Out(ref AppVersionComponentnew);					return AppVersionComponentnew;				case 1487202547:					var SpeedDependsOnTimeScaleComponentnew = new SpeedDependsOnTimeScaleComponent();					var SpeedDependsOnTimeScaleComponentdata = MessagePackSerializer.Deserialize<SpeedDependsOnTimeScaleComponentResolver>(resolverDataContainer.Data);					SpeedDependsOnTimeScaleComponentdata.Out(ref SpeedDependsOnTimeScaleComponentnew);					return SpeedDependsOnTimeScaleComponentnew;				case 755826610:					var CenterTagComponentnew = new CenterTagComponent();					var CenterTagComponentdata = MessagePackSerializer.Deserialize<CenterTagComponentResolver>(resolverDataContainer.Data);					CenterTagComponentdata.Out(ref CenterTagComponentnew);					return CenterTagComponentnew;				case 1005024681:					var CardTagComponentnew = new CardTagComponent();					var CardTagComponentdata = MessagePackSerializer.Deserialize<CardTagComponentResolver>(resolverDataContainer.Data);					CardTagComponentdata.Out(ref CardTagComponentnew);					return CardTagComponentnew;				case 7120005:					var ViewReadyTagComponentnew = new ViewReadyTagComponent();					var ViewReadyTagComponentdata = MessagePackSerializer.Deserialize<ViewReadyTagComponentResolver>(resolverDataContainer.Data);					ViewReadyTagComponentdata.Out(ref ViewReadyTagComponentnew);					return ViewReadyTagComponentnew;				case -1299131970:					var SphereCastContextnew = new SphereCastContext();					var SphereCastContextdata = MessagePackSerializer.Deserialize<SphereCastContextResolver>(resolverDataContainer.Data);					SphereCastContextdata.Out(ref SphereCastContextnew);					return SphereCastContextnew;				case 760681168:					var StateDataComponentnew = new StateDataComponent();					var StateDataComponentdata = MessagePackSerializer.Deserialize<StateDataComponentResolver>(resolverDataContainer.Data);					StateDataComponentdata.Out(ref StateDataComponentnew);					return StateDataComponentnew;				case -1167076999:					var InitOnAddAbilityTagComponentnew = new InitOnAddAbilityTagComponent();					var InitOnAddAbilityTagComponentdata = MessagePackSerializer.Deserialize<InitOnAddAbilityTagComponentResolver>(resolverDataContainer.Data);					InitOnAddAbilityTagComponentdata.Out(ref InitOnAddAbilityTagComponentnew);					return InitOnAddAbilityTagComponentnew;				case 274782965:					var AdditionalAbilityIndexComponentnew = new AdditionalAbilityIndexComponent();					var AdditionalAbilityIndexComponentdata = MessagePackSerializer.Deserialize<AdditionalAbilityIndexComponentResolver>(resolverDataContainer.Data);					AdditionalAbilityIndexComponentdata.Out(ref AdditionalAbilityIndexComponentnew);					return AdditionalAbilityIndexComponentnew;				case 117603503:					var NavMeshAgentComponentnew = new NavMeshAgentComponent();					var NavMeshAgentComponentdata = MessagePackSerializer.Deserialize<NavMeshAgentComponentResolver>(resolverDataContainer.Data);					NavMeshAgentComponentdata.Out(ref NavMeshAgentComponentnew);					return NavMeshAgentComponentnew;				case 369850288:					var InputActionsComponentnew = new InputActionsComponent();					var InputActionsComponentdata = MessagePackSerializer.Deserialize<InputActionsComponentResolver>(resolverDataContainer.Data);					InputActionsComponentdata.Out(ref InputActionsComponentnew);					return InputActionsComponentnew;				case -996906941:					var IgnoreReferenceContainerTagComponentnew = new IgnoreReferenceContainerTagComponent();					var IgnoreReferenceContainerTagComponentdata = MessagePackSerializer.Deserialize<IgnoreReferenceContainerTagComponentResolver>(resolverDataContainer.Data);					IgnoreReferenceContainerTagComponentdata.Out(ref IgnoreReferenceContainerTagComponentnew);					return IgnoreReferenceContainerTagComponentnew;				case -100950956:					var GameLogicTagComponentnew = new GameLogicTagComponent();					var GameLogicTagComponentdata = MessagePackSerializer.Deserialize<GameLogicTagComponentResolver>(resolverDataContainer.Data);					GameLogicTagComponentdata.Out(ref GameLogicTagComponentnew);					return GameLogicTagComponentnew;				case -1378915465:					var CacheCounterValuesComponentnew = new CacheCounterValuesComponent();					var CacheCounterValuesComponentdata = MessagePackSerializer.Deserialize<CacheCounterValuesComponentResolver>(resolverDataContainer.Data);					CacheCounterValuesComponentdata.Out(ref CacheCounterValuesComponentnew);					return CacheCounterValuesComponentnew;				case -822435144:					var LevelModifierHolderComponentnew = new LevelModifierHolderComponent();					var LevelModifierHolderComponentdata = MessagePackSerializer.Deserialize<LevelModifierHolderComponentResolver>(resolverDataContainer.Data);					LevelModifierHolderComponentdata.Out(ref LevelModifierHolderComponentnew);					return LevelModifierHolderComponentnew;				case -146694774:					var ShowHpBarTagComponentnew = new ShowHpBarTagComponent();					var ShowHpBarTagComponentdata = MessagePackSerializer.Deserialize<ShowHpBarTagComponentResolver>(resolverDataContainer.Data);					ShowHpBarTagComponentdata.Out(ref ShowHpBarTagComponentnew);					return ShowHpBarTagComponentnew;				case 1310216023:					var CustomHpBarComponentnew = new CustomHpBarComponent();					var CustomHpBarComponentdata = MessagePackSerializer.Deserialize<CustomHpBarComponentResolver>(resolverDataContainer.Data);					CustomHpBarComponentdata.Out(ref CustomHpBarComponentnew);					return CustomHpBarComponentnew;				case 2044779682:					var CharactersHolderComponentnew = new CharactersHolderComponent();					var CharactersHolderComponentdata = MessagePackSerializer.Deserialize<CharactersHolderComponentResolver>(resolverDataContainer.Data);					CharactersHolderComponentdata.Out(ref CharactersHolderComponentnew);					return CharactersHolderComponentnew;				case 766574714:					var UIBusyTagComponentnew = new UIBusyTagComponent();					var UIBusyTagComponentdata = MessagePackSerializer.Deserialize<UIBusyTagComponentResolver>(resolverDataContainer.Data);					UIBusyTagComponentdata.Out(ref UIBusyTagComponentnew);					return UIBusyTagComponentnew;				case 1989536467:					var OverlapSphereCastContextnew = new OverlapSphereCastContext();					var OverlapSphereCastContextdata = MessagePackSerializer.Deserialize<OverlapSphereCastContextResolver>(resolverDataContainer.Data);					OverlapSphereCastContextdata.Out(ref OverlapSphereCastContextnew);					return OverlapSphereCastContextnew;				case 387690372:					var StateContextComponentnew = new StateContextComponent();					var StateContextComponentdata = MessagePackSerializer.Deserialize<StateContextComponentResolver>(resolverDataContainer.Data);					StateContextComponentdata.Out(ref StateContextComponentnew);					return StateContextComponentnew;				case 369067176:					var SavePositionComponentnew = new SavePositionComponent();					var SavePositionComponentdata = MessagePackSerializer.Deserialize<SavePositionComponentResolver>(resolverDataContainer.Data);					SavePositionComponentdata.Out(ref SavePositionComponentnew);					return SavePositionComponentnew;				case -791405757:					var PushDirectionComponentnew = new PushDirectionComponent();					var PushDirectionComponentdata = MessagePackSerializer.Deserialize<PushDirectionComponentResolver>(resolverDataContainer.Data);					PushDirectionComponentdata.Out(ref PushDirectionComponentnew);					return PushDirectionComponentnew;				case -942979946:					var ActionsHolderComponentnew = new ActionsHolderComponent();					var ActionsHolderComponentdata = MessagePackSerializer.Deserialize<ActionsHolderComponentResolver>(resolverDataContainer.Data);					ActionsHolderComponentdata.Out(ref ActionsHolderComponentnew);					return ActionsHolderComponentnew;				case 2058998768:					var SoftCurrencyCounterMonoComponentProviderComponentnew = new SoftCurrencyCounterMonoComponentProviderComponent();					var SoftCurrencyCounterMonoComponentProviderComponentdata = MessagePackSerializer.Deserialize<SoftCurrencyCounterMonoComponentProviderComponentResolver>(resolverDataContainer.Data);					SoftCurrencyCounterMonoComponentProviderComponentdata.Out(ref SoftCurrencyCounterMonoComponentProviderComponentnew);					return SoftCurrencyCounterMonoComponentProviderComponentnew;				case -1908323267:					var RigidbodyProviderComponentnew = new RigidbodyProviderComponent();					var RigidbodyProviderComponentdata = MessagePackSerializer.Deserialize<RigidbodyProviderComponentResolver>(resolverDataContainer.Data);					RigidbodyProviderComponentdata.Out(ref RigidbodyProviderComponentnew);					return RigidbodyProviderComponentnew;				case -575427163:					var ActionsWithPredicateHolderComponentnew = new ActionsWithPredicateHolderComponent();					var ActionsWithPredicateHolderComponentdata = MessagePackSerializer.Deserialize<ActionsWithPredicateHolderComponentResolver>(resolverDataContainer.Data);					ActionsWithPredicateHolderComponentdata.Out(ref ActionsWithPredicateHolderComponentnew);					return ActionsWithPredicateHolderComponentnew;				case -2019244546:					var SoftValueCounterComponentnew = new SoftValueCounterComponent();					var SoftValueCounterComponentdata = MessagePackSerializer.Deserialize<SoftValueCounterComponentResolver>(resolverDataContainer.Data);					SoftValueCounterComponentdata.Out(ref SoftValueCounterComponentnew);					return SoftValueCounterComponentnew;				case -1252231869:					var EnergyRegenerationComponentnew = new EnergyRegenerationComponent();					var EnergyRegenerationComponentdata = MessagePackSerializer.Deserialize<EnergyRegenerationComponentResolver>(resolverDataContainer.Data);					EnergyRegenerationComponentdata.Out(ref EnergyRegenerationComponentnew);					return EnergyRegenerationComponentnew;				case -589508998:					var HealthComponentnew = new HealthComponent();					var HealthComponentdata = MessagePackSerializer.Deserialize<HealthComponentResolver>(resolverDataContainer.Data);					HealthComponentdata.Out(ref HealthComponentnew);					return HealthComponentnew;				case -1284981806:					var CooldownComponentnew = new CooldownComponent();					var CooldownComponentdata = MessagePackSerializer.Deserialize<CooldownComponentResolver>(resolverDataContainer.Data);					CooldownComponentdata.Out(ref CooldownComponentnew);					return CooldownComponentnew;				case -2145542698:					var SpeedComponentnew = new SpeedComponent();					var SpeedComponentdata = MessagePackSerializer.Deserialize<SpeedComponentResolver>(resolverDataContainer.Data);					SpeedComponentdata.Out(ref SpeedComponentnew);					return SpeedComponentnew;				case -571092005:					var EnergyComponentnew = new EnergyComponent();					var EnergyComponentdata = MessagePackSerializer.Deserialize<EnergyComponentResolver>(resolverDataContainer.Data);					EnergyComponentdata.Out(ref EnergyComponentnew);					return EnergyComponentnew;				case 956328563:					var TestComponentnew = new TestComponent();					var TestComponentdata = MessagePackSerializer.Deserialize<TestComponentResolver>(resolverDataContainer.Data);					TestComponentdata.Out(ref TestComponentnew);					return TestComponentnew;				case 2004170910:					var TestWorldSingleComponentnew = new TestWorldSingleComponent();					var TestWorldSingleComponentdata = MessagePackSerializer.Deserialize<TestWorldSingleComponentResolver>(resolverDataContainer.Data);					TestWorldSingleComponentdata.Out(ref TestWorldSingleComponentnew);					return TestWorldSingleComponentnew;				case -623718192:					var DamageComponentnew = new DamageComponent();					var DamageComponentdata = MessagePackSerializer.Deserialize<DamageComponentResolver>(resolverDataContainer.Data);					DamageComponentdata.Out(ref DamageComponentnew);					return DamageComponentnew;			}				return default;		}		private void ProcessResolverContainerRealisation(ref ResolverDataContainer dataContainerForResolving, ref Entity entity)		{			switch (dataContainerForResolving.TypeHashCode)			{				case -950198728:					var AnimatorStateComponentresolver = MessagePackSerializer.Deserialize<AnimatorStateComponentResolver>(dataContainerForResolving.Data);					var AnimatorStateComponentcomponent = entity.GetOrAddComponent<AnimatorStateComponent>();					AnimatorStateComponentresolver.Out(ref AnimatorStateComponentcomponent);					break;				case -1874747970:					var VisualFXHolderComponentresolver = MessagePackSerializer.Deserialize<VisualFXHolderComponentResolver>(dataContainerForResolving.Data);					var VisualFXHolderComponentcomponent = entity.GetOrAddComponent<VisualFXHolderComponent>();					VisualFXHolderComponentresolver.Out(ref VisualFXHolderComponentcomponent);					break;				case -1856633313:					var PassiveAbilityTagresolver = MessagePackSerializer.Deserialize<PassiveAbilityTagResolver>(dataContainerForResolving.Data);					var PassiveAbilityTagcomponent = entity.GetOrAddComponent<PassiveAbilityTag>();					PassiveAbilityTagresolver.Out(ref PassiveAbilityTagcomponent);					break;				case 815927063:					var TestReactComponentresolver = MessagePackSerializer.Deserialize<TestReactComponentResolver>(dataContainerForResolving.Data);					var TestReactComponentcomponent = entity.GetOrAddComponent<TestReactComponent>();					TestReactComponentresolver.Out(ref TestReactComponentcomponent);					break;				case 1587816967:					var SoundVolumeComponentresolver = MessagePackSerializer.Deserialize<SoundVolumeComponentResolver>(dataContainerForResolving.Data);					var SoundVolumeComponentcomponent = entity.GetOrAddComponent<SoundVolumeComponent>();					SoundVolumeComponentresolver.Out(ref SoundVolumeComponentcomponent);					break;				case -1064941338:					var PredicatesComponentresolver = MessagePackSerializer.Deserialize<PredicatesComponentResolver>(dataContainerForResolving.Data);					var PredicatesComponentcomponent = entity.GetOrAddComponent<PredicatesComponent>();					PredicatesComponentresolver.Out(ref PredicatesComponentcomponent);					break;				case 1204197613:					var InputOverUIComponentresolver = MessagePackSerializer.Deserialize<InputOverUIComponentResolver>(dataContainerForResolving.Data);					var InputOverUIComponentcomponent = entity.GetOrAddComponent<InputOverUIComponent>();					InputOverUIComponentresolver.Out(ref InputOverUIComponentcomponent);					break;				case -88497250:					var AfterLifeTagComponentresolver = MessagePackSerializer.Deserialize<AfterLifeTagComponentResolver>(dataContainerForResolving.Data);					var AfterLifeTagComponentcomponent = entity.GetOrAddComponent<AfterLifeTagComponent>();					AfterLifeTagComponentresolver.Out(ref AfterLifeTagComponentcomponent);					break;				case 53484848:					var AfterLifeCompleteTagComponentresolver = MessagePackSerializer.Deserialize<AfterLifeCompleteTagComponentResolver>(dataContainerForResolving.Data);					var AfterLifeCompleteTagComponentcomponent = entity.GetOrAddComponent<AfterLifeCompleteTagComponent>();					AfterLifeCompleteTagComponentresolver.Out(ref AfterLifeCompleteTagComponentcomponent);					break;				case -803643700:					var UpgradeWindowComponentresolver = MessagePackSerializer.Deserialize<UpgradeWindowComponentResolver>(dataContainerForResolving.Data);					var UpgradeWindowComponentcomponent = entity.GetOrAddComponent<UpgradeWindowComponent>();					UpgradeWindowComponentresolver.Out(ref UpgradeWindowComponentcomponent);					break;				case -1416715012:					var EnemyTagComponentresolver = MessagePackSerializer.Deserialize<EnemyTagComponentResolver>(dataContainerForResolving.Data);					var EnemyTagComponentcomponent = entity.GetOrAddComponent<EnemyTagComponent>();					EnemyTagComponentresolver.Out(ref EnemyTagComponentcomponent);					break;				case 407906688:					var SpheresControllerTagComponentresolver = MessagePackSerializer.Deserialize<SpheresControllerTagComponentResolver>(dataContainerForResolving.Data);					var SpheresControllerTagComponentcomponent = entity.GetOrAddComponent<SpheresControllerTagComponent>();					SpheresControllerTagComponentresolver.Out(ref SpheresControllerTagComponentcomponent);					break;				case 1922359605:					var HealthBarsManagerComponentresolver = MessagePackSerializer.Deserialize<HealthBarsManagerComponentResolver>(dataContainerForResolving.Data);					var HealthBarsManagerComponentcomponent = entity.GetOrAddComponent<HealthBarsManagerComponent>();					HealthBarsManagerComponentresolver.Out(ref HealthBarsManagerComponentcomponent);					break;				case -1002177873:					var PlayerUpgradeComponentresolver = MessagePackSerializer.Deserialize<PlayerUpgradeComponentResolver>(dataContainerForResolving.Data);					var PlayerUpgradeComponentcomponent = entity.GetOrAddComponent<PlayerUpgradeComponent>();					PlayerUpgradeComponentresolver.Out(ref PlayerUpgradeComponentcomponent);					break;				case -1176016825:					var InvincibleComponentresolver = MessagePackSerializer.Deserialize<InvincibleComponentResolver>(dataContainerForResolving.Data);					var InvincibleComponentcomponent = entity.GetOrAddComponent<InvincibleComponent>();					InvincibleComponentresolver.Out(ref InvincibleComponentcomponent);					break;				case 867896372:					var WaitStateComponentresolver = MessagePackSerializer.Deserialize<WaitStateComponentResolver>(dataContainerForResolving.Data);					var WaitStateComponentcomponent = entity.GetOrAddComponent<WaitStateComponent>();					WaitStateComponentresolver.Out(ref WaitStateComponentcomponent);					break;				case -1029564515:					var ViewReferenceComponentresolver = MessagePackSerializer.Deserialize<ViewReferenceComponentResolver>(dataContainerForResolving.Data);					var ViewReferenceComponentcomponent = entity.GetOrAddComponent<ViewReferenceComponent>();					ViewReferenceComponentresolver.Out(ref ViewReferenceComponentcomponent);					break;				case -1627736277:					var CountersHolderComponentresolver = MessagePackSerializer.Deserialize<CountersHolderComponentResolver>(dataContainerForResolving.Data);					var CountersHolderComponentcomponent = entity.GetOrAddComponent<CountersHolderComponent>();					CountersHolderComponentresolver.Out(ref CountersHolderComponentcomponent);					break;				case 313621202:					var AbilityOwnerComponentresolver = MessagePackSerializer.Deserialize<AbilityOwnerComponentResolver>(dataContainerForResolving.Data);					var AbilityOwnerComponentcomponent = entity.GetOrAddComponent<AbilityOwnerComponent>();					AbilityOwnerComponentresolver.Out(ref AbilityOwnerComponentcomponent);					break;				case 671481967:					var NeedHpBarComponentresolver = MessagePackSerializer.Deserialize<NeedHpBarComponentResolver>(dataContainerForResolving.Data);					var NeedHpBarComponentcomponent = entity.GetOrAddComponent<NeedHpBarComponent>();					NeedHpBarComponentresolver.Out(ref NeedHpBarComponentcomponent);					break;				case 203333459:					var LevelsHolderComponentresolver = MessagePackSerializer.Deserialize<LevelsHolderComponentResolver>(dataContainerForResolving.Data);					var LevelsHolderComponentcomponent = entity.GetOrAddComponent<LevelsHolderComponent>();					LevelsHolderComponentresolver.Out(ref LevelsHolderComponentcomponent);					break;				case -1258897312:					var SlowdownComponentresolver = MessagePackSerializer.Deserialize<SlowdownComponentResolver>(dataContainerForResolving.Data);					var SlowdownComponentcomponent = entity.GetOrAddComponent<SlowdownComponent>();					SlowdownComponentresolver.Out(ref SlowdownComponentcomponent);					break;				case 1640309440:					var HealAbilityComponentresolver = MessagePackSerializer.Deserialize<HealAbilityComponentResolver>(dataContainerForResolving.Data);					var HealAbilityComponentcomponent = entity.GetOrAddComponent<HealAbilityComponent>();					HealAbilityComponentresolver.Out(ref HealAbilityComponentcomponent);					break;				case -982956555:					var CollisionsComponentresolver = MessagePackSerializer.Deserialize<CollisionsComponentResolver>(dataContainerForResolving.Data);					var CollisionsComponentcomponent = entity.GetOrAddComponent<CollisionsComponent>();					CollisionsComponentresolver.Out(ref CollisionsComponentcomponent);					break;				case 1718416741:					var VisualInActionTagComponentresolver = MessagePackSerializer.Deserialize<VisualInActionTagComponentResolver>(dataContainerForResolving.Data);					var VisualInActionTagComponentcomponent = entity.GetOrAddComponent<VisualInActionTagComponent>();					VisualInActionTagComponentresolver.Out(ref VisualInActionTagComponentcomponent);					break;				case 1672267938:					var MainCharacterTagComponentresolver = MessagePackSerializer.Deserialize<MainCharacterTagComponentResolver>(dataContainerForResolving.Data);					var MainCharacterTagComponentcomponent = entity.GetOrAddComponent<MainCharacterTagComponent>();					MainCharacterTagComponentresolver.Out(ref MainCharacterTagComponentcomponent);					break;				case -1740624067:					var ChoosingPushDirectionSphereAbilityComponentresolver = MessagePackSerializer.Deserialize<ChoosingPushDirectionSphereAbilityComponentResolver>(dataContainerForResolving.Data);					var ChoosingPushDirectionSphereAbilityComponentcomponent = entity.GetOrAddComponent<ChoosingPushDirectionSphereAbilityComponent>();					ChoosingPushDirectionSphereAbilityComponentresolver.Out(ref ChoosingPushDirectionSphereAbilityComponentcomponent);					break;				case -1144719428:					var MainCanvasTagComponentresolver = MessagePackSerializer.Deserialize<MainCanvasTagComponentResolver>(dataContainerForResolving.Data);					var MainCanvasTagComponentcomponent = entity.GetOrAddComponent<MainCanvasTagComponent>();					MainCanvasTagComponentresolver.Out(ref MainCanvasTagComponentcomponent);					break;				case -1191206187:					var AdditionalCanvasTagComponentresolver = MessagePackSerializer.Deserialize<AdditionalCanvasTagComponentResolver>(dataContainerForResolving.Data);					var AdditionalCanvasTagComponentcomponent = entity.GetOrAddComponent<AdditionalCanvasTagComponent>();					AdditionalCanvasTagComponentresolver.Out(ref AdditionalCanvasTagComponentcomponent);					break;				case -1325613894:					var CheckTwoComponentresolver = MessagePackSerializer.Deserialize<CheckTwoComponentResolver>(dataContainerForResolving.Data);					var CheckTwoComponentcomponent = entity.GetOrAddComponent<CheckTwoComponent>();					CheckTwoComponentresolver.Out(ref CheckTwoComponentcomponent);					break;				case -803245354:					var ActorProviderComponentresolver = MessagePackSerializer.Deserialize<ActorProviderComponentResolver>(dataContainerForResolving.Data);					var ActorProviderComponentcomponent = entity.GetOrAddComponent<ActorProviderComponent>();					ActorProviderComponentresolver.Out(ref ActorProviderComponentcomponent);					break;				case 1143262242:					var UntilSuccessStrategyNodeComponentresolver = MessagePackSerializer.Deserialize<UntilSuccessStrategyNodeComponentResolver>(dataContainerForResolving.Data);					var UntilSuccessStrategyNodeComponentcomponent = entity.GetOrAddComponent<UntilSuccessStrategyNodeComponent>();					UntilSuccessStrategyNodeComponentresolver.Out(ref UntilSuccessStrategyNodeComponentcomponent);					break;				case -1006438290:					var SpeedUpSphereComponentresolver = MessagePackSerializer.Deserialize<SpeedUpSphereComponentResolver>(dataContainerForResolving.Data);					var SpeedUpSphereComponentcomponent = entity.GetOrAddComponent<SpeedUpSphereComponent>();					SpeedUpSphereComponentresolver.Out(ref SpeedUpSphereComponentcomponent);					break;				case -1981611680:					var PegasusMovementComponentresolver = MessagePackSerializer.Deserialize<PegasusMovementComponentResolver>(dataContainerForResolving.Data);					var PegasusMovementComponentcomponent = entity.GetOrAddComponent<PegasusMovementComponent>();					PegasusMovementComponentresolver.Out(ref PegasusMovementComponentcomponent);					break;				case 1354058828:					var PoolableTagComponentresolver = MessagePackSerializer.Deserialize<PoolableTagComponentResolver>(dataContainerForResolving.Data);					var PoolableTagComponentcomponent = entity.GetOrAddComponent<PoolableTagComponent>();					PoolableTagComponentresolver.Out(ref PoolableTagComponentcomponent);					break;				case -668621305:					var CachedEntitiesGlobalHolderComponentresolver = MessagePackSerializer.Deserialize<CachedEntitiesGlobalHolderComponentResolver>(dataContainerForResolving.Data);					var CachedEntitiesGlobalHolderComponentcomponent = entity.GetOrAddComponent<CachedEntitiesGlobalHolderComponent>();					CachedEntitiesGlobalHolderComponentresolver.Out(ref CachedEntitiesGlobalHolderComponentcomponent);					break;				case 1878456296:					var AbilityPredicateComponentresolver = MessagePackSerializer.Deserialize<AbilityPredicateComponentResolver>(dataContainerForResolving.Data);					var AbilityPredicateComponentcomponent = entity.GetOrAddComponent<AbilityPredicateComponent>();					AbilityPredicateComponentresolver.Out(ref AbilityPredicateComponentcomponent);					break;				case -1431715806:					var TargetPositionComponentresolver = MessagePackSerializer.Deserialize<TargetPositionComponentResolver>(dataContainerForResolving.Data);					var TargetPositionComponentcomponent = entity.GetOrAddComponent<TargetPositionComponent>();					TargetPositionComponentresolver.Out(ref TargetPositionComponentcomponent);					break;				case -619720211:					var SphereComponentresolver = MessagePackSerializer.Deserialize<SphereComponentResolver>(dataContainerForResolving.Data);					var SphereComponentcomponent = entity.GetOrAddComponent<SphereComponent>();					SphereComponentresolver.Out(ref SphereComponentcomponent);					break;				case 1534411424:					var PlayerLevelComponentresolver = MessagePackSerializer.Deserialize<PlayerLevelComponentResolver>(dataContainerForResolving.Data);					var PlayerLevelComponentcomponent = entity.GetOrAddComponent<PlayerLevelComponent>();					PlayerLevelComponentresolver.Out(ref PlayerLevelComponentcomponent);					break;				case 929129980:					var IconComponentresolver = MessagePackSerializer.Deserialize<IconComponentResolver>(dataContainerForResolving.Data);					var IconComponentcomponent = entity.GetOrAddComponent<IconComponent>();					IconComponentresolver.Out(ref IconComponentcomponent);					break;				case -2124047058:					var UITagComponentresolver = MessagePackSerializer.Deserialize<UITagComponentResolver>(dataContainerForResolving.Data);					var UITagComponentcomponent = entity.GetOrAddComponent<UITagComponent>();					UITagComponentresolver.Out(ref UITagComponentcomponent);					break;				case -1422875746:					var StickTagComponentresolver = MessagePackSerializer.Deserialize<StickTagComponentResolver>(dataContainerForResolving.Data);					var StickTagComponentcomponent = entity.GetOrAddComponent<StickTagComponent>();					StickTagComponentresolver.Out(ref StickTagComponentcomponent);					break;				case -1965185654:					var ScenarioAnimationComponentresolver = MessagePackSerializer.Deserialize<ScenarioAnimationComponentResolver>(dataContainerForResolving.Data);					var ScenarioAnimationComponentcomponent = entity.GetOrAddComponent<ScenarioAnimationComponent>();					ScenarioAnimationComponentresolver.Out(ref ScenarioAnimationComponentcomponent);					break;				case -1056876887:					var SpawnPointComponentresolver = MessagePackSerializer.Deserialize<SpawnPointComponentResolver>(dataContainerForResolving.Data);					var SpawnPointComponentcomponent = entity.GetOrAddComponent<SpawnPointComponent>();					SpawnPointComponentresolver.Out(ref SpawnPointComponentcomponent);					break;				case -2117687604:					var OverrideAnimatorComponentresolver = MessagePackSerializer.Deserialize<OverrideAnimatorComponentResolver>(dataContainerForResolving.Data);					var OverrideAnimatorComponentcomponent = entity.GetOrAddComponent<OverrideAnimatorComponent>();					OverrideAnimatorComponentresolver.Out(ref OverrideAnimatorComponentcomponent);					break;				case 819793506:					var StateInfoComponentresolver = MessagePackSerializer.Deserialize<StateInfoComponentResolver>(dataContainerForResolving.Data);					var StateInfoComponentcomponent = entity.GetOrAddComponent<StateInfoComponent>();					StateInfoComponentresolver.Out(ref StateInfoComponentcomponent);					break;				case 838666118:					var GameStateComponentresolver = MessagePackSerializer.Deserialize<GameStateComponentResolver>(dataContainerForResolving.Data);					var GameStateComponentcomponent = entity.GetOrAddComponent<GameStateComponent>();					GameStateComponentresolver.Out(ref GameStateComponentcomponent);					break;				case 1656499746:					var ViewReferenceGameObjectComponentresolver = MessagePackSerializer.Deserialize<ViewReferenceGameObjectComponentResolver>(dataContainerForResolving.Data);					var ViewReferenceGameObjectComponentcomponent = entity.GetOrAddComponent<ViewReferenceGameObjectComponent>();					ViewReferenceGameObjectComponentresolver.Out(ref ViewReferenceGameObjectComponentcomponent);					break;				case 42315994:					var ViewDestructionDelayedComponentresolver = MessagePackSerializer.Deserialize<ViewDestructionDelayedComponentResolver>(dataContainerForResolving.Data);					var ViewDestructionDelayedComponentcomponent = entity.GetOrAddComponent<ViewDestructionDelayedComponent>();					ViewDestructionDelayedComponentresolver.Out(ref ViewDestructionDelayedComponentcomponent);					break;				case -2094772963:					var UIPriorityIndexComponentresolver = MessagePackSerializer.Deserialize<UIPriorityIndexComponentResolver>(dataContainerForResolving.Data);					var UIPriorityIndexComponentcomponent = entity.GetOrAddComponent<UIPriorityIndexComponent>();					UIPriorityIndexComponentresolver.Out(ref UIPriorityIndexComponentcomponent);					break;				case -1162002111:					var UIGroupTagComponentresolver = MessagePackSerializer.Deserialize<UIGroupTagComponentResolver>(dataContainerForResolving.Data);					var UIGroupTagComponentcomponent = entity.GetOrAddComponent<UIGroupTagComponent>();					UIGroupTagComponentresolver.Out(ref UIGroupTagComponentcomponent);					break;				case 265593849:					var TimeProviderComponentresolver = MessagePackSerializer.Deserialize<TimeProviderComponentResolver>(dataContainerForResolving.Data);					var TimeProviderComponentcomponent = entity.GetOrAddComponent<TimeProviderComponent>();					TimeProviderComponentresolver.Out(ref TimeProviderComponentcomponent);					break;				case -1713719609:					var TestSerializationComponentresolver = MessagePackSerializer.Deserialize<TestSerializationComponentResolver>(dataContainerForResolving.Data);					var TestSerializationComponentcomponent = entity.GetOrAddComponent<TestSerializationComponent>();					TestSerializationComponentresolver.Out(ref TestSerializationComponentcomponent);					break;				case -142928435:					var ActorContainerIDresolver = MessagePackSerializer.Deserialize<ActorContainerIDResolver>(dataContainerForResolving.Data);					var ActorContainerIDcomponent = entity.GetOrAddComponent<ActorContainerID>();					ActorContainerIDresolver.Out(ref ActorContainerIDcomponent);					break;				case 745147359:					var TimeScaleComponentresolver = MessagePackSerializer.Deserialize<TimeScaleComponentResolver>(dataContainerForResolving.Data);					var TimeScaleComponentcomponent = entity.GetOrAddComponent<TimeScaleComponent>();					TimeScaleComponentresolver.Out(ref TimeScaleComponentcomponent);					break;				case 208510666:					var ScenesHolderComponentresolver = MessagePackSerializer.Deserialize<ScenesHolderComponentResolver>(dataContainerForResolving.Data);					var ScenesHolderComponentcomponent = entity.GetOrAddComponent<ScenesHolderComponent>();					ScenesHolderComponentresolver.Out(ref ScenesHolderComponentcomponent);					break;				case -1675925374:					var ExplodeSpheresAbilityComponentresolver = MessagePackSerializer.Deserialize<ExplodeSpheresAbilityComponentResolver>(dataContainerForResolving.Data);					var ExplodeSpheresAbilityComponentcomponent = entity.GetOrAddComponent<ExplodeSpheresAbilityComponent>();					ExplodeSpheresAbilityComponentresolver.Out(ref ExplodeSpheresAbilityComponentcomponent);					break;				case 1782176358:					var SetupAfterViewTagComponentresolver = MessagePackSerializer.Deserialize<SetupAfterViewTagComponentResolver>(dataContainerForResolving.Data);					var SetupAfterViewTagComponentcomponent = entity.GetOrAddComponent<SetupAfterViewTagComponent>();					SetupAfterViewTagComponentresolver.Out(ref SetupAfterViewTagComponentcomponent);					break;				case 2041590961:					var AbilitiesHolderComponentresolver = MessagePackSerializer.Deserialize<AbilitiesHolderComponentResolver>(dataContainerForResolving.Data);					var AbilitiesHolderComponentcomponent = entity.GetOrAddComponent<AbilitiesHolderComponent>();					AbilitiesHolderComponentresolver.Out(ref AbilitiesHolderComponentcomponent);					break;				case -1150856501:					var AbilityTagComponentresolver = MessagePackSerializer.Deserialize<AbilityTagComponentResolver>(dataContainerForResolving.Data);					var AbilityTagComponentcomponent = entity.GetOrAddComponent<AbilityTagComponent>();					AbilityTagComponentresolver.Out(ref AbilityTagComponentcomponent);					break;				case -952149029:					var AIStrategyComponentresolver = MessagePackSerializer.Deserialize<AIStrategyComponentResolver>(dataContainerForResolving.Data);					var AIStrategyComponentcomponent = entity.GetOrAddComponent<AIStrategyComponent>();					AIStrategyComponentresolver.Out(ref AIStrategyComponentcomponent);					break;				case -1167233499:					var MainCameraComponentresolver = MessagePackSerializer.Deserialize<MainCameraComponentResolver>(dataContainerForResolving.Data);					var MainCameraComponentcomponent = entity.GetOrAddComponent<MainCameraComponent>();					MainCameraComponentresolver.Out(ref MainCameraComponentcomponent);					break;				case -575221824:					var RadiusComponentresolver = MessagePackSerializer.Deserialize<RadiusComponentResolver>(dataContainerForResolving.Data);					var RadiusComponentcomponent = entity.GetOrAddComponent<RadiusComponent>();					RadiusComponentresolver.Out(ref RadiusComponentcomponent);					break;				case 1046176786:					var AnimationCheckOutsHolderComponentresolver = MessagePackSerializer.Deserialize<AnimationCheckOutsHolderComponentResolver>(dataContainerForResolving.Data);					var AnimationCheckOutsHolderComponentcomponent = entity.GetOrAddComponent<AnimationCheckOutsHolderComponent>();					AnimationCheckOutsHolderComponentresolver.Out(ref AnimationCheckOutsHolderComponentcomponent);					break;				case 680066094:					var IsDeadTagComponentresolver = MessagePackSerializer.Deserialize<IsDeadTagComponentResolver>(dataContainerForResolving.Data);					var IsDeadTagComponentcomponent = entity.GetOrAddComponent<IsDeadTagComponent>();					IsDeadTagComponentresolver.Out(ref IsDeadTagComponentcomponent);					break;				case 1960044224:					var CardsGlobalHolderComponentresolver = MessagePackSerializer.Deserialize<CardsGlobalHolderComponentResolver>(dataContainerForResolving.Data);					var CardsGlobalHolderComponentcomponent = entity.GetOrAddComponent<CardsGlobalHolderComponent>();					CardsGlobalHolderComponentresolver.Out(ref CardsGlobalHolderComponentcomponent);					break;				case -1548506885:					var SoftCurrencyRewardVisualConfigComponentresolver = MessagePackSerializer.Deserialize<SoftCurrencyRewardVisualConfigComponentResolver>(dataContainerForResolving.Data);					var SoftCurrencyRewardVisualConfigComponentcomponent = entity.GetOrAddComponent<SoftCurrencyRewardVisualConfigComponent>();					SoftCurrencyRewardVisualConfigComponentresolver.Out(ref SoftCurrencyRewardVisualConfigComponentcomponent);					break;				case 760610747:					var PlayerTagComponentresolver = MessagePackSerializer.Deserialize<PlayerTagComponentResolver>(dataContainerForResolving.Data);					var PlayerTagComponentcomponent = entity.GetOrAddComponent<PlayerTagComponent>();					PlayerTagComponentresolver.Out(ref PlayerTagComponentcomponent);					break;				case -1330009829:					var TestInitComponentresolver = MessagePackSerializer.Deserialize<TestInitComponentResolver>(dataContainerForResolving.Data);					var TestInitComponentcomponent = entity.GetOrAddComponent<TestInitComponent>();					TestInitComponentresolver.Out(ref TestInitComponentcomponent);					break;				case -1425063609:					var UnityTransformComponentresolver = MessagePackSerializer.Deserialize<UnityTransformComponentResolver>(dataContainerForResolving.Data);					var UnityTransformComponentcomponent = entity.GetOrAddComponent<UnityTransformComponent>();					UnityTransformComponentresolver.Out(ref UnityTransformComponentcomponent);					break;				case -1206519595:					var UnityRectTransformComponentresolver = MessagePackSerializer.Deserialize<UnityRectTransformComponentResolver>(dataContainerForResolving.Data);					var UnityRectTransformComponentcomponent = entity.GetOrAddComponent<UnityRectTransformComponent>();					UnityRectTransformComponentresolver.Out(ref UnityRectTransformComponentcomponent);					break;				case 1908410989:					var UIViewReferenceComponentresolver = MessagePackSerializer.Deserialize<UIViewReferenceComponentResolver>(dataContainerForResolving.Data);					var UIViewReferenceComponentcomponent = entity.GetOrAddComponent<UIViewReferenceComponent>();					UIViewReferenceComponentresolver.Out(ref UIViewReferenceComponentcomponent);					break;				case 888932549:					var TransformComponentresolver = MessagePackSerializer.Deserialize<TransformComponentResolver>(dataContainerForResolving.Data);					var TransformComponentcomponent = entity.GetOrAddComponent<TransformComponent>();					TransformComponentresolver.Out(ref TransformComponentcomponent);					break;				case -1535532641:					var PoolableViewsProviderComponentresolver = MessagePackSerializer.Deserialize<PoolableViewsProviderComponentResolver>(dataContainerForResolving.Data);					var PoolableViewsProviderComponentcomponent = entity.GetOrAddComponent<PoolableViewsProviderComponent>();					PoolableViewsProviderComponentresolver.Out(ref PoolableViewsProviderComponentcomponent);					break;				case 290577522:					var OnApplicationQuitTagComponentresolver = MessagePackSerializer.Deserialize<OnApplicationQuitTagComponentResolver>(dataContainerForResolving.Data);					var OnApplicationQuitTagComponentcomponent = entity.GetOrAddComponent<OnApplicationQuitTagComponent>();					OnApplicationQuitTagComponentresolver.Out(ref OnApplicationQuitTagComponentcomponent);					break;				case 1908646573:					var NetworkEntityTagComponentresolver = MessagePackSerializer.Deserialize<NetworkEntityTagComponentResolver>(dataContainerForResolving.Data);					var NetworkEntityTagComponentcomponent = entity.GetOrAddComponent<NetworkEntityTagComponent>();					NetworkEntityTagComponentresolver.Out(ref NetworkEntityTagComponentcomponent);					break;				case 1004631539:					var ItemTagComponentresolver = MessagePackSerializer.Deserialize<ItemTagComponentResolver>(dataContainerForResolving.Data);					var ItemTagComponentcomponent = entity.GetOrAddComponent<ItemTagComponent>();					ItemTagComponentresolver.Out(ref ItemTagComponentcomponent);					break;				case 1776997060:					var InputListenerTagComponentresolver = MessagePackSerializer.Deserialize<InputListenerTagComponentResolver>(dataContainerForResolving.Data);					var InputListenerTagComponentcomponent = entity.GetOrAddComponent<InputListenerTagComponent>();					InputListenerTagComponentresolver.Out(ref InputListenerTagComponentcomponent);					break;				case -669669709:					var StrategySideExecuteComponentresolver = MessagePackSerializer.Deserialize<StrategySideExecuteComponentResolver>(dataContainerForResolving.Data);					var StrategySideExecuteComponentcomponent = entity.GetOrAddComponent<StrategySideExecuteComponent>();					StrategySideExecuteComponentresolver.Out(ref StrategySideExecuteComponentcomponent);					break;				case -988064901:					var AppVersionComponentresolver = MessagePackSerializer.Deserialize<AppVersionComponentResolver>(dataContainerForResolving.Data);					var AppVersionComponentcomponent = entity.GetOrAddComponent<AppVersionComponent>();					AppVersionComponentresolver.Out(ref AppVersionComponentcomponent);					break;				case 1487202547:					var SpeedDependsOnTimeScaleComponentresolver = MessagePackSerializer.Deserialize<SpeedDependsOnTimeScaleComponentResolver>(dataContainerForResolving.Data);					var SpeedDependsOnTimeScaleComponentcomponent = entity.GetOrAddComponent<SpeedDependsOnTimeScaleComponent>();					SpeedDependsOnTimeScaleComponentresolver.Out(ref SpeedDependsOnTimeScaleComponentcomponent);					break;				case 755826610:					var CenterTagComponentresolver = MessagePackSerializer.Deserialize<CenterTagComponentResolver>(dataContainerForResolving.Data);					var CenterTagComponentcomponent = entity.GetOrAddComponent<CenterTagComponent>();					CenterTagComponentresolver.Out(ref CenterTagComponentcomponent);					break;				case 1005024681:					var CardTagComponentresolver = MessagePackSerializer.Deserialize<CardTagComponentResolver>(dataContainerForResolving.Data);					var CardTagComponentcomponent = entity.GetOrAddComponent<CardTagComponent>();					CardTagComponentresolver.Out(ref CardTagComponentcomponent);					break;				case 7120005:					var ViewReadyTagComponentresolver = MessagePackSerializer.Deserialize<ViewReadyTagComponentResolver>(dataContainerForResolving.Data);					var ViewReadyTagComponentcomponent = entity.GetOrAddComponent<ViewReadyTagComponent>();					ViewReadyTagComponentresolver.Out(ref ViewReadyTagComponentcomponent);					break;				case -1299131970:					var SphereCastContextresolver = MessagePackSerializer.Deserialize<SphereCastContextResolver>(dataContainerForResolving.Data);					var SphereCastContextcomponent = entity.GetOrAddComponent<SphereCastContext>();					SphereCastContextresolver.Out(ref SphereCastContextcomponent);					break;				case 760681168:					var StateDataComponentresolver = MessagePackSerializer.Deserialize<StateDataComponentResolver>(dataContainerForResolving.Data);					var StateDataComponentcomponent = entity.GetOrAddComponent<StateDataComponent>();					StateDataComponentresolver.Out(ref StateDataComponentcomponent);					break;				case -1167076999:					var InitOnAddAbilityTagComponentresolver = MessagePackSerializer.Deserialize<InitOnAddAbilityTagComponentResolver>(dataContainerForResolving.Data);					var InitOnAddAbilityTagComponentcomponent = entity.GetOrAddComponent<InitOnAddAbilityTagComponent>();					InitOnAddAbilityTagComponentresolver.Out(ref InitOnAddAbilityTagComponentcomponent);					break;				case 274782965:					var AdditionalAbilityIndexComponentresolver = MessagePackSerializer.Deserialize<AdditionalAbilityIndexComponentResolver>(dataContainerForResolving.Data);					var AdditionalAbilityIndexComponentcomponent = entity.GetOrAddComponent<AdditionalAbilityIndexComponent>();					AdditionalAbilityIndexComponentresolver.Out(ref AdditionalAbilityIndexComponentcomponent);					break;				case 117603503:					var NavMeshAgentComponentresolver = MessagePackSerializer.Deserialize<NavMeshAgentComponentResolver>(dataContainerForResolving.Data);					var NavMeshAgentComponentcomponent = entity.GetOrAddComponent<NavMeshAgentComponent>();					NavMeshAgentComponentresolver.Out(ref NavMeshAgentComponentcomponent);					break;				case 369850288:					var InputActionsComponentresolver = MessagePackSerializer.Deserialize<InputActionsComponentResolver>(dataContainerForResolving.Data);					var InputActionsComponentcomponent = entity.GetOrAddComponent<InputActionsComponent>();					InputActionsComponentresolver.Out(ref InputActionsComponentcomponent);					break;				case -996906941:					var IgnoreReferenceContainerTagComponentresolver = MessagePackSerializer.Deserialize<IgnoreReferenceContainerTagComponentResolver>(dataContainerForResolving.Data);					var IgnoreReferenceContainerTagComponentcomponent = entity.GetOrAddComponent<IgnoreReferenceContainerTagComponent>();					IgnoreReferenceContainerTagComponentresolver.Out(ref IgnoreReferenceContainerTagComponentcomponent);					break;				case -100950956:					var GameLogicTagComponentresolver = MessagePackSerializer.Deserialize<GameLogicTagComponentResolver>(dataContainerForResolving.Data);					var GameLogicTagComponentcomponent = entity.GetOrAddComponent<GameLogicTagComponent>();					GameLogicTagComponentresolver.Out(ref GameLogicTagComponentcomponent);					break;				case -1378915465:					var CacheCounterValuesComponentresolver = MessagePackSerializer.Deserialize<CacheCounterValuesComponentResolver>(dataContainerForResolving.Data);					var CacheCounterValuesComponentcomponent = entity.GetOrAddComponent<CacheCounterValuesComponent>();					CacheCounterValuesComponentresolver.Out(ref CacheCounterValuesComponentcomponent);					break;				case -822435144:					var LevelModifierHolderComponentresolver = MessagePackSerializer.Deserialize<LevelModifierHolderComponentResolver>(dataContainerForResolving.Data);					var LevelModifierHolderComponentcomponent = entity.GetOrAddComponent<LevelModifierHolderComponent>();					LevelModifierHolderComponentresolver.Out(ref LevelModifierHolderComponentcomponent);					break;				case -146694774:					var ShowHpBarTagComponentresolver = MessagePackSerializer.Deserialize<ShowHpBarTagComponentResolver>(dataContainerForResolving.Data);					var ShowHpBarTagComponentcomponent = entity.GetOrAddComponent<ShowHpBarTagComponent>();					ShowHpBarTagComponentresolver.Out(ref ShowHpBarTagComponentcomponent);					break;				case 1310216023:					var CustomHpBarComponentresolver = MessagePackSerializer.Deserialize<CustomHpBarComponentResolver>(dataContainerForResolving.Data);					var CustomHpBarComponentcomponent = entity.GetOrAddComponent<CustomHpBarComponent>();					CustomHpBarComponentresolver.Out(ref CustomHpBarComponentcomponent);					break;				case 2044779682:					var CharactersHolderComponentresolver = MessagePackSerializer.Deserialize<CharactersHolderComponentResolver>(dataContainerForResolving.Data);					var CharactersHolderComponentcomponent = entity.GetOrAddComponent<CharactersHolderComponent>();					CharactersHolderComponentresolver.Out(ref CharactersHolderComponentcomponent);					break;				case 766574714:					var UIBusyTagComponentresolver = MessagePackSerializer.Deserialize<UIBusyTagComponentResolver>(dataContainerForResolving.Data);					var UIBusyTagComponentcomponent = entity.GetOrAddComponent<UIBusyTagComponent>();					UIBusyTagComponentresolver.Out(ref UIBusyTagComponentcomponent);					break;				case 1989536467:					var OverlapSphereCastContextresolver = MessagePackSerializer.Deserialize<OverlapSphereCastContextResolver>(dataContainerForResolving.Data);					var OverlapSphereCastContextcomponent = entity.GetOrAddComponent<OverlapSphereCastContext>();					OverlapSphereCastContextresolver.Out(ref OverlapSphereCastContextcomponent);					break;				case 387690372:					var StateContextComponentresolver = MessagePackSerializer.Deserialize<StateContextComponentResolver>(dataContainerForResolving.Data);					var StateContextComponentcomponent = entity.GetOrAddComponent<StateContextComponent>();					StateContextComponentresolver.Out(ref StateContextComponentcomponent);					break;				case 369067176:					var SavePositionComponentresolver = MessagePackSerializer.Deserialize<SavePositionComponentResolver>(dataContainerForResolving.Data);					var SavePositionComponentcomponent = entity.GetOrAddComponent<SavePositionComponent>();					SavePositionComponentresolver.Out(ref SavePositionComponentcomponent);					break;				case -791405757:					var PushDirectionComponentresolver = MessagePackSerializer.Deserialize<PushDirectionComponentResolver>(dataContainerForResolving.Data);					var PushDirectionComponentcomponent = entity.GetOrAddComponent<PushDirectionComponent>();					PushDirectionComponentresolver.Out(ref PushDirectionComponentcomponent);					break;				case -942979946:					var ActionsHolderComponentresolver = MessagePackSerializer.Deserialize<ActionsHolderComponentResolver>(dataContainerForResolving.Data);					var ActionsHolderComponentcomponent = entity.GetOrAddComponent<ActionsHolderComponent>();					ActionsHolderComponentresolver.Out(ref ActionsHolderComponentcomponent);					break;				case 2058998768:					var SoftCurrencyCounterMonoComponentProviderComponentresolver = MessagePackSerializer.Deserialize<SoftCurrencyCounterMonoComponentProviderComponentResolver>(dataContainerForResolving.Data);					var SoftCurrencyCounterMonoComponentProviderComponentcomponent = entity.GetOrAddComponent<SoftCurrencyCounterMonoComponentProviderComponent>();					SoftCurrencyCounterMonoComponentProviderComponentresolver.Out(ref SoftCurrencyCounterMonoComponentProviderComponentcomponent);					break;				case -1908323267:					var RigidbodyProviderComponentresolver = MessagePackSerializer.Deserialize<RigidbodyProviderComponentResolver>(dataContainerForResolving.Data);					var RigidbodyProviderComponentcomponent = entity.GetOrAddComponent<RigidbodyProviderComponent>();					RigidbodyProviderComponentresolver.Out(ref RigidbodyProviderComponentcomponent);					break;				case -575427163:					var ActionsWithPredicateHolderComponentresolver = MessagePackSerializer.Deserialize<ActionsWithPredicateHolderComponentResolver>(dataContainerForResolving.Data);					var ActionsWithPredicateHolderComponentcomponent = entity.GetOrAddComponent<ActionsWithPredicateHolderComponent>();					ActionsWithPredicateHolderComponentresolver.Out(ref ActionsWithPredicateHolderComponentcomponent);					break;				case -2019244546:					var SoftValueCounterComponentresolver = MessagePackSerializer.Deserialize<SoftValueCounterComponentResolver>(dataContainerForResolving.Data);					var SoftValueCounterComponentcomponent = entity.GetOrAddComponent<SoftValueCounterComponent>();					SoftValueCounterComponentresolver.Out(ref SoftValueCounterComponentcomponent);					break;				case -1252231869:					var EnergyRegenerationComponentresolver = MessagePackSerializer.Deserialize<EnergyRegenerationComponentResolver>(dataContainerForResolving.Data);					var EnergyRegenerationComponentcomponent = entity.GetOrAddComponent<EnergyRegenerationComponent>();					EnergyRegenerationComponentresolver.Out(ref EnergyRegenerationComponentcomponent);					break;				case -589508998:					var HealthComponentresolver = MessagePackSerializer.Deserialize<HealthComponentResolver>(dataContainerForResolving.Data);					var HealthComponentcomponent = entity.GetOrAddComponent<HealthComponent>();					HealthComponentresolver.Out(ref HealthComponentcomponent);					break;				case -1284981806:					var CooldownComponentresolver = MessagePackSerializer.Deserialize<CooldownComponentResolver>(dataContainerForResolving.Data);					var CooldownComponentcomponent = entity.GetOrAddComponent<CooldownComponent>();					CooldownComponentresolver.Out(ref CooldownComponentcomponent);					break;				case -2145542698:					var SpeedComponentresolver = MessagePackSerializer.Deserialize<SpeedComponentResolver>(dataContainerForResolving.Data);					var SpeedComponentcomponent = entity.GetOrAddComponent<SpeedComponent>();					SpeedComponentresolver.Out(ref SpeedComponentcomponent);					break;				case -571092005:					var EnergyComponentresolver = MessagePackSerializer.Deserialize<EnergyComponentResolver>(dataContainerForResolving.Data);					var EnergyComponentcomponent = entity.GetOrAddComponent<EnergyComponent>();					EnergyComponentresolver.Out(ref EnergyComponentcomponent);					break;				case 956328563:					var TestComponentresolver = MessagePackSerializer.Deserialize<TestComponentResolver>(dataContainerForResolving.Data);					var TestComponentcomponent = entity.GetOrAddComponent<TestComponent>();					TestComponentresolver.Out(ref TestComponentcomponent);					break;				case 2004170910:					var TestWorldSingleComponentresolver = MessagePackSerializer.Deserialize<TestWorldSingleComponentResolver>(dataContainerForResolving.Data);					var TestWorldSingleComponentcomponent = entity.GetOrAddComponent<TestWorldSingleComponent>();					TestWorldSingleComponentresolver.Out(ref TestWorldSingleComponentcomponent);					break;				case -623718192:					var DamageComponentresolver = MessagePackSerializer.Deserialize<DamageComponentResolver>(dataContainerForResolving.Data);					var DamageComponentcomponent = entity.GetOrAddComponent<DamageComponent>();					DamageComponentresolver.Out(ref DamageComponentcomponent);					break;			}		}	}}