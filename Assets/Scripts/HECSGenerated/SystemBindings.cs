using System;using Systems;using Commands;using Components;using System.Reflection;namespace HECSFramework.Core{	public sealed class TouchScreenSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{		}		public void UnBindSystem(ISystem system)		{		}	}	public sealed class StickInputSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{		}		public void UnBindSystem(ISystem system)		{		}	}	public sealed class AINPCSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (AINPCSystem)system;			LocalCommandListener<NeedDecisionCommand>.AddListener(currentSystem.Owner.World.Index,currentSystem);			LocalCommandListener<SetDefaultStrategyCommand>.AddListener(currentSystem.Owner.World.Index,currentSystem);			LocalCommandListener<ChangeStrategyCommand>.AddListener(currentSystem.Owner.World.Index,currentSystem);			LocalCommandListener<ForceStopAICommand>.AddListener(currentSystem.Owner.World.Index,currentSystem);			LocalCommandListener<ForceStartAICommand>.AddListener(currentSystem.Owner.World.Index,currentSystem);			currentSystem.aIStrategyComponent = currentSystem.Owner.GetOrAddComponent<AIStrategyComponent>();		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (AINPCSystem)system;			LocalCommandListener<NeedDecisionCommand>.RemoveListener(currentSystem.Owner.WorldId, currentSystem);			LocalCommandListener<SetDefaultStrategyCommand>.RemoveListener(currentSystem.Owner.WorldId, currentSystem);			LocalCommandListener<ChangeStrategyCommand>.RemoveListener(currentSystem.Owner.WorldId, currentSystem);			LocalCommandListener<ForceStopAICommand>.RemoveListener(currentSystem.Owner.WorldId, currentSystem);			LocalCommandListener<ForceStartAICommand>.RemoveListener(currentSystem.Owner.WorldId, currentSystem);			currentSystem.aIStrategyComponent = null;		}	}	public sealed class HealthBarsManagerSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (HealthBarsManagerSystem)system;			system.Owner.World.AddGlobalReactComponent<ShowHpBarTagComponent>(currentSystem, true);		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (HealthBarsManagerSystem)system;			system.Owner.World.AddGlobalReactComponent<ShowHpBarTagComponent>(currentSystem, false);		}	}	public sealed class DamageTextVisualizerSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (DamageTextVisualizerSystem)system;			LocalCommandListener<DamageForVisualFXCommand>.AddListener(currentSystem.Owner.World.Index,currentSystem);			currentSystem.DamageTextVisualizerComponent = currentSystem.Owner.GetOrAddComponent<DamageTextVisualizerComponent>();		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (DamageTextVisualizerSystem)system;			LocalCommandListener<DamageForVisualFXCommand>.RemoveListener(currentSystem.Owner.WorldId, currentSystem);			currentSystem.DamageTextVisualizerComponent = null;		}	}	public sealed class RemoveItemFromCharacterSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{		}		public void UnBindSystem(ISystem system)		{		}	}	public sealed class MoveMainCharacterSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (MoveMainCharacterSystem)system;			LocalCommandListener<InputCommand>.AddListener(currentSystem.Owner.World.Index,currentSystem);			LocalCommandListener<InputEndedCommand>.AddListener(currentSystem.Owner.World.Index,currentSystem);			currentSystem.SpeedComponent = currentSystem.Owner.GetOrAddComponent<SpeedComponent>();			currentSystem.RigidbodyProviderComponent = currentSystem.Owner.GetOrAddComponent<RigidbodyProviderComponent>();		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (MoveMainCharacterSystem)system;			LocalCommandListener<InputCommand>.RemoveListener(currentSystem.Owner.WorldId, currentSystem);			LocalCommandListener<InputEndedCommand>.RemoveListener(currentSystem.Owner.WorldId, currentSystem);			currentSystem.SpeedComponent = null;			currentSystem.RigidbodyProviderComponent = null;		}	}	public sealed class SphereLevelingSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (SphereLevelingSystem)system;			currentSystem.DamageComponent = currentSystem.Owner.GetOrAddComponent<DamageComponent>();		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (SphereLevelingSystem)system;			currentSystem.DamageComponent = null;		}	}	public sealed class RandomAttackAnimationSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (RandomAttackAnimationSystem)system;			LocalCommandListener<AnimationEventCommand>.AddListener(currentSystem.Owner.World.Index,currentSystem);		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (RandomAttackAnimationSystem)system;			LocalCommandListener<AnimationEventCommand>.RemoveListener(currentSystem.Owner.WorldId, currentSystem);		}	}	public sealed class DependOnTimeScaleSpeedSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (DependOnTimeScaleSpeedSystem)system;			system.Owner.World.AddGlobalReactComponent<SpeedComponent>(currentSystem, true);		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (DependOnTimeScaleSpeedSystem)system;			system.Owner.World.AddGlobalReactComponent<SpeedComponent>(currentSystem, false);		}	}	public sealed class ItemMovementSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (ItemMovementSystem)system;			currentSystem.SpeedComponent = currentSystem.Owner.GetOrAddComponent<SpeedComponent>();			currentSystem.DirectionComponent = currentSystem.Owner.GetOrAddComponent<DirectionComponent>();			currentSystem.RigidbodyProviderComponent = currentSystem.Owner.GetOrAddComponent<RigidbodyProviderComponent>();		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (ItemMovementSystem)system;			currentSystem.SpeedComponent = null;			currentSystem.DirectionComponent = null;			currentSystem.RigidbodyProviderComponent = null;		}	}	public sealed class SpawnViewSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (SpawnViewSystem)system;			LocalCommandListener<RespawnViewCommand>.AddListener(currentSystem.Owner.World.Index,currentSystem);			currentSystem.viewReferenceGameObject = currentSystem.Owner.GetOrAddComponent<ViewReferenceGameObjectComponent>();			currentSystem.unityTransform = currentSystem.Owner.GetOrAddComponent<UnityTransformComponent>();		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (SpawnViewSystem)system;			LocalCommandListener<RespawnViewCommand>.RemoveListener(currentSystem.Owner.WorldId, currentSystem);			currentSystem.viewReferenceGameObject = null;			currentSystem.unityTransform = null;		}	}	public sealed class InputOverUISystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (InputOverUISystem)system;			currentSystem.InputOverUIComponent = currentSystem.Owner.GetOrAddComponent<InputOverUIComponent>();		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (InputOverUISystem)system;			currentSystem.InputOverUIComponent = null;		}	}	public sealed class ActorAfterViewSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{		}		public void UnBindSystem(ISystem system)		{		}	}	public sealed class StressTestReactsSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (StressTestReactsSystem)system;			LocalCommandListener<StressTestLocalCommand>.AddListener(currentSystem.Owner.World.Index,currentSystem);			system.Owner.World.AddGlobalReactCommand<StressTestGlobalCommand>(system, currentSystem);			system.Owner.World.AddLocalGenericReactComponent<ICounter>(system.Owner.Index, currentSystem, true);			system.Owner.World.AddGlobalGenericReactComponent<ICounter>(currentSystem, true);			system.Owner.World.AddGlobalReactComponent<TestReactComponent>(currentSystem, true);			system.Owner.World.AddLocalReactComponent<TestReactComponent>(system.Owner.Index, currentSystem, true);		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (StressTestReactsSystem)system;			LocalCommandListener<StressTestLocalCommand>.RemoveListener(currentSystem.Owner.WorldId, currentSystem);			system.Owner.World.RemoveGlobalReactCommand<StressTestGlobalCommand>(currentSystem);			system.Owner.World.AddLocalGenericReactComponent<ICounter>(system.Owner.Index, currentSystem, false);			system.Owner.World.AddGlobalGenericReactComponent<ICounter>(currentSystem, false);			system.Owner.World.AddGlobalReactComponent<TestReactComponent>(currentSystem, false);			system.Owner.World.AddLocalReactComponent<TestReactComponent>(system.Owner.Index, currentSystem, false);		}	}	public sealed class AwaitersUpdateSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{		}		public void UnBindSystem(ISystem system)		{		}	}	public sealed class PoolFxGlobalSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (PoolFxGlobalSystem)system;			currentSystem.fXHolderComponent = currentSystem.Owner.GetOrAddComponent<VisualFXHolderComponent>();		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (PoolFxGlobalSystem)system;			currentSystem.fXHolderComponent = null;		}	}	public sealed class ComicsWindowSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{		}		public void UnBindSystem(ISystem system)		{		}	}	public sealed class SearchNearestDropItemSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (SearchNearestDropItemSystem)system;			currentSystem.NearestDropItemsComponent = currentSystem.Owner.GetOrAddComponent<NearestDropItemsComponent>();			currentSystem.UnityTransformComponent = currentSystem.Owner.GetOrAddComponent<UnityTransformComponent>();		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (SearchNearestDropItemSystem)system;			currentSystem.NearestDropItemsComponent = null;			currentSystem.UnityTransformComponent = null;		}	}	public sealed class ArenaBattleIndicatorSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{		}		public void UnBindSystem(ISystem system)		{		}	}	public sealed class SphereMovementSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{		}		public void UnBindSystem(ISystem system)		{		}	}	public sealed class FlyDragonAnimationSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (FlyDragonAnimationSystem)system;			system.Owner.World.AddGlobalReactCommand<ItemAppliedCommand>(system, currentSystem);			LocalCommandListener<DamageForVisualFXCommand>.AddListener(currentSystem.Owner.World.Index,currentSystem);			LocalCommandListener<IsDeadCommand>.AddListener(currentSystem.Owner.World.Index,currentSystem);			currentSystem.UnityTransformComponent = currentSystem.Owner.GetOrAddComponent<UnityTransformComponent>();			currentSystem.RigidbodyProviderComponent = currentSystem.Owner.GetOrAddComponent<RigidbodyProviderComponent>();		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (FlyDragonAnimationSystem)system;			system.Owner.World.RemoveGlobalReactCommand<ItemAppliedCommand>(currentSystem);			LocalCommandListener<DamageForVisualFXCommand>.RemoveListener(currentSystem.Owner.WorldId, currentSystem);			LocalCommandListener<IsDeadCommand>.RemoveListener(currentSystem.Owner.WorldId, currentSystem);			currentSystem.UnityTransformComponent = null;			currentSystem.RigidbodyProviderComponent = null;		}	}	public sealed class GlobalRewardsVisualSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (GlobalRewardsVisualSystem)system;			system.Owner.World.AddGlobalReactCommand<ApplyRewardVisualCommand>(system, currentSystem);			LocalCommandListener<ApplyRewardVisualCommand>.AddListener(currentSystem.Owner.World.Index,currentSystem);			currentSystem.SoftCurrencyRewardVisualConfigComponent = currentSystem.Owner.GetOrAddComponent<SoftCurrencyRewardVisualConfigComponent>();		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (GlobalRewardsVisualSystem)system;			system.Owner.World.RemoveGlobalReactCommand<ApplyRewardVisualCommand>(currentSystem);			LocalCommandListener<ApplyRewardVisualCommand>.RemoveListener(currentSystem.Owner.WorldId, currentSystem);			currentSystem.SoftCurrencyRewardVisualConfigComponent = null;		}	}	public sealed class PoolingSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{		}		public void UnBindSystem(ISystem system)		{		}	}	public sealed class SplashScreenUISystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (SplashScreenUISystem)system;			currentSystem.SplashScreenUIComponent = currentSystem.Owner.GetOrAddComponent<SplashScreenUIComponent>();		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (SplashScreenUISystem)system;			currentSystem.SplashScreenUIComponent = null;		}	}	public sealed class SoftValueUISystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{		}		public void UnBindSystem(ISystem system)		{		}	}	public sealed class LoseScreenUISystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (LoseScreenUISystem)system;			currentSystem.FinalLevelScreenComponent = currentSystem.Owner.GetOrAddComponent<FinalLevelScreenComponent>();		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (LoseScreenUISystem)system;			currentSystem.FinalLevelScreenComponent = null;		}	}	public sealed class FindTargetEntitySystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (FindTargetEntitySystem)system;			currentSystem.FactionComponent = currentSystem.Owner.GetOrAddComponent<FactionComponent>();			currentSystem.TargetEntityComponent = currentSystem.Owner.GetOrAddComponent<TargetEntityComponent>();			currentSystem.UnityTransformComponent = currentSystem.Owner.GetOrAddComponent<UnityTransformComponent>();		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (FindTargetEntitySystem)system;			currentSystem.FactionComponent = null;			currentSystem.TargetEntityComponent = null;			currentSystem.UnityTransformComponent = null;		}	}	public sealed class DisableCollidersWhenDeadSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (DisableCollidersWhenDeadSystem)system;			LocalCommandListener<IsDeadCommand>.AddListener(currentSystem.Owner.World.Index,currentSystem);			currentSystem.rigidbodyProviderComponent = currentSystem.Owner.GetOrAddComponent<RigidbodyProviderComponent>();		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (DisableCollidersWhenDeadSystem)system;			LocalCommandListener<IsDeadCommand>.RemoveListener(currentSystem.Owner.WorldId, currentSystem);			currentSystem.rigidbodyProviderComponent = null;		}	}	public sealed class DestroyAfterDeadEndAnimationEventSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (DestroyAfterDeadEndAnimationEventSystem)system;			LocalCommandListener<AnimationEventCommand>.AddListener(currentSystem.Owner.World.Index,currentSystem);		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (DestroyAfterDeadEndAnimationEventSystem)system;			LocalCommandListener<AnimationEventCommand>.RemoveListener(currentSystem.Owner.WorldId, currentSystem);		}	}	public sealed class MainCharAttackSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (MainCharAttackSystem)system;			currentSystem.TargetEntityComponent = currentSystem.Owner.GetOrAddComponent<TargetEntityComponent>();		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (MainCharAttackSystem)system;			currentSystem.TargetEntityComponent = null;		}	}	public sealed class ApplyAimedItemSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (ApplyAimedItemSystem)system;			LocalCommandListener<TryApplyAimedItemCommand>.AddListener(currentSystem.Owner.World.Index,currentSystem);			system.Owner.World.AddGlobalReactCommand<ItemAppliedCommand>(system, currentSystem);			currentSystem.CharacterItemsComponent = currentSystem.Owner.GetOrAddComponent<CharacterItemsComponent>();			currentSystem.AbilityOwnerComponent = currentSystem.Owner.GetOrAddComponent<AbilityOwnerComponent>();		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (ApplyAimedItemSystem)system;			LocalCommandListener<TryApplyAimedItemCommand>.RemoveListener(currentSystem.Owner.WorldId, currentSystem);			system.Owner.World.RemoveGlobalReactCommand<ItemAppliedCommand>(currentSystem);			currentSystem.CharacterItemsComponent = null;			currentSystem.AbilityOwnerComponent = null;		}	}	public sealed class SphereCollisionsHolderSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (SphereCollisionsHolderSystem)system;			currentSystem.TransformComponent = currentSystem.Owner.GetOrAddComponent<UnityTransformComponent>();			currentSystem.CollisionsComponent = currentSystem.Owner.GetOrAddComponent<CollisionsComponent>();		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (SphereCollisionsHolderSystem)system;			currentSystem.TransformComponent = null;			currentSystem.CollisionsComponent = null;		}	}	public sealed class SpeedUpSphereSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (SpeedUpSphereSystem)system;			system.Owner.World.AddGlobalReactCommand<CardAbilityHandledCommand>(system, currentSystem);			currentSystem.SpeedUpSphereComponent = currentSystem.Owner.GetOrAddComponent<SpeedUpSphereComponent>();			currentSystem.SpeedComponent = currentSystem.Owner.GetOrAddComponent<SpeedComponent>();		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (SpeedUpSphereSystem)system;			system.Owner.World.RemoveGlobalReactCommand<CardAbilityHandledCommand>(currentSystem);			currentSystem.SpeedUpSphereComponent = null;			currentSystem.SpeedComponent = null;		}	}	public sealed class PegasusMovementSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (PegasusMovementSystem)system;			currentSystem.RigidbodyProviderComponent = currentSystem.Owner.GetOrAddComponent<RigidbodyProviderComponent>();			currentSystem.PegasusMovementComponent = currentSystem.Owner.GetOrAddComponent<PegasusMovementComponent>();		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (PegasusMovementSystem)system;			currentSystem.RigidbodyProviderComponent = null;			currentSystem.PegasusMovementComponent = null;		}	}	public sealed class DropItemSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (DropItemSystem)system;			LocalCommandListener<TriggerEnterCommand>.AddListener(currentSystem.Owner.World.Index,currentSystem);			currentSystem.DropItemComponent = currentSystem.Owner.GetOrAddComponent<DropItemComponent>();		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (DropItemSystem)system;			LocalCommandListener<TriggerEnterCommand>.RemoveListener(currentSystem.Owner.WorldId, currentSystem);			currentSystem.DropItemComponent = null;		}	}	public sealed class ShakeAnimationWhenDamagedSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (ShakeAnimationWhenDamagedSystem)system;			LocalCommandListener<DamageForVisualFXCommand>.AddListener(currentSystem.Owner.World.Index,currentSystem);			currentSystem.TransformComponent = currentSystem.Owner.GetOrAddComponent<UnityTransformComponent>();		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (ShakeAnimationWhenDamagedSystem)system;			LocalCommandListener<DamageForVisualFXCommand>.RemoveListener(currentSystem.Owner.WorldId, currentSystem);			currentSystem.TransformComponent = null;		}	}	public sealed class MainCharLevelingSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (MainCharLevelingSystem)system;			system.Owner.World.AddGlobalReactCommand<TransitionGameStateCommand>(system, currentSystem);			currentSystem.HealthComponent = currentSystem.Owner.GetOrAddComponent<HealthComponent>();			currentSystem.EnergyComponent = currentSystem.Owner.GetOrAddComponent<EnergyComponent>();		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (MainCharLevelingSystem)system;			system.Owner.World.RemoveGlobalReactCommand<TransitionGameStateCommand>(currentSystem);			currentSystem.HealthComponent = null;			currentSystem.EnergyComponent = null;		}	}	public sealed class MoveEnemyToSpawnPointSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (MoveEnemyToSpawnPointSystem)system;			currentSystem.UnityTransformComponent = currentSystem.Owner.GetOrAddComponent<UnityTransformComponent>();			currentSystem.RigidbodyProviderComponent = currentSystem.Owner.GetOrAddComponent<RigidbodyProviderComponent>();		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (MoveEnemyToSpawnPointSystem)system;			currentSystem.UnityTransformComponent = null;			currentSystem.RigidbodyProviderComponent = null;		}	}	public sealed class AssetsServiceSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{		}		public void UnBindSystem(ISystem system)		{		}	}	public sealed class IndicateDamageSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (IndicateDamageSystem)system;			LocalCommandListener<DamageForVisualFXCommand>.AddListener(currentSystem.Owner.World.Index,currentSystem);		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (IndicateDamageSystem)system;			LocalCommandListener<DamageForVisualFXCommand>.RemoveListener(currentSystem.Owner.WorldId, currentSystem);		}	}	public sealed class InitSpawnPointSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (InitSpawnPointSystem)system;			currentSystem.SpawnPointComponent = currentSystem.Owner.GetOrAddComponent<SpawnPointComponent>();		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (InitSpawnPointSystem)system;			currentSystem.SpawnPointComponent = null;		}	}	public sealed class FireballItemVisualSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (FireballItemVisualSystem)system;			LocalCommandListener<TryApplyItemCommand>.AddListener(currentSystem.Owner.World.Index,currentSystem);		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (FireballItemVisualSystem)system;			LocalCommandListener<TryApplyItemCommand>.RemoveListener(currentSystem.Owner.WorldId, currentSystem);		}	}	public sealed class DropPartsHealthVisualSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (DropPartsHealthVisualSystem)system;			currentSystem.HealthComponent = currentSystem.Owner.GetOrAddComponent<HealthComponent>();		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (DropPartsHealthVisualSystem)system;			currentSystem.HealthComponent = null;		}	}	public sealed class EnergyRegenerationSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (EnergyRegenerationSystem)system;			currentSystem.EnergyRegenerationComponent = currentSystem.Owner.GetOrAddComponent<EnergyRegenerationComponent>();			currentSystem.EnergyComponent = currentSystem.Owner.GetOrAddComponent<EnergyComponent>();		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (EnergyRegenerationSystem)system;			currentSystem.EnergyRegenerationComponent = null;			currentSystem.EnergyComponent = null;		}	}	public sealed class CollideItemSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (CollideItemSystem)system;			LocalCommandListener<TriggerEnterCommand>.AddListener(currentSystem.Owner.World.Index,currentSystem);			currentSystem.DamageComponent = currentSystem.Owner.GetOrAddComponent<DamageComponent>();			currentSystem.BelongingComponent = currentSystem.Owner.GetOrAddComponent<BelongingComponent>();		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (CollideItemSystem)system;			LocalCommandListener<TriggerEnterCommand>.RemoveListener(currentSystem.Owner.WorldId, currentSystem);			currentSystem.DamageComponent = null;			currentSystem.BelongingComponent = null;		}	}	public sealed class VFXCreationSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (VFXCreationSystem)system;			system.Owner.World.AddGlobalReactCommand<SpawnFXCommand>(system, currentSystem);		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (VFXCreationSystem)system;			system.Owner.World.RemoveGlobalReactCommand<SpawnFXCommand>(currentSystem);		}	}	public sealed class RemoveComponentWorldSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (RemoveComponentWorldSystem)system;			system.Owner.World.AddGlobalReactCommand<RemoveHecsComponentWorldCommand>(system, currentSystem);			system.Owner.World.AddGlobalReactCommand<AddHecsComponentWorldCommand>(system, currentSystem);		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (RemoveComponentWorldSystem)system;			system.Owner.World.RemoveGlobalReactCommand<RemoveHecsComponentWorldCommand>(currentSystem);			system.Owner.World.RemoveGlobalReactCommand<AddHecsComponentWorldCommand>(currentSystem);		}	}	public sealed class DestroyEntityWorldSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (DestroyEntityWorldSystem)system;			system.Owner.World.AddGlobalReactCommand<DestroyEntityWorldCommand>(system, currentSystem);		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (DestroyEntityWorldSystem)system;			system.Owner.World.RemoveGlobalReactCommand<DestroyEntityWorldCommand>(currentSystem);		}	}	public sealed class DamageTextVisualizerManagerSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (DamageTextVisualizerManagerSystem)system;			system.Owner.World.AddGlobalReactCommand<DamageForVisualFXCommand>(system, currentSystem);		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (DamageTextVisualizerManagerSystem)system;			system.Owner.World.RemoveGlobalReactCommand<DamageForVisualFXCommand>(currentSystem);		}	}	public sealed class CardsControllerUISystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (CardsControllerUISystem)system;			system.Owner.World.AddGlobalReactCommand<CardActivatedCommand>(system, currentSystem);		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (CardsControllerUISystem)system;			system.Owner.World.RemoveGlobalReactCommand<CardActivatedCommand>(currentSystem);		}	}	public sealed class SceneManagerSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{		}		public void UnBindSystem(ISystem system)		{		}	}	public sealed class HealthSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (HealthSystem)system;			LocalCommandListener<DamageCommand<float>>.AddListener(currentSystem.Owner.World.Index,currentSystem);			LocalCommandListener<HealCommand>.AddListener(currentSystem.Owner.World.Index,currentSystem);			currentSystem.healthComponent = currentSystem.Owner.GetOrAddComponent<HealthComponent>();		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (HealthSystem)system;			LocalCommandListener<DamageCommand<float>>.RemoveListener(currentSystem.Owner.WorldId, currentSystem);			LocalCommandListener<HealCommand>.RemoveListener(currentSystem.Owner.WorldId, currentSystem);			currentSystem.healthComponent = null;		}	}	public sealed class DestroyDeadEntitySystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (DestroyDeadEntitySystem)system;			LocalCommandListener<IsDeadCommand>.AddListener(currentSystem.Owner.World.Index,currentSystem);		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (DestroyDeadEntitySystem)system;			LocalCommandListener<IsDeadCommand>.RemoveListener(currentSystem.Owner.WorldId, currentSystem);		}	}	public sealed class StickFollowSystemBindContainerForSys : ISystemSetter	{		private FieldInfo radiusComponentFieldBinding = typeof(StickFollowSystem).GetField("radiusComponent", BindingFlags.Instance | BindingFlags.NonPublic);		public void BindSystem(ISystem system)		{			var currentSystem = (StickFollowSystem)system;			radiusComponentFieldBinding.SetValue(currentSystem, currentSystem.Owner.GetOrAddComponent<RadiusComponent>());		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (StickFollowSystem)system;			radiusComponentFieldBinding.SetValue(system, null);		}	}	public sealed class ReleaseActorAssetReferenceSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (ReleaseActorAssetReferenceSystem)system;			system.Owner.World.AddGlobalReactCommand<ActorViewDisposedCommand>(system, currentSystem);		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (ReleaseActorAssetReferenceSystem)system;			system.Owner.World.RemoveGlobalReactCommand<ActorViewDisposedCommand>(currentSystem);		}	}	public sealed class StateUpdateSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{		}		public void UnBindSystem(ISystem system)		{		}	}	public sealed class CountersHolderSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (CountersHolderSystem)system;			LocalCommandListener<AddCounterModifierCommand<float>>.AddListener(currentSystem.Owner.World.Index,currentSystem);			LocalCommandListener<AddCounterModifierCommand<int>>.AddListener(currentSystem.Owner.World.Index,currentSystem);			LocalCommandListener<AddCounterModifierBySubIDCommand<float>>.AddListener(currentSystem.Owner.World.Index,currentSystem);			LocalCommandListener<RemoveCounterModifierCommand<float>>.AddListener(currentSystem.Owner.World.Index,currentSystem);			LocalCommandListener<RemoveCounterModifierCommand<int>>.AddListener(currentSystem.Owner.World.Index,currentSystem);			LocalCommandListener<ResetCountersCommand>.AddListener(currentSystem.Owner.World.Index,currentSystem);			system.Owner.World.AddLocalGenericReactComponent<ICounter>(system.Owner.Index, currentSystem, true);			currentSystem.countersHolder = currentSystem.Owner.GetOrAddComponent<CountersHolderComponent>();		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (CountersHolderSystem)system;			LocalCommandListener<AddCounterModifierCommand<float>>.RemoveListener(currentSystem.Owner.WorldId, currentSystem);			LocalCommandListener<AddCounterModifierCommand<int>>.RemoveListener(currentSystem.Owner.WorldId, currentSystem);			LocalCommandListener<AddCounterModifierBySubIDCommand<float>>.RemoveListener(currentSystem.Owner.WorldId, currentSystem);			LocalCommandListener<RemoveCounterModifierCommand<float>>.RemoveListener(currentSystem.Owner.WorldId, currentSystem);			LocalCommandListener<RemoveCounterModifierCommand<int>>.RemoveListener(currentSystem.Owner.WorldId, currentSystem);			LocalCommandListener<ResetCountersCommand>.RemoveListener(currentSystem.Owner.WorldId, currentSystem);			system.Owner.World.AddLocalGenericReactComponent<ICounter>(system.Owner.Index, currentSystem, false);			currentSystem.countersHolder = null;		}	}	public sealed class UISystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (UISystem)system;			system.Owner.World.AddGlobalReactCommand<ShowUICommand>(system, currentSystem);			system.Owner.World.AddGlobalReactCommand<HideUICommand>(system, currentSystem);			system.Owner.World.AddGlobalReactCommand<UIGroupCommand>(system, currentSystem);			system.Owner.World.AddGlobalReactCommand<CanvasReadyCommand>(system, currentSystem);		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (UISystem)system;			system.Owner.World.RemoveGlobalReactCommand<ShowUICommand>(currentSystem);			system.Owner.World.RemoveGlobalReactCommand<HideUICommand>(currentSystem);			system.Owner.World.RemoveGlobalReactCommand<UIGroupCommand>(currentSystem);			system.Owner.World.RemoveGlobalReactCommand<CanvasReadyCommand>(currentSystem);		}	}	public sealed class AdditionalCanvasesSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (AdditionalCanvasesSystem)system;			currentSystem.MainCanvasTagComponent = currentSystem.Owner.GetOrAddComponent<MainCanvasTagComponent>();		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (AdditionalCanvasesSystem)system;			currentSystem.MainCanvasTagComponent = null;		}	}	public sealed class UpgradeWindowSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (UpgradeWindowSystem)system;			currentSystem.UpgradeWindowComponent = currentSystem.Owner.GetOrAddComponent<UpgradeWindowComponent>();		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (UpgradeWindowSystem)system;			currentSystem.UpgradeWindowComponent = null;		}	}	public sealed class FinalScreenUISystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (FinalScreenUISystem)system;			currentSystem.FinalLevelScreenComponent = currentSystem.Owner.GetOrAddComponent<FinalLevelScreenComponent>();		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (FinalScreenUISystem)system;			currentSystem.FinalLevelScreenComponent = null;		}	}	public sealed class DrawHPUISystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (DrawHPUISystem)system;			LocalCommandListener<RedrawBarCommand<float>>.AddListener(currentSystem.Owner.World.Index,currentSystem);			LocalCommandListener<SetColorCommand>.AddListener(currentSystem.Owner.World.Index,currentSystem);		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (DrawHPUISystem)system;			LocalCommandListener<RedrawBarCommand<float>>.RemoveListener(currentSystem.Owner.WorldId, currentSystem);			LocalCommandListener<SetColorCommand>.RemoveListener(currentSystem.Owner.WorldId, currentSystem);		}	}	public sealed class ArenaBattleUIWindowBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{		}		public void UnBindSystem(ISystem system)		{		}	}	public sealed class SaveLoadSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (SaveLoadSystem)system;			system.Owner.World.AddGlobalReactCommand<SaveCommand>(system, currentSystem);		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (SaveLoadSystem)system;			system.Owner.World.RemoveGlobalReactCommand<SaveCommand>(currentSystem);		}	}	public sealed class SendLocalAnimationEventCommandsToAbilitiesSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (SendLocalAnimationEventCommandsToAbilitiesSystem)system;			LocalCommandListener<AnimationEventCommand>.AddListener(currentSystem.Owner.World.Index,currentSystem);			currentSystem.AbilitiesHolderComponent = currentSystem.Owner.GetOrAddComponent<AbilitiesHolderComponent>();		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (SendLocalAnimationEventCommandsToAbilitiesSystem)system;			LocalCommandListener<AnimationEventCommand>.RemoveListener(currentSystem.Owner.WorldId, currentSystem);			currentSystem.AbilitiesHolderComponent = null;		}	}	public sealed class StopAIWhenDeadSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (StopAIWhenDeadSystem)system;			LocalCommandListener<IsDeadCommand>.AddListener(currentSystem.Owner.World.Index,currentSystem);		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (StopAIWhenDeadSystem)system;			LocalCommandListener<IsDeadCommand>.RemoveListener(currentSystem.Owner.WorldId, currentSystem);		}	}	public sealed class HandleCooldownGlobalSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{		}		public void UnBindSystem(ISystem system)		{		}	}	public sealed class SpawnDropItemsSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (SpawnDropItemsSystem)system;			system.Owner.World.AddGlobalReactCommand<TransitionGameStateCommand>(system, currentSystem);			currentSystem.SpawnDropItemsComponent = currentSystem.Owner.GetOrAddComponent<SpawnDropItemsComponent>();		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (SpawnDropItemsSystem)system;			system.Owner.World.RemoveGlobalReactCommand<TransitionGameStateCommand>(currentSystem);			currentSystem.SpawnDropItemsComponent = null;		}	}	public sealed class SphereCollisionParticleSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{		}		public void UnBindSystem(ISystem system)		{		}	}	public sealed class SlowdownSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (SlowdownSystem)system;			system.Owner.World.AddGlobalReactCommand<CardAbilityHandledCommand>(system, currentSystem);			currentSystem.SlowdownComponent = currentSystem.Owner.GetOrAddComponent<SlowdownComponent>();		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (SlowdownSystem)system;			system.Owner.World.RemoveGlobalReactCommand<CardAbilityHandledCommand>(currentSystem);			currentSystem.SlowdownComponent = null;		}	}	public sealed class HideUISystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (HideUISystem)system;			LocalCommandListener<HideUICommand>.AddListener(currentSystem.Owner.World.Index,currentSystem);		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (HideUISystem)system;			LocalCommandListener<HideUICommand>.RemoveListener(currentSystem.Owner.WorldId, currentSystem);		}	}	public sealed class InputListenSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{		}		public void UnBindSystem(ISystem system)		{		}	}	public sealed class InjectComponentsFromActorSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{		}		public void UnBindSystem(ISystem system)		{		}	}	public sealed class WaitingCommandsSystemsBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (WaitingCommandsSystems)system;			system.Owner.World.AddGlobalReactCommand<WaitAndEntityCallbackCommand>(system, currentSystem);			system.Owner.World.AddGlobalReactCommand<WaitAndCallbackCommand>(system, currentSystem);		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (WaitingCommandsSystems)system;			system.Owner.World.RemoveGlobalReactCommand<WaitAndEntityCallbackCommand>(currentSystem);			system.Owner.World.RemoveGlobalReactCommand<WaitAndCallbackCommand>(currentSystem);		}	}	public sealed class AnimationDoneCheckOutSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (AnimationDoneCheckOutSystem)system;			LocalCommandListener<AnimationEventCommand>.AddListener(currentSystem.Owner.World.Index,currentSystem);			LocalCommandListener<AnimationDoneCheckOut>.AddListener(currentSystem.Owner.World.Index,currentSystem);			LocalCommandListener<AnimationCycleCheckout>.AddListener(currentSystem.Owner.World.Index,currentSystem);			currentSystem.animationCheckOutsHolder = currentSystem.Owner.GetOrAddComponent<AnimationCheckOutsHolderComponent>();		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (AnimationDoneCheckOutSystem)system;			LocalCommandListener<AnimationEventCommand>.RemoveListener(currentSystem.Owner.WorldId, currentSystem);			LocalCommandListener<AnimationDoneCheckOut>.RemoveListener(currentSystem.Owner.WorldId, currentSystem);			LocalCommandListener<AnimationCycleCheckout>.RemoveListener(currentSystem.Owner.WorldId, currentSystem);			currentSystem.animationCheckOutsHolder = null;		}	}	public sealed class SoundGlobalSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (SoundGlobalSystem)system;			system.Owner.World.AddGlobalReactCommand<PlaySoundCommand>(system, currentSystem);			system.Owner.World.AddGlobalReactCommand<StopSoundCommand>(system, currentSystem);			system.Owner.World.AddGlobalReactCommand<UpdateSoundOptionsCommand>(system, currentSystem);		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (SoundGlobalSystem)system;			system.Owner.World.RemoveGlobalReactCommand<PlaySoundCommand>(currentSystem);			system.Owner.World.RemoveGlobalReactCommand<StopSoundCommand>(currentSystem);			system.Owner.World.RemoveGlobalReactCommand<UpdateSoundOptionsCommand>(currentSystem);		}	}	public sealed class UpdateTranformFromActorSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (UpdateTranformFromActorSystem)system;			currentSystem.transformComponent = currentSystem.Owner.GetOrAddComponent<TransformComponent>();		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (UpdateTranformFromActorSystem)system;			currentSystem.transformComponent = null;		}	}	public sealed class UpdateActorByTranformSystemBindContainerForSys : ISystemSetter	{		private FieldInfo transformComponentFieldBinding = typeof(UpdateActorByTranformSystem).GetField("transformComponent", BindingFlags.Instance | BindingFlags.NonPublic);		public void BindSystem(ISystem system)		{			var currentSystem = (UpdateActorByTranformSystem)system;			transformComponentFieldBinding.SetValue(currentSystem, currentSystem.Owner.GetOrAddComponent<TransformComponent>());		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (UpdateActorByTranformSystem)system;			transformComponentFieldBinding.SetValue(system, null);		}	}	public sealed class StartSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{		}		public void UnBindSystem(ISystem system)		{		}	}	public sealed class AbilitiesSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (AbilitiesSystem)system;			LocalCommandListener<ExecuteAbilityByIDCommand>.AddListener(currentSystem.Owner.World.Index,currentSystem);			system.Owner.World.AddLocalReactComponent<ViewReadyTagComponent>(system.Owner.Index, currentSystem, true);			currentSystem.abilitiesHolderComponent = currentSystem.Owner.GetOrAddComponent<AbilitiesHolderComponent>();		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (AbilitiesSystem)system;			LocalCommandListener<ExecuteAbilityByIDCommand>.RemoveListener(currentSystem.Owner.WorldId, currentSystem);			system.Owner.World.AddLocalReactComponent<ViewReadyTagComponent>(system.Owner.Index, currentSystem, false);			currentSystem.abilitiesHolderComponent = null;		}	}	public sealed class StrategiesMainServiceSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{		}		public void UnBindSystem(ISystem system)		{		}	}	public sealed class StartMenuUISystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (StartMenuUISystem)system;			system.Owner.World.AddGlobalReactCommand<LevelUpCommand>(system, currentSystem);		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (StartMenuUISystem)system;			system.Owner.World.RemoveGlobalReactCommand<LevelUpCommand>(currentSystem);		}	}	public sealed class MainCharacterHealthUISystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{		}		public void UnBindSystem(ISystem system)		{		}	}	public sealed class LevelBattleUISystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (LevelBattleUISystem)system;			system.Owner.World.AddGlobalReactCommand<TransitionGameStateCommand>(system, currentSystem);		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (LevelBattleUISystem)system;			system.Owner.World.RemoveGlobalReactCommand<TransitionGameStateCommand>(currentSystem);		}	}	public sealed class EnergyUISystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{		}		public void UnBindSystem(ISystem system)		{		}	}	public sealed class RotateToTargetSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (RotateToTargetSystem)system;			currentSystem.UnityTransformComponent = currentSystem.Owner.GetOrAddComponent<UnityTransformComponent>();			currentSystem.TargetEntityComponent = currentSystem.Owner.GetOrAddComponent<TargetEntityComponent>();			currentSystem.RotationComponent = currentSystem.Owner.GetOrAddComponent<RotationComponent>();		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (RotateToTargetSystem)system;			currentSystem.UnityTransformComponent = null;			currentSystem.TargetEntityComponent = null;			currentSystem.RotationComponent = null;		}	}	public sealed class DeathAnimationWhenDeadSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (DeathAnimationWhenDeadSystem)system;			system.Owner.World.AddLocalReactComponent<IsDeadTagComponent>(system.Owner.Index, currentSystem, true);		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (DeathAnimationWhenDeadSystem)system;			system.Owner.World.AddLocalReactComponent<IsDeadTagComponent>(system.Owner.Index, currentSystem, false);		}	}	public sealed class SphereDamageSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (SphereDamageSystem)system;			LocalCommandListener<CollideActorCommand>.AddListener(currentSystem.Owner.World.Index,currentSystem);			currentSystem.DamageComponent = currentSystem.Owner.GetOrAddComponent<DamageComponent>();		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (SphereDamageSystem)system;			LocalCommandListener<CollideActorCommand>.RemoveListener(currentSystem.Owner.WorldId, currentSystem);			currentSystem.DamageComponent = null;		}	}	public sealed class UpgradeVisualMainCharacterSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (UpgradeVisualMainCharacterSystem)system;			system.Owner.World.AddGlobalReactCommand<LevelUpCommand>(system, currentSystem);		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (UpgradeVisualMainCharacterSystem)system;			system.Owner.World.RemoveGlobalReactCommand<LevelUpCommand>(currentSystem);		}	}	public sealed class ItemThrowingSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (ItemThrowingSystem)system;			LocalCommandListener<TryApplyItemCommand>.AddListener(currentSystem.Owner.World.Index,currentSystem);			currentSystem.RigidbodyProviderComponent = currentSystem.Owner.GetOrAddComponent<RigidbodyProviderComponent>();		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (ItemThrowingSystem)system;			LocalCommandListener<TryApplyItemCommand>.RemoveListener(currentSystem.Owner.WorldId, currentSystem);			currentSystem.RigidbodyProviderComponent = null;		}	}	public sealed class MultipleCollectItemsSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (MultipleCollectItemsSystem)system;			system.Owner.World.AddGlobalReactCommand<MultipleItemsFxCommand>(system, currentSystem);			currentSystem.VFXCreationSystem = currentSystem.Owner.World.GetSingleSystem<VFXCreationSystem>();		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (MultipleCollectItemsSystem)system;			system.Owner.World.RemoveGlobalReactCommand<MultipleItemsFxCommand>(currentSystem);			currentSystem.VFXCreationSystem = null;		}	}	public sealed class StartMenuStateSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (StartMenuStateSystem)system;			system.Owner.World.AddGlobalReactCommand<TransitionGameStateCommand>(system, currentSystem);			system.Owner.World.AddGlobalReactCommand<StopGameStateGlobalCommand>(system, currentSystem);		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (StartMenuStateSystem)system;			system.Owner.World.RemoveGlobalReactCommand<TransitionGameStateCommand>(currentSystem);			system.Owner.World.RemoveGlobalReactCommand<StopGameStateGlobalCommand>(currentSystem);		}	}	public sealed class FinishArenaStateSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (FinishArenaStateSystem)system;			system.Owner.World.AddGlobalReactCommand<TransitionGameStateCommand>(system, currentSystem);			system.Owner.World.AddGlobalReactCommand<StopGameStateGlobalCommand>(system, currentSystem);		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (FinishArenaStateSystem)system;			system.Owner.World.RemoveGlobalReactCommand<TransitionGameStateCommand>(currentSystem);			system.Owner.World.RemoveGlobalReactCommand<StopGameStateGlobalCommand>(currentSystem);		}	}	public sealed class BattleStateSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (BattleStateSystem)system;			system.Owner.World.AddGlobalReactCommand<TransitionGameStateCommand>(system, currentSystem);			system.Owner.World.AddGlobalReactCommand<StopGameStateGlobalCommand>(system, currentSystem);		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (BattleStateSystem)system;			system.Owner.World.RemoveGlobalReactCommand<TransitionGameStateCommand>(currentSystem);			system.Owner.World.RemoveGlobalReactCommand<StopGameStateGlobalCommand>(currentSystem);		}	}	public sealed class PrepareArenaStateSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (PrepareArenaStateSystem)system;			system.Owner.World.AddGlobalReactCommand<TransitionGameStateCommand>(system, currentSystem);			system.Owner.World.AddGlobalReactCommand<StopGameStateGlobalCommand>(system, currentSystem);		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (PrepareArenaStateSystem)system;			system.Owner.World.RemoveGlobalReactCommand<TransitionGameStateCommand>(currentSystem);			system.Owner.World.RemoveGlobalReactCommand<StopGameStateGlobalCommand>(currentSystem);		}	}	public sealed class ArenaStateSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (ArenaStateSystem)system;			system.Owner.World.AddGlobalReactCommand<TransitionGameStateCommand>(system, currentSystem);			system.Owner.World.AddGlobalReactCommand<StopGameStateGlobalCommand>(system, currentSystem);		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (ArenaStateSystem)system;			system.Owner.World.RemoveGlobalReactCommand<TransitionGameStateCommand>(currentSystem);			system.Owner.World.RemoveGlobalReactCommand<StopGameStateGlobalCommand>(currentSystem);		}	}	public sealed class PrepareWaveStateSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (PrepareWaveStateSystem)system;			system.Owner.World.AddGlobalReactCommand<TransitionGameStateCommand>(system, currentSystem);			system.Owner.World.AddGlobalReactCommand<StopGameStateGlobalCommand>(system, currentSystem);		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (PrepareWaveStateSystem)system;			system.Owner.World.RemoveGlobalReactCommand<TransitionGameStateCommand>(currentSystem);			system.Owner.World.RemoveGlobalReactCommand<StopGameStateGlobalCommand>(currentSystem);		}	}	public sealed class FinalStateSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (FinalStateSystem)system;			system.Owner.World.AddGlobalReactCommand<TransitionGameStateCommand>(system, currentSystem);			system.Owner.World.AddGlobalReactCommand<StopGameStateGlobalCommand>(system, currentSystem);		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (FinalStateSystem)system;			system.Owner.World.RemoveGlobalReactCommand<TransitionGameStateCommand>(currentSystem);			system.Owner.World.RemoveGlobalReactCommand<StopGameStateGlobalCommand>(currentSystem);		}	}	public sealed class PrepareBattleStateSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (PrepareBattleStateSystem)system;			system.Owner.World.AddGlobalReactCommand<TransitionGameStateCommand>(system, currentSystem);			system.Owner.World.AddGlobalReactCommand<StopGameStateGlobalCommand>(system, currentSystem);		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (PrepareBattleStateSystem)system;			system.Owner.World.RemoveGlobalReactCommand<TransitionGameStateCommand>(currentSystem);			system.Owner.World.RemoveGlobalReactCommand<StopGameStateGlobalCommand>(currentSystem);		}	}	public sealed class HealCardSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{		}		public void UnBindSystem(ISystem system)		{		}	}	public sealed class ExplodeCardSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{		}		public void UnBindSystem(ISystem system)		{		}	}	public sealed class CardPushSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (CardPushSystem)system;			currentSystem.PushDirectionComponent = currentSystem.Owner.GetOrAddComponent<PushDirectionComponent>();		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (CardPushSystem)system;			currentSystem.PushDirectionComponent = null;		}	}	public sealed class AddSphereCardSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{		}		public void UnBindSystem(ISystem system)		{		}	}	public sealed class ChoosingPushDirCardSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{		}		public void UnBindSystem(ISystem system)		{		}	}	public sealed class AnimationSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (AnimationSystem)system;			LocalCommandListener<BoolAnimationCommand>.AddListener(currentSystem.Owner.World.Index,currentSystem);			LocalCommandListener<FloatAnimationCommand>.AddListener(currentSystem.Owner.World.Index,currentSystem);			LocalCommandListener<IntAnimationCommand>.AddListener(currentSystem.Owner.World.Index,currentSystem);			LocalCommandListener<TriggerAnimationCommand>.AddListener(currentSystem.Owner.World.Index,currentSystem);			currentSystem.AnimatorStateComponent = currentSystem.Owner.GetOrAddComponent<AnimatorStateComponent>();		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (AnimationSystem)system;			LocalCommandListener<BoolAnimationCommand>.RemoveListener(currentSystem.Owner.WorldId, currentSystem);			LocalCommandListener<FloatAnimationCommand>.RemoveListener(currentSystem.Owner.WorldId, currentSystem);			LocalCommandListener<IntAnimationCommand>.RemoveListener(currentSystem.Owner.WorldId, currentSystem);			LocalCommandListener<TriggerAnimationCommand>.RemoveListener(currentSystem.Owner.WorldId, currentSystem);			currentSystem.AnimatorStateComponent = null;		}	}	public sealed class CompositeAbilitiesSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (CompositeAbilitiesSystem)system;			LocalCommandListener<ExecuteAbilityCommand>.AddListener(currentSystem.Owner.World.Index,currentSystem);		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (CompositeAbilitiesSystem)system;			LocalCommandListener<ExecuteAbilityCommand>.RemoveListener(currentSystem.Owner.WorldId, currentSystem);		}	}	public sealed class GamePhasesSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (GamePhasesSystem)system;			system.Owner.World.AddGlobalReactCommand<EndGameStateCommand>(system, currentSystem);			system.Owner.World.AddGlobalReactCommand<ForceGameStateTransitionGlobalCommand>(system, currentSystem);			currentSystem.GameStateComponent = currentSystem.Owner.GetOrAddComponent<GameStateComponent>();		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (GamePhasesSystem)system;			system.Owner.World.RemoveGlobalReactCommand<EndGameStateCommand>(currentSystem);			system.Owner.World.RemoveGlobalReactCommand<ForceGameStateTransitionGlobalCommand>(currentSystem);			currentSystem.GameStateComponent = null;		}	}	public sealed class RotateCharacterItemsSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (RotateCharacterItemsSystem)system;			LocalCommandListener<ExecuteAbilityCommand>.AddListener(currentSystem.Owner.World.Index,currentSystem);			LocalCommandListener<AddItemToCharacterCommand>.AddListener(currentSystem.Owner.World.Index,currentSystem);			LocalCommandListener<RemoveItemToCharacterCommand>.AddListener(currentSystem.Owner.World.Index,currentSystem);			currentSystem.CharacterItemsComponent = currentSystem.Owner.GetOrAddComponent<CharacterItemsComponent>();		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (RotateCharacterItemsSystem)system;			LocalCommandListener<ExecuteAbilityCommand>.RemoveListener(currentSystem.Owner.WorldId, currentSystem);			LocalCommandListener<AddItemToCharacterCommand>.RemoveListener(currentSystem.Owner.WorldId, currentSystem);			LocalCommandListener<RemoveItemToCharacterCommand>.RemoveListener(currentSystem.Owner.WorldId, currentSystem);			currentSystem.CharacterItemsComponent = null;		}	}	public sealed class AutoApplyItemsWhenStaySystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (AutoApplyItemsWhenStaySystem)system;			LocalCommandListener<ExecuteAbilityCommand>.AddListener(currentSystem.Owner.World.Index,currentSystem);			currentSystem.CooldownComponent = currentSystem.Owner.GetOrAddComponent<CooldownComponent>();			currentSystem.CharacterItemsComponent = currentSystem.Owner.GetOrAddComponent<CharacterItemsComponent>();		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (AutoApplyItemsWhenStaySystem)system;			LocalCommandListener<ExecuteAbilityCommand>.RemoveListener(currentSystem.Owner.WorldId, currentSystem);			currentSystem.CooldownComponent = null;			currentSystem.CharacterItemsComponent = null;		}	}	public sealed class FireballRingAbilitySystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (FireballRingAbilitySystem)system;			LocalCommandListener<ExecuteAbilityCommand>.AddListener(currentSystem.Owner.World.Index,currentSystem);			currentSystem.CharacterItemsComponent = currentSystem.Owner.GetOrAddComponent<CharacterItemsComponent>();		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (FireballRingAbilitySystem)system;			LocalCommandListener<ExecuteAbilityCommand>.RemoveListener(currentSystem.Owner.WorldId, currentSystem);			currentSystem.CharacterItemsComponent = null;		}	}	public sealed class DefaultAttackAbilitySystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (DefaultAttackAbilitySystem)system;			LocalCommandListener<ExecuteAbilityCommand>.AddListener(currentSystem.Owner.World.Index,currentSystem);		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (DefaultAttackAbilitySystem)system;			LocalCommandListener<ExecuteAbilityCommand>.RemoveListener(currentSystem.Owner.WorldId, currentSystem);		}	}	public sealed class DragonDefaultAttackAbilitySystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (DragonDefaultAttackAbilitySystem)system;			LocalCommandListener<ExecuteAbilityCommand>.AddListener(currentSystem.Owner.World.Index,currentSystem);			currentSystem.CooldownComponent = currentSystem.Owner.GetOrAddComponent<CooldownComponent>();		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (DragonDefaultAttackAbilitySystem)system;			LocalCommandListener<ExecuteAbilityCommand>.RemoveListener(currentSystem.Owner.WorldId, currentSystem);			currentSystem.CooldownComponent = null;		}	}	public sealed class HealAbilitySystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (HealAbilitySystem)system;			LocalCommandListener<ExecuteAbilityCommand>.AddListener(currentSystem.Owner.World.Index,currentSystem);			currentSystem.HealthComponent = currentSystem.Owner.GetOrAddComponent<HealthComponent>();			currentSystem.HealAbilityComponent = currentSystem.Owner.GetOrAddComponent<HealAbilityComponent>();		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (HealAbilitySystem)system;			LocalCommandListener<ExecuteAbilityCommand>.RemoveListener(currentSystem.Owner.WorldId, currentSystem);			currentSystem.HealthComponent = null;			currentSystem.HealAbilityComponent = null;		}	}	public sealed class ExplodeSpheresAbilitySystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (ExplodeSpheresAbilitySystem)system;			LocalCommandListener<ExecuteAbilityCommand>.AddListener(currentSystem.Owner.World.Index,currentSystem);			currentSystem.Component = currentSystem.Owner.GetOrAddComponent<ExplodeSpheresAbilityComponent>();			currentSystem.DamageComponent = currentSystem.Owner.GetOrAddComponent<DamageComponent>();		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (ExplodeSpheresAbilitySystem)system;			LocalCommandListener<ExecuteAbilityCommand>.RemoveListener(currentSystem.Owner.WorldId, currentSystem);			currentSystem.Component = null;			currentSystem.DamageComponent = null;		}	}	public sealed class AddSphereAbilitySystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (AddSphereAbilitySystem)system;			LocalCommandListener<ExecuteAbilityCommand>.AddListener(currentSystem.Owner.World.Index,currentSystem);			LocalCommandListener<AnimationEventCommand>.AddListener(currentSystem.Owner.World.Index,currentSystem);		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (AddSphereAbilitySystem)system;			LocalCommandListener<ExecuteAbilityCommand>.RemoveListener(currentSystem.Owner.WorldId, currentSystem);			LocalCommandListener<AnimationEventCommand>.RemoveListener(currentSystem.Owner.WorldId, currentSystem);		}	}	public sealed class SpherePushAbilitySystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (SpherePushAbilitySystem)system;			LocalCommandListener<ExecuteAbilityCommand>.AddListener(currentSystem.Owner.World.Index,currentSystem);		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (SpherePushAbilitySystem)system;			LocalCommandListener<ExecuteAbilityCommand>.RemoveListener(currentSystem.Owner.WorldId, currentSystem);		}	}	public sealed class ChoosingPushDirectionSphereAbilitySystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (ChoosingPushDirectionSphereAbilitySystem)system;			LocalCommandListener<ExecuteAbilityCommand>.AddListener(currentSystem.Owner.World.Index,currentSystem);			LocalCommandListener<InputStartedCommand>.AddListener(currentSystem.Owner.World.Index,currentSystem);			system.Owner.World.AddGlobalReactCommand<TransitionGameStateCommand>(system, currentSystem);			currentSystem.Component = currentSystem.Owner.GetOrAddComponent<ChoosingPushDirectionSphereAbilityComponent>();		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (ChoosingPushDirectionSphereAbilitySystem)system;			LocalCommandListener<ExecuteAbilityCommand>.RemoveListener(currentSystem.Owner.WorldId, currentSystem);			LocalCommandListener<InputStartedCommand>.RemoveListener(currentSystem.Owner.WorldId, currentSystem);			system.Owner.World.RemoveGlobalReactCommand<TransitionGameStateCommand>(currentSystem);			currentSystem.Component = null;		}	}	public static partial class TypesMap	{		static partial void SetSystemSetters()		{			systemsSetters = new System.Collections.Generic.Dictionary<Type, ISystemSetter>()			{				{typeof(TouchScreenSystem), new TouchScreenSystemBindContainerForSys()},				{typeof(StickInputSystem), new StickInputSystemBindContainerForSys()},				{typeof(AINPCSystem), new AINPCSystemBindContainerForSys()},				{typeof(HealthBarsManagerSystem), new HealthBarsManagerSystemBindContainerForSys()},				{typeof(DamageTextVisualizerSystem), new DamageTextVisualizerSystemBindContainerForSys()},				{typeof(RemoveItemFromCharacterSystem), new RemoveItemFromCharacterSystemBindContainerForSys()},				{typeof(MoveMainCharacterSystem), new MoveMainCharacterSystemBindContainerForSys()},				{typeof(SphereLevelingSystem), new SphereLevelingSystemBindContainerForSys()},				{typeof(RandomAttackAnimationSystem), new RandomAttackAnimationSystemBindContainerForSys()},				{typeof(DependOnTimeScaleSpeedSystem), new DependOnTimeScaleSpeedSystemBindContainerForSys()},				{typeof(ItemMovementSystem), new ItemMovementSystemBindContainerForSys()},				{typeof(SpawnViewSystem), new SpawnViewSystemBindContainerForSys()},				{typeof(InputOverUISystem), new InputOverUISystemBindContainerForSys()},				{typeof(ActorAfterViewSystem), new ActorAfterViewSystemBindContainerForSys()},				{typeof(StressTestReactsSystem), new StressTestReactsSystemBindContainerForSys()},				{typeof(AwaitersUpdateSystem), new AwaitersUpdateSystemBindContainerForSys()},				{typeof(PoolFxGlobalSystem), new PoolFxGlobalSystemBindContainerForSys()},				{typeof(ComicsWindowSystem), new ComicsWindowSystemBindContainerForSys()},				{typeof(SearchNearestDropItemSystem), new SearchNearestDropItemSystemBindContainerForSys()},				{typeof(ArenaBattleIndicatorSystem), new ArenaBattleIndicatorSystemBindContainerForSys()},				{typeof(SphereMovementSystem), new SphereMovementSystemBindContainerForSys()},				{typeof(FlyDragonAnimationSystem), new FlyDragonAnimationSystemBindContainerForSys()},				{typeof(GlobalRewardsVisualSystem), new GlobalRewardsVisualSystemBindContainerForSys()},				{typeof(PoolingSystem), new PoolingSystemBindContainerForSys()},				{typeof(SplashScreenUISystem), new SplashScreenUISystemBindContainerForSys()},				{typeof(SoftValueUISystem), new SoftValueUISystemBindContainerForSys()},				{typeof(LoseScreenUISystem), new LoseScreenUISystemBindContainerForSys()},				{typeof(FindTargetEntitySystem), new FindTargetEntitySystemBindContainerForSys()},				{typeof(DisableCollidersWhenDeadSystem), new DisableCollidersWhenDeadSystemBindContainerForSys()},				{typeof(DestroyAfterDeadEndAnimationEventSystem), new DestroyAfterDeadEndAnimationEventSystemBindContainerForSys()},				{typeof(MainCharAttackSystem), new MainCharAttackSystemBindContainerForSys()},				{typeof(ApplyAimedItemSystem), new ApplyAimedItemSystemBindContainerForSys()},				{typeof(SphereCollisionsHolderSystem), new SphereCollisionsHolderSystemBindContainerForSys()},				{typeof(SpeedUpSphereSystem), new SpeedUpSphereSystemBindContainerForSys()},				{typeof(PegasusMovementSystem), new PegasusMovementSystemBindContainerForSys()},				{typeof(DropItemSystem), new DropItemSystemBindContainerForSys()},				{typeof(ShakeAnimationWhenDamagedSystem), new ShakeAnimationWhenDamagedSystemBindContainerForSys()},				{typeof(MainCharLevelingSystem), new MainCharLevelingSystemBindContainerForSys()},				{typeof(MoveEnemyToSpawnPointSystem), new MoveEnemyToSpawnPointSystemBindContainerForSys()},				{typeof(AssetsServiceSystem), new AssetsServiceSystemBindContainerForSys()},				{typeof(IndicateDamageSystem), new IndicateDamageSystemBindContainerForSys()},				{typeof(InitSpawnPointSystem), new InitSpawnPointSystemBindContainerForSys()},				{typeof(FireballItemVisualSystem), new FireballItemVisualSystemBindContainerForSys()},				{typeof(DropPartsHealthVisualSystem), new DropPartsHealthVisualSystemBindContainerForSys()},				{typeof(EnergyRegenerationSystem), new EnergyRegenerationSystemBindContainerForSys()},				{typeof(CollideItemSystem), new CollideItemSystemBindContainerForSys()},				{typeof(VFXCreationSystem), new VFXCreationSystemBindContainerForSys()},				{typeof(RemoveComponentWorldSystem), new RemoveComponentWorldSystemBindContainerForSys()},				{typeof(DestroyEntityWorldSystem), new DestroyEntityWorldSystemBindContainerForSys()},				{typeof(DamageTextVisualizerManagerSystem), new DamageTextVisualizerManagerSystemBindContainerForSys()},				{typeof(CardsControllerUISystem), new CardsControllerUISystemBindContainerForSys()},				{typeof(SceneManagerSystem), new SceneManagerSystemBindContainerForSys()},				{typeof(HealthSystem), new HealthSystemBindContainerForSys()},				{typeof(DestroyDeadEntitySystem), new DestroyDeadEntitySystemBindContainerForSys()},				{typeof(StickFollowSystem), new StickFollowSystemBindContainerForSys()},				{typeof(ReleaseActorAssetReferenceSystem), new ReleaseActorAssetReferenceSystemBindContainerForSys()},				{typeof(StateUpdateSystem), new StateUpdateSystemBindContainerForSys()},				{typeof(CountersHolderSystem), new CountersHolderSystemBindContainerForSys()},				{typeof(UISystem), new UISystemBindContainerForSys()},				{typeof(AdditionalCanvasesSystem), new AdditionalCanvasesSystemBindContainerForSys()},				{typeof(UpgradeWindowSystem), new UpgradeWindowSystemBindContainerForSys()},				{typeof(FinalScreenUISystem), new FinalScreenUISystemBindContainerForSys()},				{typeof(DrawHPUISystem), new DrawHPUISystemBindContainerForSys()},				{typeof(ArenaBattleUIWindow), new ArenaBattleUIWindowBindContainerForSys()},				{typeof(SaveLoadSystem), new SaveLoadSystemBindContainerForSys()},				{typeof(SendLocalAnimationEventCommandsToAbilitiesSystem), new SendLocalAnimationEventCommandsToAbilitiesSystemBindContainerForSys()},				{typeof(StopAIWhenDeadSystem), new StopAIWhenDeadSystemBindContainerForSys()},				{typeof(HandleCooldownGlobalSystem), new HandleCooldownGlobalSystemBindContainerForSys()},				{typeof(SpawnDropItemsSystem), new SpawnDropItemsSystemBindContainerForSys()},				{typeof(SphereCollisionParticleSystem), new SphereCollisionParticleSystemBindContainerForSys()},				{typeof(SlowdownSystem), new SlowdownSystemBindContainerForSys()},				{typeof(HideUISystem), new HideUISystemBindContainerForSys()},				{typeof(InputListenSystem), new InputListenSystemBindContainerForSys()},				{typeof(InjectComponentsFromActorSystem), new InjectComponentsFromActorSystemBindContainerForSys()},				{typeof(WaitingCommandsSystems), new WaitingCommandsSystemsBindContainerForSys()},				{typeof(AnimationDoneCheckOutSystem), new AnimationDoneCheckOutSystemBindContainerForSys()},				{typeof(SoundGlobalSystem), new SoundGlobalSystemBindContainerForSys()},				{typeof(UpdateTranformFromActorSystem), new UpdateTranformFromActorSystemBindContainerForSys()},				{typeof(UpdateActorByTranformSystem), new UpdateActorByTranformSystemBindContainerForSys()},				{typeof(StartSystem), new StartSystemBindContainerForSys()},				{typeof(AbilitiesSystem), new AbilitiesSystemBindContainerForSys()},				{typeof(StrategiesMainServiceSystem), new StrategiesMainServiceSystemBindContainerForSys()},				{typeof(StartMenuUISystem), new StartMenuUISystemBindContainerForSys()},				{typeof(MainCharacterHealthUISystem), new MainCharacterHealthUISystemBindContainerForSys()},				{typeof(LevelBattleUISystem), new LevelBattleUISystemBindContainerForSys()},				{typeof(EnergyUISystem), new EnergyUISystemBindContainerForSys()},				{typeof(RotateToTargetSystem), new RotateToTargetSystemBindContainerForSys()},				{typeof(DeathAnimationWhenDeadSystem), new DeathAnimationWhenDeadSystemBindContainerForSys()},				{typeof(SphereDamageSystem), new SphereDamageSystemBindContainerForSys()},				{typeof(UpgradeVisualMainCharacterSystem), new UpgradeVisualMainCharacterSystemBindContainerForSys()},				{typeof(ItemThrowingSystem), new ItemThrowingSystemBindContainerForSys()},				{typeof(MultipleCollectItemsSystem), new MultipleCollectItemsSystemBindContainerForSys()},				{typeof(StartMenuStateSystem), new StartMenuStateSystemBindContainerForSys()},				{typeof(FinishArenaStateSystem), new FinishArenaStateSystemBindContainerForSys()},				{typeof(BattleStateSystem), new BattleStateSystemBindContainerForSys()},				{typeof(PrepareArenaStateSystem), new PrepareArenaStateSystemBindContainerForSys()},				{typeof(ArenaStateSystem), new ArenaStateSystemBindContainerForSys()},				{typeof(PrepareWaveStateSystem), new PrepareWaveStateSystemBindContainerForSys()},				{typeof(FinalStateSystem), new FinalStateSystemBindContainerForSys()},				{typeof(PrepareBattleStateSystem), new PrepareBattleStateSystemBindContainerForSys()},				{typeof(HealCardSystem), new HealCardSystemBindContainerForSys()},				{typeof(ExplodeCardSystem), new ExplodeCardSystemBindContainerForSys()},				{typeof(CardPushSystem), new CardPushSystemBindContainerForSys()},				{typeof(AddSphereCardSystem), new AddSphereCardSystemBindContainerForSys()},				{typeof(ChoosingPushDirCardSystem), new ChoosingPushDirCardSystemBindContainerForSys()},				{typeof(AnimationSystem), new AnimationSystemBindContainerForSys()},				{typeof(CompositeAbilitiesSystem), new CompositeAbilitiesSystemBindContainerForSys()},				{typeof(GamePhasesSystem), new GamePhasesSystemBindContainerForSys()},				{typeof(RotateCharacterItemsSystem), new RotateCharacterItemsSystemBindContainerForSys()},				{typeof(AutoApplyItemsWhenStaySystem), new AutoApplyItemsWhenStaySystemBindContainerForSys()},				{typeof(FireballRingAbilitySystem), new FireballRingAbilitySystemBindContainerForSys()},				{typeof(DefaultAttackAbilitySystem), new DefaultAttackAbilitySystemBindContainerForSys()},				{typeof(DragonDefaultAttackAbilitySystem), new DragonDefaultAttackAbilitySystemBindContainerForSys()},				{typeof(HealAbilitySystem), new HealAbilitySystemBindContainerForSys()},				{typeof(ExplodeSpheresAbilitySystem), new ExplodeSpheresAbilitySystemBindContainerForSys()},				{typeof(AddSphereAbilitySystem), new AddSphereAbilitySystemBindContainerForSys()},				{typeof(SpherePushAbilitySystem), new SpherePushAbilitySystemBindContainerForSys()},				{typeof(ChoosingPushDirectionSphereAbilitySystem), new ChoosingPushDirectionSphereAbilitySystemBindContainerForSys()},			};		}	}}